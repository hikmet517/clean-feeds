<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<feed xmlns="http://www.w3.org/2005/Atom">

	<title>Planet Emacslife</title>
	<link rel="self" href="http://planet.emacslife.com/atom.xml"/>
	<link href="http://planet.emacslife.com/"/>
	<id>http://planet.emacslife.com/atom.xml</id>
	<updated>2021-10-05T11:33:20+00:00</updated>
	<generator uri="http://www.planetplanet.org/">http://intertwingly.net/code/venus/</generator>

	<entry>
		<title type="html">Jonas Bernoulli: Magit 3.3 released</title>
		<link href="https://emacsair.me/2021/10/04/magit-3.3"/>
		<id>https://emacsair.me/2021/10/04/magit-3.3</id>
		<updated>2021-10-04T20:00:00+00:00</updated>
		<content type="html">I am excited to announce the release of Magit version 3.3, consisting of 88 commits since the last feature release two months ago.</content>
		<author>
			<name>Jonas Bernoulli</name>
			<uri>https://emacsair.me/</uri>
		</author>
		<source>
			<title type="html">Emacsair</title>
			<link rel="self" href="https://emacsair.me/feed.xml"/>
			<id>https://emacsair.me/</id>
		</source>
	</entry>

	<entry>
		<title type="html">Emacs NYC: Monthly Online Meetup—Lightning Talks</title>
		<link href="http://emacsnyc.org/2021/10/04/monthly-online-meetup-lightning-talks.html"/>
		<id>http://emacsnyc.org/2021/10/04/monthly-online-meetup-lightning-talks</id>
		<updated>2021-10-04T19:40:02+00:00</updated>
		<content type="html">&lt;p&gt;
  
    Monday, Nov 1, 2021&lt;br /&gt;
    7:00 PM EDT (GMT-0400)
  
&lt;/p&gt;

&lt;p&gt;
  Join us online: &lt;a href="https://bbb.emacsverse.org/b/eri-5mt-zx8-vvj"&gt;https://bbb.emacsverse.org/b/eri-5mt-zx8-vvj&lt;/a&gt;&lt;br /&gt;
  Please join us using your favorite IRC client at #emacsnyc or use &lt;a href="https://webchat.freenode.net"&gt;webchat.freenode.net&lt;/a&gt; to join us online.
&lt;/p&gt;

&lt;p&gt;This month we are doing lightning talks!&lt;/p&gt;

&lt;p&gt;We look forward to any talk you want to give that is Emacs or Emacs
adjacent.&lt;/p&gt;

&lt;p&gt;We do want to hear everything you have to say, but we will be limiting
each talk to 5 minutes and we will be strict about this. If you have
more to say please consider talking to us about doing a longer talk
next month.&lt;/p&gt;

&lt;p&gt;Please sign up &lt;a href="https://etherpad.wikimedia.org/p/November_2021_Emacs_Lightning_Talk_Signup"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If there is additional room and you are interested in speaking we will
try to accommodate you as best as possible.&lt;/p&gt;

&lt;p&gt;If you would like to speak then or on any other occasion, take a look
at this &lt;a href="https://emacsnyc.org/giving-a-talk.html"&gt;guide&lt;/a&gt;.&lt;/p&gt;</content>
		<author>
			<name>(emacs-nyc)</name>
			<uri>http://emacsnyc.org/</uri>
		</author>
		<source>
			<title type="html">(emacs-nyc)</title>
			<link rel="self" href="http://emacsnyc.org/atom.xml"/>
			<id>http://emacsnyc.org/</id>
		</source>
	</entry>

	<entry>
		<title type="html">Marcin Borkowski: Emacs Lisp book - status update and plans</title>
		<link href="http://mbork.pl/2021-10-04_Emacs_Lisp_book_-_status_update_and_plans"/>
		<id>http://mbork.pl/2021-10-04_Emacs_Lisp_book_-_status_update_and_plans</id>
		<updated>2021-10-04T17:31:15+00:00</updated>
		<content type="html">This post is a status update about the book I started way back and revived this year. A few months ago I wrote that I expect it to be finished “around September”, and, well, it’s October now. Oops. Except that it’s not that bad! The book is almost done, and when I say “almost”, I don’t mean it will be finished this week, but October is definitely doable. Assuming that we define “around September” as “between August and October, inclusive”, I still have a chance! ;-) So, two questions. Why did it take so long and what is the current state of things?</content>
		<author>
			<name>Marcin Borkowski</name>
			<uri>http://mbork.pl/Homepage</uri>
		</author>
		<source>
			<title type="html">Marcin Borkowski:  Content AND Presentation</title>
			<subtitle type="html">Strona domowa Marcina Borkowskiego</subtitle>
			<link rel="self" href="http://mbork.pl?action=rss;all=0;showedit=0;rcfilteronly=CategoryEmacs"/>
			<id>http://mbork.pl/Homepage</id>
		</source>
	</entry>

	<entry>
		<title type="html" xml:lang="en-US">Irreal: Kitchin on Elisp Data Structures</title>
		<link href="https://irreal.org/blog/?p=10019"/>
		<id>https://irreal.org/blog/?p=10019</id>
		<updated>2021-10-04T17:16:05+00:00</updated>
		<content type="html" xml:lang="en-US">&lt;p&gt;John Kitchin has another video up on his &lt;a href="https://www.youtube.com/playlist?list=PL0sMmOaE_gs3E0OjExoI7vlCAVygj6S4I"&gt;Scimax Channel&lt;/a&gt;. This time, it’s about &lt;a href="https://www.youtube.com/watch?v=HyFbIWvmV0A"&gt;elementary Elisp data structures&lt;/a&gt; and their manipulation. He considers&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Strings&lt;/li&gt;
&lt;li&gt;Lists&lt;/li&gt;
&lt;li&gt;Vectors&lt;/li&gt;
&lt;li&gt;Alists&lt;/li&gt;
&lt;li&gt;Plists&lt;/li&gt;
&lt;li&gt;Hash tables&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Strings aren’t really a data structure in the sense of the others but they are, in effect, character arrays and it’s possible to extract or insert data into a string.&lt;/p&gt;
&lt;p&gt;The premier Lisp data structure is, of course, the list. After all, its name appears on the marquee. Kitchin describes the need and use of quoting and quasiquoting and various ways of accessing list elements. I’m not really a Lisp old-timer but I’ve been at it long enough that I still prefer the &lt;code&gt;car&lt;/code&gt; and &lt;code&gt;cdr&lt;/code&gt; primitives to the newfangled inventions such as &lt;code&gt;first&lt;/code&gt;, &lt;code&gt;tail&lt;/code&gt;, &lt;code&gt;cl-first&lt;/code&gt;, and all the rest. If I need an element after the third or fourth, I’ll use &lt;code&gt;nth&lt;/code&gt; or &lt;code&gt;elt&lt;/code&gt;. Kitchin likes the &lt;code&gt;cl-*&lt;/code&gt; constructs and as usual Emacs lets you have it your way.&lt;/p&gt;
&lt;p&gt;Like me, Kitchin doesn’t use vectors very often and doesn’t have much to say about them but they are simple and easy to use.&lt;/p&gt;
&lt;p&gt;Alists and plists are two variations on the same theme. They’re both lists of key/value pairs differing in their representation and access means. A good argument can be made that we don’t need both but they exist for &lt;a href="http://www.catb.org/jargon/html/H/hysterical-reasons.html"&gt;hysterical raisons&lt;/a&gt; and Lispers tend to use them both.&lt;/p&gt;
&lt;p&gt;Finally, there are hash tables. The idea is pretty well known by now although they are commonly called dictionaries in other languages. They are, again, key/value pairs but have a generally \(O(1)\) lookup time while alists and plists are \(O(n)\). That doesn’t matter for small lists but with hundreds or thousands of items the \(O(n)\) can add up so hash tables make sense for that case.&lt;/p&gt;
&lt;p&gt;Even if you’re familiar with using hash tables in Elisp, you may not be familiar with using “reader notation” for initializing a hash table. It really makes sense only for small hash tables—or for writing out and then later reading in a hash table.&lt;/p&gt;
&lt;p&gt;The video is just short of 26 minutes so plan accordingly. As usual with Kitchin’s videos, it’s well worth the time to watch it even if you’re an experienced Elisper.&lt;/p&gt;</content>
		<author>
			<name>jcs</name>
			<uri>https://irreal.org/blog</uri>
		</author>
		<source>
			<title type="html">Emacs – Irreal</title>
			<subtitle type="html">The minds had long ago come up with a proper name for it; they called it the Irreal, but they thought of it as Infinite Fun. That was what they really knew it as. The Land of Infinite Fun. --Iain M. Banks, Excession</subtitle>
			<link rel="self" href="http://irreal.org/blog/?tag=emacs&amp;feed=rss2"/>
			<id>https://irreal.org/blog</id>
		</source>
	</entry>

	<entry>
		<title type="html" xml:lang="en-us">TAONAW: Emacs on MacOS, Part 1</title>
		<link href="https://helpdeskheadesk.net/help-desk-head-desk/2021-09-28/"/>
		<id>https://helpdeskheadesk.net/help-desk-head-desk/2021-09-28/</id>
		<updated>2021-10-04T04:00:00+00:00</updated>
		<content type="html">&lt;p&gt;If it wasn’t for Emacs and other Linux tricks I’ve learned, I’d be happy with my office Mac. But That’s not how I do things. As it turns out, the transition from Linux to macOS wasn’t as smooth as I thought. I have a lot of troubleshooting to cover, and I hope to do so in a couple of parts. Here’s the first part of my recent adventures.&lt;/p&gt;
&lt;p&gt;With my work responsibilities gravitating toward JAMF and remote Apple device support, an irony became clear: I haven’t used a Mac. 90% of my work was done on a PC with a VM that housed Emacs since I developed my org-mode routine. This came to light in a recent work meeting, and so it was decided. My main work machine now is a Mac.&lt;/p&gt;
&lt;p&gt;I run Linux full time for my personal needs. Both my home Desktop, which I write this post on right now, and my Lenovo Thinkpad I take with me on trips run Linux Mint. I hope you’ll excuse me then for not knowing that you can turn on right-click on a magic mouse, or that you can copy-paste whole lines of code into the Terminal simply by dragging them. These sort of things become obvious only when you use a Mac day-to-day, which is what I spent my first couple of days on; getting myself to feel at home.&lt;/p&gt;
&lt;p&gt;With the basics done and the Mac ready to do work&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="https://helpdeskheadesk.net/tags/emacs/index.xml#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;, it was time for the main event: installing Emacs from Homebrew and run it naively. I still have the option of remoting into my PC with the VM on it and run Emacs in a Linux environment, but the fun is in trying new things.&lt;/p&gt;
&lt;p&gt;I also had a new challenge to conquer. I wanted to keep my org files off the Mac. My personal org files are saved on a folder named “Personal,” which I only sync to my personal machines; this time though, I wanted &lt;em&gt;everything&lt;/em&gt; off the hard drive. This included my “Archive” folder with its many (over 100) weekly org files containing my tasks and projects for work. I’ve been using &lt;a href="https://www.gnu.org/software/tramp/"&gt;TRAMP&lt;/a&gt; regularly to access files at home on my Synology, so that was the solution I was aiming for.&lt;/p&gt;
&lt;p&gt;After working out a newbie problem with Homebrew&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="https://helpdeskheadesk.net/tags/emacs/index.xml#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;, I got Emacs installed. Next, I wrote the lines to load MELPA in my init, since I needed to install my packages before I could run my full settings file, which uses these packages.&lt;/p&gt;
&lt;p&gt;I launched Emacs and was ready to start installing my familiar packages. Instead, I encountered my first issue: &lt;code&gt;Error retrieving: https://melpa.org/packages/archive-contents (error connection-failed "connect" :host "melpa.org" :service 443)&lt;/code&gt; It took some research, but I found out that &lt;code&gt;(setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")&lt;/code&gt; solved that problem. I am not sure exactly why, but that’s the solution that ended up working. Now that I was able to load MELPA, I started downloading the packages I needed one by one by looking into my &lt;code&gt;Emacs_settings.org&lt;/code&gt; file, which I where I save my global Emacs settings with instructions.&lt;/p&gt;
&lt;p&gt;Usually, I just copy over my Emacs packages over scp (usually in Emacs, over TRAMP already) and fix whatever issues remain from inside Emacs. This time though I wanted an independent setting file which will define a different path (one that would include the TRAMP syntax to dial back home) for my agenda folders. I thought it would also be a good idea to install the packages fresh instead of relying on packages that are working in Linux.&lt;/p&gt;
&lt;p&gt;I’ve encountered a couple of Mac issues that I wasn’t prepared for along the way, but this is is where I’ll pick up the story next time.&lt;/p&gt;
&lt;h2 id="footnotes"&gt;Footnotes&lt;/h2&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;One (obvious?) thing I want to mention is that remoting into a Windows computer with a Mac is a breeze. Microsoft Remote Desktop automatically launches the connected machine full-screen, and then it’s a simple two-finger swish to move back and forth. My Windows keyboard (it’s the Microsoft ergonomic design, which is why I keep it; otherwise I’d switch to a Mac keyboard) makes it easy to switch back to “Windows Mode” in my head. But try to remote to a Mac from a Windows machine. Ugh. Unless you use VNC, which comes with its own bag of issues (not to mention security problems) you have to count on some third party software, and these have been a mixed bag of pain in the rear. &lt;a class="footnote-backref" href="https://helpdeskheadesk.net/tags/emacs/index.xml#fnref:1"&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Since all programs have to be installed under an admin account, I wrongly assumed Homebrew also needed to be installed this way. This later caused a bunch of permission problems and difficulties installing (brew) different packages. I found out about this problem with a friend and good ol' Brew doctor and fixed these permission issues. &lt;a class="footnote-backref" href="https://helpdeskheadesk.net/tags/emacs/index.xml#fnref:2"&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</content>
		<author>
			<name>TAONAW</name>
			<uri>https://helpdeskheadesk.net/tags/emacs/</uri>
		</author>
		<source>
			<title type="html">emacs on The Art of Not Asking Why</title>
			<subtitle type="html">Recent content in emacs on The Art of Not Asking Why</subtitle>
			<link rel="self" href="https://helpdeskheadesk.net/tags/emacs/index.xml"/>
			<id>https://helpdeskheadesk.net/tags/emacs/</id>
		</source>
	</entry>

	<entry>
		<title type="html">Emacs TIL: Edit Text Everywhere with Emacs</title>
		<link href="https://emacstil.com/til/2021/10/04/edit-text-everywhere-with-emacs/"/>
		<id>https://emacstil.com/til/2021/10/04/edit-text-everywhere-with-emacs</id>
		<updated>2021-10-04T00:43:06+00:00</updated>
		<content type="html">&lt;p&gt;&lt;a href="https://github.com/hlissner/doom-emacs"&gt;Doom Emacs&lt;/a&gt; comes with the &lt;a href="https://github.com/hlissner/doom-emacs/blob/develop/modules/app/everywhere/README.org"&gt;emacs-everywhere&lt;/a&gt; support.&lt;/p&gt;

&lt;p&gt;With it, you can edit text anywhere with Emacs.&lt;/p&gt;

&lt;p&gt;For example, if you are solving &lt;a href="https://leetcode.com/"&gt;Leetcode&lt;/a&gt; questions and want to edit the code with the Almighty Emacs:&lt;/p&gt;

&lt;p&gt;&lt;img alt="emacs-everywhere-demo" src="https://user-images.githubusercontent.com/2715151/135779609-36cae0dd-30d3-49e5-965f-e039c86798e8.gif" /&gt;&lt;/p&gt;

&lt;p&gt;To enable it, you uncomment the &lt;code class="language-plaintext highlighter-rouge"&gt;everywhere&lt;/code&gt; app in your Doom &lt;code class="language-plaintext highlighter-rouge"&gt;init.el&lt;/code&gt;.&lt;/p&gt;

&lt;div class="language-plaintext highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;:app

everywhere ; *leave* Emacs!? You must be joking
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In Mac OS X, to invoke the emacs everywhere, I need to set it up as a service. The way to do that is to use &lt;code class="language-plaintext highlighter-rouge"&gt;Automator&lt;/code&gt;, and create a &lt;code class="language-plaintext highlighter-rouge"&gt;Quick Action&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img alt="image" src="https://user-images.githubusercontent.com/2715151/135779709-87cb2c6a-cb05-4ebf-a0a4-41bde7e1a558.png" width="992" /&gt;&lt;/p&gt;

&lt;p&gt;The bash script:&lt;/p&gt;

&lt;div class="language-bash highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;/path/to/emacsclient &lt;span class="nt"&gt;--eval&lt;/span&gt; &lt;span class="s2"&gt;"(emacs-everywhere)"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then I assign the hotkey &lt;code class="language-plaintext highlighter-rouge"&gt;⌘ + F9&lt;/code&gt; to the service in Keyboard settings:&lt;/p&gt;

&lt;p&gt;&lt;img alt="image" src="https://user-images.githubusercontent.com/2715151/135779857-1832309e-d3d2-41d4-a82c-d59d5c1d8835.png" width="661" /&gt;&lt;/p&gt;

&lt;p&gt;Now whenever I press &lt;code class="language-plaintext highlighter-rouge"&gt;Command&lt;/code&gt; + &lt;code class="language-plaintext highlighter-rouge"&gt;F9&lt;/code&gt; key in any text area of the browser, a small Emacs window shows up and rescue all my text editing endeavors.&lt;/p&gt;</content>
		<author>
			<name>Junji Zhi</name>
			<uri>https://emacstil.com/</uri>
		</author>
		<source>
			<title type="html">Emacs TIL</title>
			<subtitle type="html">Today I learned in Emacs</subtitle>
			<link rel="self" href="https://emacstil.com/feed.xml"/>
			<id>https://emacstil.com/feed.xml</id>
		</source>
	</entry>

	<entry>
		<title type="html" xml:lang="en-US">Sacha Chua: 2021-10-04 Emacs news</title>
		<link href="https://sachachua.com/blog/2021/10/2021-10-04-emacs-news/"/>
		<id>https://sachachua.com/blog/2021/10/2021-10-04-emacs-news/</id>
		<updated>2021-10-04T00:00:00+00:00</updated>
		<content type="html">&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://git.savannah.gnu.org/cgit/emacs.git/commit/?h=emacs-28&amp;amp;id=2750d97543bce12e99a650d748a4d85343d7d229"&gt;The emacs-28 release branch has been created&lt;/a&gt; (&lt;a href="https://www.reddit.com/r/emacs/comments/pz3k71/the_emacs28_release_branch_has_been_cut/"&gt;Reddit&lt;/a&gt;, &lt;a href="https://news.ycombinator.com/item?id=28717552"&gt;HN&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Upcoming events:
&lt;ul class="org-ul"&gt;
&lt;li&gt;EmacsATX: TBD &lt;a href="https://www.meetup.com/EmacsATX/events/281048454/"&gt;https://www.meetup.com/EmacsATX/events/281048454/&lt;/a&gt; Wed Oct 6 1630 Vancouver / 1830 Chicago / 1930 Toronto / 2330 GMT – Thu Oct 7 0130 Berlin / 0500 Kolkata / 0730 Singapore&lt;/li&gt;
&lt;li&gt;M-x Research (contact them for password): TBA &lt;a href="https://m-x-research.github.io/"&gt;https://m-x-research.github.io/&lt;/a&gt; Fri Oct 15 0700 Vancouver / 0900 Chicago / 1000 Toronto / 1400 GMT / 1600 Berlin / 1930 Kolkata / 2200 Singapore&lt;/li&gt;
&lt;li&gt;&lt;a href="http://emacsnyc.org/2021/10/04/monthly-online-meetup-lightning-talks.html"&gt;Emacs NYC: Monthly Online Meetup - Lightning Talks&lt;/a&gt; Nov 1&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Emacs configuration:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/emacs/comments/q055n1/one_month_in_init_file_code_review/"&gt;One Month in Init File Code Review&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=50Vsh4qw-E4"&gt;"Inverse Literate" Emacs Configurations - Hack Sessions&lt;/a&gt; (01:09:55)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=nXu32MHBDqA"&gt;"Inverse Literate" Emacs Configurations (Part 2) - Hack Sessions&lt;/a&gt; (43:29)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Emacs Lisp:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://i.redd.it/1h30gbhm8lq71.png"&gt;svg-lib is on ELPA (https://elpa.gnu.org/packages/svg-lib.html)&lt;/a&gt; (&lt;a href="https://www.reddit.com/r/emacs/comments/pyee44/svglib_is_on_elpa/"&gt;Reddit&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ag91.github.io/blog/2021/10/02/moldable-emacs-molds-need-examples-too/"&gt;Moldable Emacs: molds need examples too!&lt;/a&gt; (&lt;a href="https://www.reddit.com/r/emacs/comments/pzl896/moldable_emacs_molds_need_examples_too/"&gt;Reddit&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=HyFbIWvmV0A"&gt;scimax - data structures in emacs-lisp&lt;/a&gt; (25:59)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Appearance:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/emacs/comments/q1kgn9/hlblockmode_now_supports_highlighting_surrounding/"&gt;hl-block-mode now supports highlighting surrounding brackets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bkaestner/secret-mode.el"&gt;secret-mode.el: Display Your Text as Unicode Block Characters&lt;/a&gt; (&lt;a href="https://www.reddit.com/r/emacs/comments/pyg33z/secretmodeel_display_your_text_as_unicode_block/"&gt;Reddit&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/emacs/comments/pweeeb/ann_idlehighlightmode_fast_symbolatpoint/"&gt;[ANN] idle-highlight-mode (fast symbol-at-point highlighting) updated&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://readingworldmagazine.com/emacs/2021-09-29-how-to-configure-emacs-base16-themes/"&gt;yuri tricys: How Can I Configure Emacs Base16 Themes in var_year?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://protesilaos.com/codelog/2021-09-29-modus-themes-1-6-0/"&gt;Protesilaos Stavrou: Modus themes 1.6.0 for GNU Emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Navigation:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/karthink/popper"&gt;Popper - Tame the flood of buffers in Emacs&lt;/a&gt; (&lt;a href="https://www.reddit.com/r/emacs/comments/q0f6yx/popper_tame_the_flood_of_buffers_in_emacs/"&gt;Reddit&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://andreyorst.gitlab.io/posts/2021-09-30-why-is-paredit-is-so-un-emacsy/"&gt;Why is Paredit is so un-Emacsy?&lt;/a&gt; (&lt;a href="https://www.reddit.com/r/emacs/comments/pyt2nh/why_is_paredit_is_so_unemacsy/"&gt;Reddit&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ashok-khanna/parevil"&gt;ParEvil - Another set of Evil Keybindings for the Lisp family of languages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/countvajhula/rigpa"&gt;rigpa: Modular editing levels and towers. A metacircular modal interface framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://emacstil.com/til/2021/09/30/ebuku-bookmarks/"&gt;Emacs TIL: Manage Web Bookmarks with Emacs + buku&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=1Lpj2-pepPE"&gt;Enjoy Reading Documentation With "Info" in Emacs&lt;/a&gt; (08:49)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Writing:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://i.redd.it/l1mwgqrv93r71.jpg"&gt;PSA: sentence-end-double-space&lt;/a&gt; (&lt;a href="https://www.reddit.com/r/emacs/comments/q0kmw3/psa_sentenceenddoublespace/"&gt;Reddit&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git.blast.noho.st/mouse/emacs-leo"&gt;emacs-leo: Translate word at point from en, es, fr, it, ch, pt, ru, pl to German&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Org Mode:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://orgmode.org/Changes.html"&gt;Org 9.5 released&lt;/a&gt; (&lt;a href="https://www.reddit.com/r/orgmode/comments/py5z2v/org_95_released/"&gt;r/orgmode&lt;/a&gt;, &lt;a href="https://www.reddit.com/r/emacs/comments/py5z7n/org_95_released/"&gt;r/emacs&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/orgmode/comments/q0dsjb/orgmode_needs_your_help/"&gt;Org-mode needs your help&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/emacs/comments/q0i2nb/what_personal_system_do_you_have_to/"&gt;What personal system do you have to sync/backup/secure your org/txt/code files?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/emacs/comments/q027aa/code_to_track_org_habit_streaks/"&gt;Code to Track Org Habit streaks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://emacstil.com/til/2021/09/28/yasnippet/"&gt;Emacs TIL: Insert Templated Code Blocks with Yasnippet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://systemcrafters.net/publishing-websites-with-org-mode/building-the-site/"&gt;Build Your Website with Org Mode - System Crafters&lt;/a&gt; (&lt;a href="https://www.reddit.com/r/emacs/comments/pwhplp/build_your_website_with_org_mode/"&gt;Reddit&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vxlabs.com/2021/09/29/convert-org-mode-files-to-docx-with-cmake-and-pandoc-for-mobile-accessibility/"&gt;Convert Org Mode files to docx with CMake and Pandoc for mobile accessibility&lt;/a&gt; (&lt;a href="https://www.reddit.com/r/orgmode/comments/pz29b3/convert_org_mode_files_to_docx_with_cmake_and/"&gt;Reddit&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dindi.garjola.net/zettelkustom.html"&gt;Garjola Dindi: My Zettelkustom (with Emacs, of course)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://v.redd.it/aic0hb2oduq71"&gt;org-roam-timestamps: keep track of creation and modification times for org-roam-nodes&lt;/a&gt; (&lt;a href="https://www.reddit.com/r/OrgRoam/comments/pz86n1/orgroamtimestamps_keep_track_of_creation_and/"&gt;r/OrgRoam&lt;/a&gt;, &lt;a href="https://www.reddit.com/r/orgmode/comments/pz89pp/orgroamtimestamps_keep_track_of_creation_and/"&gt;r/orgmode&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://irreal.org/blog/?p=10005"&gt;Irreal: Spanish Punctuation in Org-mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=a4uE36Lb2_I"&gt;Emacs Screencast #1: Mein ganzes (wissenschaftliches) Leben in Reintextform.&lt;/a&gt; (01:10:51)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Completion:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/minad/vertico"&gt;[Package of the day] VERTical Interactive COmpletion&lt;/a&gt; (&lt;a href="https://www.reddit.com/r/emacs/comments/pzt0lh/package_of_the_day_vertical_interactive_completion/"&gt;Reddit&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Coding:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/emacs/comments/q1e2tb/magit_v33_released/"&gt;Magit v3.3 released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/emacs/comments/q0hm6k/magit_three_ways_to_discardrevert_commits/"&gt;Magit: Three ways to discard/revert commits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/alejandrogallo/edit-indirect-heredoc"&gt;new minor mode: Edit indirect heredoc to do C-c ' in heredocs&lt;/a&gt; (&lt;a href="https://www.reddit.com/r/emacs/comments/q0n1hl/new_minor_mode_edit_indirect_heredoc_to_do_cc_in/"&gt;Reddit&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/emacs/comments/q03imx/ann_kubedocel_kubernetes_api_docs_in_emacs/"&gt;[ANN] kubedoc.el - Kubernetes api docs in Emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://emacsredux.com/blog/2021/09/29/make-script-files-executable-automatically/"&gt;Emacs Redux: Make Script Files Executable Automatically&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=LGPdUkb9JHM"&gt;Emacs as a Web Integrated Development Environment&lt;/a&gt; (&lt;a href="https://www.reddit.com/r/emacs/comments/pwp7le/emacs_as_a_web_integrated_development_environment/"&gt;Reddit&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Mail and news:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/emacs/comments/pzoq42/ann_dankmode_015_major_mode_for_browsing_reddit/"&gt;[ANN] dank-mode 0.1.5 - major mode for browsing Reddit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=Qq6s3PwSwjo"&gt;Managing Email in Emacs with mu4e&lt;/a&gt; (01:13:41)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Community:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/emacs/comments/pxqvtm/weekly_tips_tricks_c_thread/"&gt;Weekly Tips, Tricks, &amp;amp;c. Thread&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/emacs/comments/q1d2wa/what_is_the_best_what_the_hell_ill_do_it_in_emacs/"&gt;What is the best "What the hell, I'll do it in Emacs" utility you've seen?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mbork.pl/2021-10-04_Emacs_Lisp_book_-_status_update_and_plans"&gt;Marcin Borkowski: Emacs Lisp book - status update and plans&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/emacs/comments/pwv97t/the_philosophy_of_emacs/"&gt;The Philosophy of Emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://metaredux.com/posts/2021/09/28/meta-reduce-2021-2-autumn-begins.html"&gt;Meta Redux: Meta Reduce 2021.2: Autumn Begins&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Fun:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/duckwork/frowny.el"&gt;frowny.el: Insert frownies in Emacs :(&lt;/a&gt; (&lt;a href="https://www.reddit.com/r/emacs/comments/pxcgs0/frownyel_insert_frownies_in_emacs/"&gt;Reddit&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/md-arif-shaikh/soccer"&gt;soccer: Emacs package to get soccer fixtures, results etc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/emacs/comments/pyjgpi/schematics_in_gnu_emacs/"&gt;Schematics in GNU Emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Other:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://git.chrisbeckstrom.com/chris/tiddler-mode"&gt;tiddler-mode: View Tiddlywiki tiddlers in Emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://protesilaos.com/codelog/2021-10-02-introducing-tmr-el/"&gt;Protesilaos Stavrou: Introducing tmr.el for Emacs&lt;/a&gt; - setting a timer&lt;/li&gt;
&lt;li&gt;&lt;a href="https://emacstil.com/til/2021/10/04/edit-text-everywhere-with-emacs/"&gt;Emacs TIL: Edit Text Everywhere with Emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://helpdeskheadesk.net/help-desk-head-desk/2021-09-28/"&gt;TAONAW: Emacs on MacOS, Part 1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Emacs development:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/emacs/comments/pxpq8d/rfc_emacs_treesitter_integration/"&gt;RFC: Emacs tree-sitter integration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://git.savannah.gnu.org/cgit/emacs.git/commit/etc/NEWS?id=8b4a6a722a3982024fc87b26dbc7ef7e2043f6e1"&gt;Add new command 'ensure-empty-lines'.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://git.savannah.gnu.org/cgit/emacs.git/commit/etc/NEWS?id=069749bed7ab1587f0cfbadb5924c80d7ee49ac9"&gt;Add new user option 'translate-upper-case-key-bindings'&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://git.savannah.gnu.org/cgit/emacs.git/commit/etc/NEWS?id=39d9b96a606d1c605c329a6c7d1dab6afbd3b824"&gt;Remove MozRepl stuff from js.el&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://git.savannah.gnu.org/cgit/emacs.git/commit/etc/NEWS?id=b421e086cad435977b76e940e7e0bfb8b7db2ac9"&gt;Allow computing :doc-spec info-look elements at run time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://git.savannah.gnu.org/cgit/emacs.git/commit/etc/NEWS?id=84192b6716f4ee66787ea319bcdb37211eb5add2"&gt;New function define-keymap and new macro defvar-keymap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://git.savannah.gnu.org/cgit/emacs.git/commit/etc/NEWS?id=344634d7cc5206027fda8e791beef8c43de8aedb"&gt;Allow obsoleting themes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://git.savannah.gnu.org/cgit/emacs.git/commit/etc/NEWS?id=3c972723e44c9428ea990562033acfbd84ed29d9"&gt;* lisp/emacs-lisp/subr-x.el (with-memoization): New macro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://git.savannah.gnu.org/cgit/emacs.git/commit/etc/NEWS?id=a2a6c7abcbb5c2776ab5cdbb415df9ad5daa4e13"&gt;New command for unmarking all images in image-dired&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://git.savannah.gnu.org/cgit/emacs.git/commit/etc/NEWS?id=5988d6fa2610097f91d822df813cecbdeed26185"&gt;Restore the flet indentation fixes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://git.savannah.gnu.org/cgit/emacs.git/commit/etc/NEWS?id=1a653209030279aa03898f647376f768f5d1e9f2"&gt;Add new functionality to write buffer-based tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://git.savannah.gnu.org/cgit/emacs.git/commit/etc/NEWS?id=2e92f90a5d38f92f5d4a8a01e28e49f648ef07b4"&gt;Save position in mark ring before jumping to definition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://git.savannah.gnu.org/cgit/emacs.git/commit/etc/NEWS?id=3478e64c88fe0187f49343ed778d7e9231cf5837"&gt;Bump Emacs version to 29.0.50&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://git.savannah.gnu.org/cgit/emacs.git/commit/etc/NEWS?id=41723a329e5dc7e6d0c0bf07add8852bffcc8f81"&gt;Revert "Indent bodies of local function definitions properly in elisp-mode"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://git.savannah.gnu.org/cgit/emacs.git/commit/etc/NEWS?id=be493ea67acdc9367e29025382b534ec4339302f"&gt;Revert "Fix regressions in cl-flet indentation"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://git.savannah.gnu.org/cgit/emacs.git/commit/etc/NEWS?id=164aac0a9919fb34896ddd824394a65802343a50"&gt;* etc/NEWS: Announce Org update.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://git.savannah.gnu.org/cgit/emacs.git/commit/etc/NEWS?id=dc94ca7b2b878c9a88be72fea118bf6557259ffd"&gt;Add new '/wii' convenience ERC command&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://git.savannah.gnu.org/cgit/emacs.git/commit/etc/NEWS?id=9fc1fdcbf330b0a85cd019bb75afcb8d36243524"&gt;Restore the previous order of ERC's '/whois' arguments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://git.savannah.gnu.org/cgit/emacs.git/commit/etc/NEWS?id=758753431af51f7ac79a55d426b915443e66a077"&gt;New command mpc-goto-playing-song&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://git.savannah.gnu.org/cgit/emacs.git/commit/etc/NEWS?id=6fecf6ef2552a9b44c4311b7d5af3af0a5a54dbe"&gt;Add bindings for 'undo-redo'&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://git.savannah.gnu.org/cgit/emacs.git/commit/etc/NEWS?id=923b89248cb79d3185264f1175099d549fdaa5bf"&gt;Cross reference `dired-do-revert-buffer'&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://git.savannah.gnu.org/cgit/emacs.git/commit/etc/NEWS?id=1a0f4b3f2352ea5efeac8b3ad704304ed0244f25"&gt;Remove rcirc-omit-responses-after-join option&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://git.savannah.gnu.org/cgit/emacs.git/commit/etc/NEWS?id=902f31d32b61d0e7e73d5429334fa945e2eece37"&gt;New user option mpc-cover-image-re&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://git.savannah.gnu.org/cgit/emacs.git/commit/etc/NEWS?id=081eb52e4d8441a82134db5b34848474a1d01acf"&gt;Switch the order of ERC's '/whois' arguments sent to the server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://git.savannah.gnu.org/cgit/emacs.git/commit/etc/NEWS?id=cbb0b5d8d5c823357951689ea4f14994e0399992"&gt;Unobsolete erc-compat.el&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://git.savannah.gnu.org/cgit/emacs.git/commit/etc/NEWS?id=b9fa57e5b06a826744fee5b4af9cc45d0ee2ff26"&gt;* etc/NEWS: Announce Eshell bookmarks.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://git.savannah.gnu.org/cgit/emacs.git/commit/etc/NEWS?id=da89bdde2e3aa941594a112db884ede1beaac658"&gt;Add bookmark.el support to eww&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://git.savannah.gnu.org/cgit/emacs.git/commit/etc/NEWS?id=ee856b76ff6a241cefec1f448a2c5528ad0f1c56"&gt;Enable show-paren-mode by default&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;New packages:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://elpa.gnu.org/packages/multi-mode.html" target="_blank"&gt;multi-mode&lt;/a&gt;: support for multiple major modes&lt;/li&gt;
&lt;li&gt;&lt;a href="https://elpa.gnu.org/packages/nano-theme.html" target="_blank"&gt;nano-theme&lt;/a&gt;: N Λ N O theme&lt;/li&gt;
&lt;li&gt;&lt;a href="https://elpa.gnu.org/packages/svg-lib.html" target="_blank"&gt;svg-lib&lt;/a&gt;: SVG tags, progress bars &amp;amp; icons&lt;/li&gt;
&lt;li&gt;&lt;a href="http://melpa.org/#/consult-company" target="_blank"&gt;consult-company&lt;/a&gt;: Consult frontend for company&lt;/li&gt;
&lt;li&gt;&lt;a href="http://melpa.org/#/consult-yasnippet" target="_blank"&gt;consult-yasnippet&lt;/a&gt;: A consulting-read interface for yasnippet&lt;/li&gt;
&lt;li&gt;&lt;a href="http://melpa.org/#/emacsql-libsqlite3" target="_blank"&gt;emacsql-libsqlite3&lt;/a&gt;: EmacSQL back-end for SQLite using a module&lt;/li&gt;
&lt;li&gt;&lt;a href="http://melpa.org/#/flycheck-php-noverify" target="_blank"&gt;flycheck-php-noverify&lt;/a&gt;: Flycheck checker for PHP Noverify linter&lt;/li&gt;
&lt;li&gt;&lt;a href="http://melpa.org/#/kubedoc" target="_blank"&gt;kubedoc&lt;/a&gt;: Kubernetes API Documentation&lt;/li&gt;
&lt;li&gt;&lt;a href="http://melpa.org/#/org-auto-expand" target="_blank"&gt;org-auto-expand&lt;/a&gt;: Automatically expand certain headings&lt;/li&gt;
&lt;li&gt;&lt;a href="http://melpa.org/#/text-categories" target="_blank"&gt;text-categories&lt;/a&gt;: Assign text categories to a buffer for mass deletion&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Links from &lt;a href="https://www.reddit.com/r/emacs"&gt;reddit.com/r/emacs&lt;/a&gt;, &lt;a href="https://www.reddit.com/r/orgmode"&gt;r/orgmode&lt;/a&gt;, &lt;a href="https://www.reddit.com/r/spacemacs"&gt;r/spacemacs&lt;/a&gt;, &lt;a href="https://www.reddit.com/r/planetemacs"&gt;r/planetemacs&lt;/a&gt;, &lt;a href="https://hn.algolia.com/?query=emacs&amp;amp;sort=byDate&amp;amp;prefix&amp;amp;page=0&amp;amp;dateRange=all&amp;amp;type=story"&gt;Hacker News&lt;/a&gt;, &lt;a href="https://planet.emacslife.com"&gt;planet.emacslife.com&lt;/a&gt;, &lt;a href="https://www.youtube.com/playlist?list=PL4th0AZixyREOtvxDpdxC9oMuX7Ar7Sdt"&gt;YouTube&lt;/a&gt;, &lt;a href="http://git.savannah.gnu.org/cgit/emacs.git/log/etc/NEWS"&gt;the Emacs NEWS file&lt;/a&gt;, &lt;a href="https://emacslife.com/calendar/"&gt;Emacs Calendar&lt;/a&gt; and &lt;a href="http://lists.gnu.org/archive/html/emacs-devel/2021-10"&gt;emacs-devel&lt;/a&gt;.&lt;/p&gt;</content>
		<author>
			<name>Sacha Chua</name>
			<uri>https://sachachua.com/blog/category/emacs/feed/index.xml</uri>
		</author>
		<source>
			<title type="html">Sacha Chua - category - emacs</title>
			<subtitle type="html">Emacs, sketches, and life</subtitle>
			<link rel="self" href="https://sachachua.com/blog/category/emacs/feed/"/>
			<id>https://sachachua.com/blog/category/emacs/feed/index.xml</id>
		</source>
	</entry>

	<entry>
		<title type="html">Garjola Dindi: My Zettelkustom (with Emacs, of course)</title>
		<link href="https://dindi.garjola.net/zettelkustom.html"/>
		<id>https://dindi.garjola.net/zettelkustom.html</id>
		<updated>2021-10-03T19:00:00+00:00</updated>
		<content type="html">&lt;div class="outline-2" id="outline-container-org20f7efc"&gt;
&lt;h2 id="org20f7efc"&gt;Zettelwhat?&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org20f7efc"&gt;
&lt;p&gt;
A couple of years ago, I was trying to improve my note taking abilities and did some research. I discovered the Zettelkasten method and read the book &lt;i&gt;How to take smart notes&lt;/i&gt; by Sönke Ahrens which describes this approach invented by Niklas Luhmann, a German sociologist.
&lt;/p&gt;

&lt;p&gt;
For a quick introduction to the method, I find this &lt;a href="https://zettelkasten.de/posts/overview/"&gt;web site&lt;/a&gt; very well done. If you get interested in Zettelkasten, before jumping to the last shiny app or Emacs package, I think it's better to read Ahrens' book.
&lt;/p&gt;

&lt;p&gt;
Anyway, in a few words, in Zettelkasten, you create notes with small bits of knowledge that are meant to be self contained. These notes may contain links to other notes with related content. The idea is that the knowledge is not organized hierarchically, but in a graph where notes point to other notes.
&lt;/p&gt;

&lt;p&gt;
The Zettelkasten is a living thing where notes are regularly added and most importantly, the notes are frequently read and improved, either by reformulating the content, adding links to other notes, etc.
&lt;/p&gt;

&lt;p&gt;
The Zettelkasten is meant to be personal, edited by a single person. It's like a second brain.
&lt;/p&gt;

&lt;p&gt;
Niklas Luhmann did everything by hand and his Zettelkasten was made of paper cards. He had to invent a clever indexing method and used special &lt;i&gt;structure notes&lt;/i&gt; to create tables of contents for different subjects. It is a pleasure to browse &lt;a href="https://niklas-luhmann-archiv.de/bestand/zettelkasten/suche"&gt;the original Zettels&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
In order to implement a digital Zettelkasten, we only need a note taking application with the ability to create links between notes. A nice bonus is adding tags to the notes to simplify search and generation of sets of related notes.
&lt;/p&gt;

&lt;p&gt;
There are lots of applications on the proprietary software market that support the creation and management of a Zettelkasten. There are also free software counterparts.
&lt;/p&gt;

&lt;p&gt;
Emacs offers several alternatives in terms of packages:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/felko/neuron-mode"&gt;Neuron mode&lt;/a&gt;, which uses markdown;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ymherklotz/emacs-zettelkasten"&gt;org-zettelkasten&lt;/a&gt;, which is a set of functions on top of org-mode;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://efls.github.io/zetteldeft/"&gt;Zetteldeft&lt;/a&gt;, which uses &lt;a href="https://jblevins.org/projects/deft/"&gt;deft&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/org-roam/org-roam"&gt;org-roam&lt;/a&gt;, based on org-mode and inspired by a commercial application.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
There are probably others that I am not aware of. Org-roam seems to be the most popular one.
&lt;/p&gt;

&lt;p&gt;
After reading Ahrens' book, I decided that I wanted to try the approach. I did not think want to choose one of the available Emacs packages for several reasons. The first one is that I did not understand why I needed anything else than plain org-mode. The second one was that I did not want to commit to any particular implementation before understanding how and if the approach would be useful for me.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="outline-2" id="outline-container-org9995d75"&gt;
&lt;h2 id="org9995d75"&gt;How I do Zettelkasten&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org9995d75"&gt;
&lt;p&gt;
I have a big org-mode file called &lt;code&gt;zettels.org&lt;/code&gt; with to top-level headings, one for &lt;i&gt;structure notes&lt;/i&gt; and another one for standard zettels. Each note is a second level heading with a title, possibly some org-mode tags, a property drawer and the note content.
&lt;/p&gt;

&lt;p&gt;
The property drawer contains at least the &lt;code&gt;DATE_CREATED&lt;/code&gt; property with an inactive org-mode timestamp for the day and time when the note was created.
&lt;/p&gt;

&lt;p&gt;
The &lt;i&gt;structure notes&lt;/i&gt; are created by hand. That means that I create a heading, write the note and add the &lt;code&gt;DATE_CREATED&lt;/code&gt; property. I do not create many structure notes, so a manual workflow is OK.
&lt;/p&gt;

&lt;p&gt;
For the standard zettels, I use org-capture. The capture template automatically inserts the &lt;code&gt;DATE_CREATED&lt;/code&gt; property, but also a &lt;code&gt;FROM&lt;/code&gt; property with an org-mode link to the place I was in Emacs when I run org-capture. This link can therefore point to another Zettel (for which an org-id will be created), any org-mode heading if I am in an org-mode file, but this can also be an e-mail in Gnus, a pdf document, an EPUB file, a web page, etc. This is possible because I do &lt;b&gt;everything&lt;/b&gt; in Emacs. Storing where I was when I created the note gives interesting context.
&lt;/p&gt;

&lt;p&gt;
I have 2 org-capture templates for Zettelkasten, one which does what I described above, and another one which is used for quotes. The latter will copy the marked region in the current buffer into a quote org-mode block.
&lt;/p&gt;

&lt;p&gt;
So a typical captured zettel may look like this:
&lt;/p&gt;

&lt;pre class="example" id="orge5e90bc"&gt;** The title of the note :tag1:tag2:
:PROPERTIES:
:DATE_CREATED: [2021-08-06 Fri 22:43]
:FROM: [[nov:/home/garjola/Calibre Library/abook.epub::26:7069][EPUB file at /home/garjola/Calibre Library/abook.epub]]
:END:

My ideas on the subject. Etc.

#+begin_quote
Some text that was marked in the EPUB I was reading.
#+end_quote

- See also [[id:e2b5839d-d7ef-4151-8676-17dacd261e86][Another note linked with org-id.]]
&lt;/pre&gt;

&lt;p&gt;
This way, while I am reading interesting things, I can capture an idea with all its context. I will of course come later to this note to improve it.
&lt;/p&gt;

&lt;p&gt;
This is done in my regular &lt;i&gt;gardening sessions&lt;/i&gt;. During these sessions, I browse the Zettelkasten, read notes, add tags and links to other notes, rewrite things, etc.
&lt;/p&gt;

&lt;p&gt;
For this tasks, I use a couple of functions. The first one jumps to a random Zettel, so I am sure that I regularly explore forgotten parts of the Zettelkasten. The second one finds &lt;i&gt;back-links&lt;/i&gt;, that is notes having links that point to the current note. This is useful for a bi-directional browsing of the content.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="outline-2" id="outline-container-org3d2fa7b"&gt;
&lt;h2 id="org3d2fa7b"&gt;My custom Zettelkasten setup&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org3d2fa7b"&gt;
&lt;/div&gt;
&lt;div class="outline-3" id="outline-container-orgdab062e"&gt;
&lt;h3 id="orgdab062e"&gt;Capture templates for Zettelkasten&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgdab062e"&gt;
&lt;p&gt;
The first component of the setup is the capture templates. They look like this:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span class="org-keyword"&gt;setq&lt;/span&gt; org-capture-templates 
      (append org-capture-templates
              (&lt;span class="org-keyword"&gt;quote&lt;/span&gt; ((&lt;span class="org-string"&gt;"z"&lt;/span&gt; &lt;span class="org-string"&gt;"Zettelkasten"&lt;/span&gt;)
                      (&lt;span class="org-string"&gt;"zz"&lt;/span&gt; &lt;span class="org-string"&gt;"Zettel"&lt;/span&gt; entry
                       (file+headline &lt;span class="org-string"&gt;"~/org/zettels.org"&lt;/span&gt; &lt;span class="org-string"&gt;"Zettels"&lt;/span&gt;)
                       (&lt;span class="org-keyword"&gt;function&lt;/span&gt; my/zettel-template)
                       &lt;span class="org-builtin"&gt;:empty-lines&lt;/span&gt; 1)
                      (&lt;span class="org-string"&gt;"zq"&lt;/span&gt; &lt;span class="org-string"&gt;"Quote"&lt;/span&gt; entry
                       (file+headline &lt;span class="org-string"&gt;"~/org/zettels.org"&lt;/span&gt; &lt;span class="org-string"&gt;"Zettels"&lt;/span&gt;)
                       (&lt;span class="org-keyword"&gt;function&lt;/span&gt; my/zettel-quote-template)
                       &lt;span class="org-builtin"&gt;:empty-lines&lt;/span&gt; 1)))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
There are 2 templates, one for notes without quotes (called with &lt;code&gt;zz&lt;/code&gt;) and another for notes where I want to insert the marked region in the current buffer as a quote (called with &lt;code&gt;zq&lt;/code&gt;). Both templates insert the note in the &lt;code&gt;zettels.org&lt;/code&gt; file under the &lt;code&gt;Zettels&lt;/code&gt; heading. Instead of writing the template in this code, I prefer using a function to generate it. I find this more readable.
&lt;/p&gt;

&lt;p&gt;
The 2 functions are here:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span class="org-keyword"&gt;defun&lt;/span&gt; &lt;span class="org-function-name"&gt;my/zettel-template&lt;/span&gt; ()
  &lt;span class="org-doc"&gt;"* %?\n:PROPERTIES:\n:DATE_CREATED: %U\n:FROM: %a\n:END:\n%i\n"&lt;/span&gt;)
(&lt;span class="org-keyword"&gt;defun&lt;/span&gt; &lt;span class="org-function-name"&gt;my/zettel-quote-template&lt;/span&gt; ()
  &lt;span class="org-doc"&gt;"* %?\n:PROPERTIES:\n:DATE_CREATED: %U\n:FROM: %a\n:END:\n#+begin_quote\n%i\n#+end_quote"&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
They are straightforward. The cursor is placed in the heading (with the &lt;code&gt;%?&lt;/code&gt; org-expansion) so I can write the title. The property drawer will contain the time stamp and a link to the place Emacs was when org-capture was called. In the case of the quote, the marked region is copied inside the org-mode quote block.
&lt;/p&gt;

&lt;p&gt;
And that's it!
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div class="outline-3" id="outline-container-org02de5bb"&gt;
&lt;h3 id="org02de5bb"&gt;Back-links to zettels&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org02de5bb"&gt;
&lt;p&gt;
Back-links can be tricky. The package &lt;a href="https://github.com/alphapapa/org-sidebar"&gt;org-sidebar&lt;/a&gt; provides a function for that. But for some reason that I don't remember, I didn't like the way it worked (or more probably, my incompetence did not allow me to make it work). So I searched a bit and found &lt;a href="https://www.reddit.com/r/orgmode/comments/fyr2ai/orgsuperlinks_new_package_for_auto_adding/"&gt;a bit of elisp&lt;/a&gt; that does what I need.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span class="org-keyword"&gt;require&lt;/span&gt; '&lt;span class="org-constant"&gt;org-ql&lt;/span&gt;)
(&lt;span class="org-keyword"&gt;require&lt;/span&gt; '&lt;span class="org-constant"&gt;org-ql-view&lt;/span&gt;)

(&lt;span class="org-keyword"&gt;defun&lt;/span&gt; &lt;span class="org-function-name"&gt;my/zettel-backlinks&lt;/span&gt; ()
  (&lt;span class="org-keyword"&gt;interactive&lt;/span&gt;)
  (&lt;span class="org-keyword"&gt;let*&lt;/span&gt; ((id (org-entry-get (point) &lt;span class="org-string"&gt;"ID"&lt;/span&gt;))
         (custom-id (org-entry-get (point) &lt;span class="org-string"&gt;"CUSTOM_ID"&lt;/span&gt;))
         (query (&lt;span class="org-keyword"&gt;cond&lt;/span&gt; ((&lt;span class="org-keyword"&gt;and&lt;/span&gt; id custom-id)
                       &lt;span class="org-comment-delimiter"&gt;;; &lt;/span&gt;&lt;span class="org-comment"&gt;This will be slow because it isn't optimized to a single regexp.  :(&lt;/span&gt;
                       (&lt;span class="org-warning"&gt;warn&lt;/span&gt; &lt;span class="org-string"&gt;"Entry has both ID and CUSTOM_ID set; query will be slow"&lt;/span&gt;)
                       `(&lt;span class="org-keyword"&gt;or&lt;/span&gt; (link &lt;span class="org-builtin"&gt;:target&lt;/span&gt; ,(concat &lt;span class="org-string"&gt;"id:"&lt;/span&gt; id))
                            (link &lt;span class="org-builtin"&gt;:target&lt;/span&gt; ,(concat &lt;span class="org-string"&gt;"id:"&lt;/span&gt; custom-id))))
                      ((&lt;span class="org-keyword"&gt;or&lt;/span&gt; id custom-id)
                       `(link &lt;span class="org-builtin"&gt;:target&lt;/span&gt; ,(concat &lt;span class="org-string"&gt;"id:"&lt;/span&gt; (&lt;span class="org-keyword"&gt;or&lt;/span&gt; id custom-id))))
                      (t (&lt;span class="org-warning"&gt;error&lt;/span&gt; &lt;span class="org-string"&gt;"Entry has no ID nor CUSTOM_ID property"&lt;/span&gt;))))
         (title (concat &lt;span class="org-string"&gt;"Links to: "&lt;/span&gt; (org-get-heading t t)))
         (org-agenda-tag-filter nil))
    (org-ql-search (&lt;span class="org-keyword"&gt;quote&lt;/span&gt; (&lt;span class="org-string"&gt;"~/org/zettels.org"&lt;/span&gt;)) query &lt;span class="org-builtin"&gt;:title&lt;/span&gt; title)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
It uses the wonderful &lt;a href="https://github.com/alphapapa/org-ql"&gt;org-ql&lt;/a&gt; package to search all org headings with a link matching the org-id of the current note. The search is limited to my &lt;code&gt;zettels.org&lt;/code&gt; file. 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="outline-3" id="outline-container-org51b60f0"&gt;
&lt;h3 id="org51b60f0"&gt;Jump to a random zettel&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org51b60f0"&gt;
&lt;p&gt;
The last bit I needed for serendipity is jumping to a random note. For this, I use the &lt;a href="http://github.com/mwfogleman/org-randomnote"&gt;org-randomnote&lt;/a&gt; package. This package uses the &lt;code&gt;org-randomnote-candidates&lt;/code&gt; variable to store the list of files that will be searched for random headings. It is initialized to the value of &lt;code&gt;org-agenda-files&lt;/code&gt;. I just wrote a couple of functions to temporary change the list of candidate files so that I can limit the random jump to my zettels file:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span class="org-keyword"&gt;defun&lt;/span&gt; &lt;span class="org-function-name"&gt;my/random-note&lt;/span&gt; (candidates)
  &lt;span class="org-doc"&gt;"Jump to a random org heading in one of the `CANDIDATES` files"&lt;/span&gt;
  (&lt;span class="org-keyword"&gt;let&lt;/span&gt; ((old-randomnote-candidates org-randomnote-candidates))
    (&lt;span class="org-keyword"&gt;setq&lt;/span&gt; org-randomnote-candidates candidates)
    (org-randomnote &lt;span class="org-string"&gt;"zettels"&lt;/span&gt;)
    (&lt;span class="org-keyword"&gt;setq&lt;/span&gt; org-randomnote-candidates old-randomnote-candidates)))

(&lt;span class="org-keyword"&gt;defun&lt;/span&gt; &lt;span class="org-function-name"&gt;my/random-zettel&lt;/span&gt; ()
  &lt;span class="org-doc"&gt;"Jump to a random zettel"&lt;/span&gt;
  (&lt;span class="org-keyword"&gt;interactive&lt;/span&gt;)
  (my/random-note '(&lt;span class="org-string"&gt;"~/org/zettels.org"&lt;/span&gt;)))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="outline-2" id="outline-container-orgcb163a0"&gt;
&lt;h2 id="orgcb163a0"&gt;Moving to org-roam (or maybe not)&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgcb163a0"&gt;
&lt;p&gt;
My first Zettel dates back to December 30 2019. I've been using this system since then and I am very happy with it. A year ago, I started seeing a big buzz about org-roam and I looked into it. It seemed very nice, with functionalities that I don't have in my system and I started wondering whether I should use it. Since at that time I understood that there were some breaking changes planned for version 2, I decided to wait for org-roam v2 to be released and re-evaluate the situation.
&lt;/p&gt;

&lt;p&gt;
In the meantime, my Zettelkasten has continued growing. Today, it contains 1345 zettels. After org-roam v2 was released, David Wilson at System Crafters did a &lt;a href="https://www.youtube.com/playlist?list=PLEoMzSkcN8oN3x3XaZQ-AXFKv52LZzjqD"&gt;series of videos&lt;/a&gt; showing the power of org-roam. As always, David's videos are of great help to get started and he has the rare ability of guiding the interested &lt;i&gt;crafter&lt;/i&gt; so that he or she is able to customize thing as wanted.
&lt;/p&gt;

&lt;p&gt;
I therefore installed org-roam and even wrote the code to migrate my &lt;i&gt;Zettelkustom&lt;/i&gt; to org-roam. I was an interesting exercise that allowed me increase my knowledge of Emacs Lisp and get familiar with the &lt;code&gt;org-element&lt;/code&gt; API.
&lt;/p&gt;

&lt;p&gt;
However, I am not sure that I want to do the migration. Although org-roam is very rich and has a large community of users, I have the feeling that it does to many things that I don't need. I guess that, if I was starting with org-mode, org-roam would be the good choice, but I have been using org-mode for personal organization (with GTD), note taking, writing scientific papers and reports, doing literate programming, and may more things.
&lt;/p&gt;

&lt;p&gt;
And I have my personal preferences and habits that I will likely not change. For instance, for me, mixing project management and Zettelkasten does not make sense. I also don't need a special integration between Zettelkasten and my bibliographic database (&lt;a href="https://github.com/jkitchin/org-ref"&gt;org-ref&lt;/a&gt; and &lt;a href="https://github.com/tmalsburg/helm-bibtex/blob/master/README.ivy-bibtex.org"&gt;ivy-bibtex&lt;/a&gt; are all I need).
&lt;/p&gt;

&lt;p&gt;
Therefore, by now, I'll stick to my 2 capture templates and 2 simple functions that I understand well.
&lt;/p&gt;

&lt;p&gt;
I any case, all this shows the power of org-mode and its ecosystem.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="taglist"&gt;&lt;a href="https://dindi.garjola.net/tags.html"&gt;Tags&lt;/a&gt;: &lt;a href="https://dindi.garjola.net/tag-emacs.html"&gt;emacs&lt;/a&gt; &lt;a href="https://dindi.garjola.net/tag-zettelkasten.html"&gt;zettelkasten&lt;/a&gt; &lt;a href="https://dindi.garjola.net/tag-org-mode.html"&gt;org-mode&lt;/a&gt; &lt;/div&gt;</content>
		<author>
			<name>Garjola Dindi</name>
			<uri>https://dindi.garjola.net/</uri>
		</author>
		<source>
			<title type="html">Garjola Dindi</title>
			<subtitle type="html">Garjola Dindi</subtitle>
			<link rel="self" href="https://dindi.garjola.net/rss.xml"/>
			<id>https://dindi.garjola.net/</id>
		</source>
	</entry>

	<entry>
		<title type="html" xml:lang="en-US">Irreal: Inspired Python</title>
		<link href="https://irreal.org/blog/?p=10017"/>
		<id>https://irreal.org/blog/?p=10017</id>
		<updated>2021-10-03T16:49:16+00:00</updated>
		<content type="html" xml:lang="en-US">&lt;p&gt;All Irreal readers are, I’m sure, familiar with Mickey Petersen who, in addition to his excellent Emacs site, &lt;a href="https://www.masteringemacs.org/all-articles"&gt;Mastering Emacs&lt;/a&gt;, is also the author of a book &lt;a href="https://www.masteringemacs.org/book"&gt;by the same name&lt;/a&gt;. The articles on his site are among the best you’ll find dealing with Emacs. The same is true of his book. If you don’t yet have it and you’re an Emacser, you should definitely get a copy.&lt;/p&gt;
&lt;p&gt;Now Mickey has a new site, &lt;a href="https://www.inspiredpython.com/"&gt;Inspired Python&lt;/a&gt;. Here’s his Twitter announcement:&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;
&lt;p dir="ltr" lang="en"&gt;I’m pleased to announce my new site, Inspired Python &lt;img alt="🐍" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.1.0/72x72/1f40d.png" style="height: 1em;" /&gt;. If you want to grow your &lt;a href="https://twitter.com/hashtag/Python?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#Python&lt;/a&gt; skills then check it out! (And don’t forget to RT. Thanks!)&lt;a href="https://t.co/3VtiM8zLI5"&gt;https://t.co/3VtiM8zLI5&lt;/a&gt; &lt;a href="https://t.co/VgWOrZNV9F"&gt;pic.twitter.com/VgWOrZNV9F&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— Mickey Petersen (@mickeynp) &lt;a href="https://twitter.com/mickeynp/status/1442830197787664389?ref_src=twsrc%5Etfw"&gt;September 28, 2021&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;I haven’t written in Python for some time but I read a couple of the articles and, of course, they’re up to Mickey’s usual high standards. If you’re a Pythonista, be sure to check it out.&lt;/p&gt;</content>
		<author>
			<name>jcs</name>
			<uri>https://irreal.org/blog</uri>
		</author>
		<source>
			<title type="html">Emacs – Irreal</title>
			<subtitle type="html">The minds had long ago come up with a proper name for it; they called it the Irreal, but they thought of it as Infinite Fun. That was what they really knew it as. The Land of Infinite Fun. --Iain M. Banks, Excession</subtitle>
			<link rel="self" href="http://irreal.org/blog/?tag=emacs&amp;feed=rss2"/>
			<id>https://irreal.org/blog</id>
		</source>
	</entry>

	<entry>
		<title type="html" xml:lang="en-US">Irreal: Emacs 28 Is Drawing Near</title>
		<link href="https://irreal.org/blog/?p=10015"/>
		<id>https://irreal.org/blog/?p=10015</id>
		<updated>2021-10-02T16:22:49+00:00</updated>
		<content type="html" xml:lang="en-US">&lt;p&gt;Eli Zaretskii writes that he’s &lt;a href="https://lists.gnu.org/archive/html/emacs-devel/2021-09/msg02290.html"&gt;cut the release branch for Emacs 28.1&lt;/a&gt; in preparation for the upcoming pretest. He asks that everyone tracking Emacs development switch to the new branch so that it can get as much testing as possible.&lt;/p&gt;
&lt;p&gt;Eli is anticipating that the first pretest will be released in a few weeks. If you’re like me, you want it &lt;i&gt;right now&lt;/i&gt; but the reality is, as I’ve said before, that Eli and the other developers are working hard to give us the best possible release and in the end we’ll be glad we waited. In the mean time, you can help by compiling and using the release branch to help with the bug squashing.&lt;/p&gt;</content>
		<author>
			<name>jcs</name>
			<uri>https://irreal.org/blog</uri>
		</author>
		<source>
			<title type="html">Emacs – Irreal</title>
			<subtitle type="html">The minds had long ago come up with a proper name for it; they called it the Irreal, but they thought of it as Infinite Fun. That was what they really knew it as. The Land of Infinite Fun. --Iain M. Banks, Excession</subtitle>
			<link rel="self" href="http://irreal.org/blog/?tag=emacs&amp;feed=rss2"/>
			<id>https://irreal.org/blog</id>
		</source>
	</entry>

	<entry>
		<title type="html">Protesilaos Stavrou: Introducing tmr.el for Emacs</title>
		<link href="https://protesilaos.com/codelog/2021-10-02-introducing-tmr-el/"/>
		<id>https://protesilaos.com/codelog/2021-10-02-introducing-tmr-el/</id>
		<updated>2021-10-02T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;Just created a standalone Git repository for my &lt;code&gt;tmr.el&lt;/code&gt; library:
&lt;a href="https://gitlab.com/protesilaos/tmr.el"&gt;https://gitlab.com/protesilaos/tmr.el&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This has been part of &lt;a href="https://protesilaos.com/dotemacs"&gt;my dotemacs&lt;/a&gt;
for several months now and I thought it was right to turn it into its
own package.  No ELPA package is planned for the foreseeable future.&lt;/p&gt;

&lt;p&gt;Excerpt from its documentation:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This package provides a single command for setting a timer: &lt;code&gt;tmr&lt;/code&gt;.&lt;/p&gt;

  &lt;p&gt;The command prompts for a unit of time, which is represented as a string
that consists of a number and, optionally, a single character suffix
which specifies the unit of time.&lt;/p&gt;

  &lt;p&gt;Valid formats:&lt;/p&gt;

  &lt;table&gt;
    &lt;thead&gt;
      &lt;tr&gt;
        &lt;th&gt;Input&lt;/th&gt;
        &lt;th&gt;Meaning&lt;/th&gt;
      &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td&gt;5&lt;/td&gt;
        &lt;td&gt;5 minutes&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;5m&lt;/td&gt;
        &lt;td&gt;5 minutes&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;5s&lt;/td&gt;
        &lt;td&gt;5 seconds&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;5h&lt;/td&gt;
        &lt;td&gt;5 hours&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;

  &lt;p&gt;If &lt;code&gt;tmr&lt;/code&gt; is called with an optional prefix argument (&lt;code&gt;C-u&lt;/code&gt;), it also asks
for a description which accompanies the given timer.  Preconfigured
candidates are specified in the user option &lt;code&gt;tmr-descriptions-list&lt;/code&gt;,
though any arbitrary input is acceptable at the minibuffer prompt.&lt;/p&gt;

  &lt;p&gt;When the timer is set, a message is sent to the echo area recording the
current time and the point in the future when the timer elapses.  Echo
area messages can be reviewed with the &lt;code&gt;view-echo-area-messages&lt;/code&gt; which is
bound to &lt;code&gt;C-h e&lt;/code&gt; by default.&lt;/p&gt;

  &lt;p&gt;Once the timer runs its course, it produces a desktop notification and
plays an alarm sound.  The notification’s message is practically the
same as that which is sent to the echo area.  The sound file for the
alarm is defined in &lt;code&gt;tmr-sound-file&lt;/code&gt;, while the urgency of the
notification can be set through the &lt;code&gt;tmr-notification-urgency&lt;/code&gt; option.&lt;/p&gt;

  &lt;p&gt;The &lt;code&gt;tmr-cancel&lt;/code&gt; command cancels the last &lt;code&gt;tmr&lt;/code&gt;.  Note that for the time
being it has no notion of multiple timers—just the last one.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;As with every piece of Elisp I produce for my private needs, this is all
done for recreational and/or educational purposes.  Though I believe
&lt;code&gt;tmr.el&lt;/code&gt; can be used by others as well, provided they are willing to
install it manually.&lt;/p&gt;

&lt;p&gt;The initial release notwithstanding, there are a couple of user-facing
improvements to be made:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Make the &lt;code&gt;tmr-cancel&lt;/code&gt; command prompt with completion for a timer
object when more than one is present.&lt;/li&gt;
  &lt;li&gt;Create a &lt;code&gt;tmr-list&lt;/code&gt; command which lists all &lt;code&gt;tmr&lt;/code&gt; objects (yes, I
know about &lt;code&gt;list-timers&lt;/code&gt;, but I want something more specific).&lt;/li&gt;
&lt;/ol&gt;</content>
		<author>
			<name>Protesilaos Stavrou</name>
			<uri>https://protesilaos.com/codelog</uri>
		</author>
		<source>
			<title type="html">Protesilaos Stavrou: Coding blog</title>
			<subtitle type="html">Coding blog</subtitle>
			<link rel="self" href="https://protesilaos.com/codelog.xml"/>
			<id>https://protesilaos.com/codelog</id>
		</source>
	</entry>

	<entry>
		<title type="html">Andrea: Moldable Emacs: molds need examples too!</title>
		<link href="http://ag91.github.io/blog/2021/10/02/moldable-emacs-molds-need-examples-too"/>
		<id>http://ag91.github.io/blog/2021/10/02/moldable-emacs-molds-need-examples-too</id>
		<updated>2021-10-02T00:00:00+00:00</updated>
		<content type="html">Generating tests and documentation from molds!</content>
		<author>
			<name>Andrea</name>
			<uri>http://ag91.github.io</uri>
		</author>
		<source>
			<title type="html">Where parallels cross</title>
			<subtitle type="html">Interesting bits of life</subtitle>
			<link rel="self" href="https://ag91.github.io/rss.xml"/>
			<id>http://ag91.github.io</id>
		</source>
	</entry>

	<entry>
		<title type="html" xml:lang="en-US">Irreal: Org-mode 9.5 Is Out</title>
		<link href="https://irreal.org/blog/?p=10011"/>
		<id>https://irreal.org/blog/?p=10011</id>
		<updated>2021-09-30T16:06:09+00:00</updated>
		<content type="html" xml:lang="en-US">&lt;p&gt;Bastien writes to tell us that &lt;a href="https://lists.gnu.org/archive/html/emacs-orgmode/2021-09/msg00651.html"&gt;Org-mode 9.5 has been released&lt;/a&gt;. The big thing about the release is the new citation engine but there are lots of other changes too. You can see what’s in the new release by perusing the &lt;a href="https://orgmode.org/Changes.html"&gt;Change Log&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Org really is a jewel. The next time someone tells you that Emacs is old, dead technology, ask them why, then, all those other editors are so busy copying Org-mode and trying to port it into their own products.&lt;/p&gt;</content>
		<author>
			<name>jcs</name>
			<uri>https://irreal.org/blog</uri>
		</author>
		<source>
			<title type="html">Emacs – Irreal</title>
			<subtitle type="html">The minds had long ago come up with a proper name for it; they called it the Irreal, but they thought of it as Infinite Fun. That was what they really knew it as. The Land of Infinite Fun. --Iain M. Banks, Excession</subtitle>
			<link rel="self" href="http://irreal.org/blog/?tag=emacs&amp;feed=rss2"/>
			<id>https://irreal.org/blog</id>
		</source>
	</entry>

	<entry>
		<title type="html">Emacs TIL: Manage Web Bookmarks with Emacs + buku</title>
		<link href="https://emacstil.com/til/2021/09/30/ebuku-bookmarks/"/>
		<id>https://emacstil.com/til/2021/09/30/ebuku-bookmarks</id>
		<updated>2021-09-30T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;&lt;a href="https://github.com/jarun/buku"&gt;buku&lt;/a&gt; CLI bookmark manager. For those of you who don’t want to store bookmarks data in Chrome or Firebox, buku is an alternative.&lt;/p&gt;

&lt;p&gt;It comes with an Emacs major mode: &lt;a href="https://github.com/flexibeast/ebuku"&gt;ebuku&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Type &lt;code class="language-plaintext highlighter-rouge"&gt;M-x ebuku&lt;/code&gt; you get:&lt;/p&gt;

&lt;p&gt;&lt;img alt="image" src="https://user-images.githubusercontent.com/2715151/135387096-d11c26ea-773f-407d-86d4-f67a5554b908.png" width="666" /&gt;&lt;/p&gt;

&lt;p&gt;Then you can search(&lt;code class="language-plaintext highlighter-rouge"&gt;s&lt;/code&gt;), open(&lt;code class="language-plaintext highlighter-rouge"&gt;RET&lt;/code&gt;), edit(&lt;code class="language-plaintext highlighter-rouge"&gt;e&lt;/code&gt;), etc. with Emacs interface.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: For copying URLs, ebuku doesn’t have support yet. I have opened a &lt;a href="https://github.com/flexibeast/ebuku/pull/19/files"&gt;PR&lt;/a&gt;. Meanwhile you can copy the &lt;code class="language-plaintext highlighter-rouge"&gt;(ebuku-copy-url)&lt;/code&gt; function to your config and try it out locally&lt;/em&gt;.&lt;/p&gt;</content>
		<author>
			<name>Junji Zhi</name>
			<uri>https://emacstil.com/</uri>
		</author>
		<source>
			<title type="html">Emacs TIL</title>
			<subtitle type="html">Today I learned in Emacs</subtitle>
			<link rel="self" href="https://emacstil.com/feed.xml"/>
			<id>https://emacstil.com/feed.xml</id>
		</source>
	</entry>

	<entry>
		<title type="html" xml:lang="en-US">Irreal: Make Scripts Executable Automatically</title>
		<link href="https://irreal.org/blog/?p=10009"/>
		<id>https://irreal.org/blog/?p=10009</id>
		<updated>2021-09-29T21:09:50+00:00</updated>
		<content type="html" xml:lang="en-US">&lt;p&gt;Bozhidar Batsov has a splendid tip over at &lt;a href="https://emacsredux.com"&gt;Emacs Redux&lt;/a&gt;. I’m pretty sure he’s mentioned it before but it’s so useful it bears repeating. The tip is &lt;a href="https://emacsredux.com/blog/2021/09/29/make-script-files-executable-automatically/"&gt;how to make scripts executable&lt;/a&gt;. “Scripts” means a file that has a shebang line. That is, a line that starts with &lt;code&gt;#!&lt;/code&gt; followed by an application to execute.&lt;/p&gt;
&lt;p&gt;The usual workflow is to write the script, save the file, and then change its permissions to make it executable. But it turns out that Emacs provides a better—or at least easier—way. The trick is to use the &lt;code&gt;executable-make-buffer-file-executable-if-script-p&lt;/code&gt; command. It checks for the shebang line, makes sure that no execute bits are already set, and if not sets the execute bits respecting the umask.&lt;/p&gt;
&lt;p&gt;The usual procedure is to call &lt;code&gt;executable-make-buffer-file-executable-if-script-p&lt;/code&gt; from a hook function as described by Batsov in his post. If you’ve every written a script and tried to run it only to discover that it’s not executable, this tip will save you some time and frustration.&lt;/p&gt;</content>
		<author>
			<name>jcs</name>
			<uri>https://irreal.org/blog</uri>
		</author>
		<source>
			<title type="html">Emacs – Irreal</title>
			<subtitle type="html">The minds had long ago come up with a proper name for it; they called it the Irreal, but they thought of it as Infinite Fun. That was what they really knew it as. The Land of Infinite Fun. --Iain M. Banks, Excession</subtitle>
			<link rel="self" href="http://irreal.org/blog/?tag=emacs&amp;feed=rss2"/>
			<id>https://irreal.org/blog</id>
		</source>
	</entry>

	<entry>
		<title type="html">Emacs Redux: Make Script Files Executable Automatically</title>
		<link href="http://emacsredux.com/blog/2021/09/29/make-script-files-executable-automatically/"/>
		<id>http://emacsredux.com/blog/2021/09/29/make-script-files-executable-automatically</id>
		<updated>2021-09-29T10:59:00+00:00</updated>
		<content type="html">&lt;p&gt;How does the process of script creation typically go? You create a file (e.g. &lt;code class="language-plaintext highlighter-rouge"&gt;script.py&lt;/code&gt;),
you write some code in it, and finally you make the file executable, so you can
run it directly (e.g. by typing &lt;code class="language-plaintext highlighter-rouge"&gt;./script.py&lt;/code&gt;). Turns out that Emacs has one very
specific helper for making a script executable, namely the function
&lt;code class="language-plaintext highlighter-rouge"&gt;executable-make-buffer-file-executable-if-script-p&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What the function does is to check if the buffer file has a shebang (e.g. &lt;code class="language-plaintext highlighter-rouge"&gt;#!/bin/ruby&lt;/code&gt;) in it and then it modifies its permissions, if necessary. The function is meant to be used
in a hook, most typically &lt;code class="language-plaintext highlighter-rouge"&gt;after-save-hook&lt;/code&gt;:&lt;/p&gt;

&lt;div class="language-emacs-lisp highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;'after-save-hook&lt;/span&gt;
          &lt;span class="ss"&gt;'executable-make-buffer-file-executable-if-script-p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’ve been using this little trick for ages, and I was reminded of it today
when I came across &lt;a href="https://github.com/bbatsov/prelude/issues/1343"&gt;this Prelude issue&lt;/a&gt;. I guess in some cases making a file executable automatically might be
undesirable, but I’ve never ran into any issues myself.&lt;/p&gt;

&lt;p&gt;That’s all I have for you today. Feel free to share other tips for working with
scripts in Emacs in the comments. Keep hacking!&lt;/p&gt;</content>
		<author>
			<name>Bozhidar Batsov</name>
			<uri>http://emacsredux.com/</uri>
		</author>
		<source>
			<title type="html">Emacs Redux</title>
			<subtitle type="html">Return to the Essence of Text Editing</subtitle>
			<link rel="self" href="https://emacsredux.com/atom.xml"/>
			<id>http://emacsredux.com/atom.xml</id>
		</source>
	</entry>

	<entry>
		<title type="html" xml:lang="en-US">yuri tricys: How Can I Configure Emacs Base16 Themes in var_year?</title>
		<link href="https://readingworldmagazine.com/emacs/2021-09-29-how-to-configure-emacs-base16-themes/"/>
		<id>https://readingworldmagazine.com/emacs/2021-09-29-how-to-configure-emacs-base16-themes/</id>
		<updated>2021-09-29T00:00:00+00:00</updated>
		<content type="html">Base16 (phd, seaside, and sulphurpool) 
For emacs custom framework used to implement the following emacs themes refer to this post: How to Configure Emacs Themes
In following, in terms of clarity, it's easier to structure blocks of code syntax with opening and closing blocks.
Any code blocks between opening and closing code blocks translates into code between those sections in the script.
Screenshot base16-phd 
Screenshot base16-seaside 
Screenshot base16-sulphurpool</content>
		<author>
			<name>yuri tricys</name>
			<uri>https://readingworldmagazine.com/tags/emacs/</uri>
		</author>
		<source>
			<title type="html">emacs on READING WORLD MAGAZINE</title>
			<subtitle type="html">Recent content in emacs on READING WORLD MAGAZINE</subtitle>
			<link rel="self" href="https://readingworldmagazine.com/tags/emacs/index.xml"/>
			<id>https://readingworldmagazine.com/tags/emacs/</id>
		</source>
	</entry>

	<entry>
		<title type="html">Protesilaos Stavrou: Modus themes 1.6.0 for GNU Emacs</title>
		<link href="https://protesilaos.com/codelog/2021-09-29-modus-themes-1-6-0/"/>
		<id>https://protesilaos.com/codelog/2021-09-29-modus-themes-1-6-0/</id>
		<updated>2021-09-29T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;Just published version &lt;code&gt;1.6.0&lt;/code&gt; of &lt;a href="https://protesilaos.com/modus-themes"&gt;the Modus
themes&lt;/a&gt;.  The detailed release
notes are reproduced below.&lt;/p&gt;

&lt;p&gt;For any questions pertaining to this publication, feel welcome to
&lt;a href="https://protesilaos.com/contact/"&gt;contact me&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I will now prepare the patch for emacs.git.  The modus-themes package in
GNU ELPA fetches its contents from emacs.git, so expect an update
shortly thereafter.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2&gt;Modus themes version 1.6.0&lt;/h2&gt;

&lt;p&gt;By Protesilaos Stavrou &lt;a href="mailto:info@protesilaos.com"&gt;info@protesilaos.com&lt;/a&gt; on 2021-09-29&lt;/p&gt;

&lt;p&gt;This entry records the changes made to the project since the release of
version 1.5.0 on 2021-07-15.  There have been around 70 commits since
then.&lt;/p&gt;

&lt;p&gt;Every colour-related modification referenced herein is always
implemented in accordance with the primary accessibility objective of
the themes for a minimum contrast ratio of 7:1 between background and
foreground values in their given combination (the WCAG AAA standard).
Such edits also account for colour-coding that is optimised for the
needs of users with red-green colour deficiency (deuteranopia or
variants).&lt;/p&gt;

&lt;p&gt;Here is the URL of the manual: &lt;a href="https://protesilaos.com/modus-themes"&gt;https://protesilaos.com/modus-themes&lt;/a&gt;.
Or read it from Emacs by evaluating this form:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(info "(modus-themes) Top")
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The themes are built into Emacs version 28 (current development target),
and are available on GNU ELPA as well as other archives.  This release
is the final one for the emacs-28 branch, as that gets cut as the next
stable release of GNU Emacs.  Future releases will target Emacs 29 once
that becomes the new &lt;code&gt;master&lt;/code&gt; branch.&lt;/p&gt;

&lt;h3&gt;Customisation options&lt;/h3&gt;

&lt;p&gt;[ Themes need to be reloaded for changes to take effect. ]&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Introduced the new &lt;code&gt;modus-themes-tabs-accented&lt;/code&gt; boolean option.  When
set to non-nil, it renders the background of all tab interfaces in a
shade of blue.  Those interfaces are tab-bar (built-in), tab-line
(built-in), and Centaur tabs.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;The background “accented” colour is the same as the one used for
mode lines when &lt;code&gt;modus-themes-mode-line&lt;/code&gt; is configured accordingly.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Tweaked the &lt;code&gt;modus-themes-mode-line&lt;/code&gt; to accept a &lt;code&gt;padded&lt;/code&gt; symbol as
part of the list of properties it can read.  This will increase the
spacing around the mode lines’ text, making the line taller overall
but also more spacious.&lt;/p&gt;

    &lt;p&gt;Thanks to Manuel Uberti for making the proposal and providing feedback
in issue 228: &lt;a href="https://gitlab.com/protesilaos/modus-themes/-/issues/228"&gt;https://gitlab.com/protesilaos/modus-themes/-/issues/228&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Added the &lt;code&gt;modus-themes-scale-small&lt;/code&gt; which complements the existing
scale values with one that is meant to be smaller than the base
height.  This option is reserved for special cases and is currently
only used as an opt-in feature in the Org agenda.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Expanded the &lt;code&gt;modus-themes-org-agenda&lt;/code&gt; with more parameters:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;The current date can now also be underlined.&lt;/li&gt;
      &lt;li&gt;Date headings can be scaled/enlarged in size.&lt;/li&gt;
      &lt;li&gt;Events, like those of the Diary or sexp entries, can be customised.&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;Consult the manual or the variable’s doc string for the details.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Removed the obsoleted aliases &lt;code&gt;modus-themes-slanted-constructs&lt;/code&gt; and
&lt;code&gt;modus-themes-scale-5&lt;/code&gt;.  Those are superseded by the more
appropriately named &lt;code&gt;modus-themes-italic-constructs&lt;/code&gt; and
&lt;code&gt;modus-themes-scale-title&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;Thanks to Nicolas De Jaeghere for the patch in merge request 47:
&lt;a href="https://gitlab.com/protesilaos/modus-themes/-/merge_requests/47"&gt;https://gitlab.com/protesilaos/modus-themes/-/merge_requests/47&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Faces and face groups&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Make the &lt;code&gt;prodigy&lt;/code&gt; faces for red/green/yellow inherit from the faces
&lt;code&gt;error&lt;/code&gt;/&lt;code&gt;success&lt;/code&gt;/&lt;code&gt;warning&lt;/code&gt;, respectively.  This is done to (i) avoid
duplication and (ii) ensure that the green/success colour coding is
consistent with the goal of the themes to empower users with red-green
colour deficiency.  The boolean option that changes all such greens to
shades of blue is &lt;code&gt;modus-themes-success-deuteranopia&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Assigned the &lt;code&gt;:extend&lt;/code&gt; attribute to the &lt;code&gt;org-code&lt;/code&gt; face.  This is
necessary when the Org source contains lines that start with a colon
sign.  Those are interpreted as code blocks.  For example:&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;# Sample code block
:  #+BEGIN_SRC emacs-lisp
:    (defun in-interval (bounds el)
:      (and (&amp;gt;= el (car bounds)) (&amp;lt;= el (cadr bounds))))
:  #+END_SRC
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;With the &lt;code&gt;:extend&lt;/code&gt; in place, the background stretches to the edge of
the window, thus giving those lines a uniform rectangular shape.  For
inline uses of &lt;code&gt;org-code&lt;/code&gt;, the background should remain limited to the
span of the text.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Broadened support for &lt;code&gt;marginalia&lt;/code&gt; faces in two phases.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;The first pertained to the file permissions that are shown when
completing against file paths.  Their style is similar to what
&lt;code&gt;dired+&lt;/code&gt; or the &lt;code&gt;direfl&lt;/code&gt; packages provide, however we have taken
care to optimise the interface for the purposes of completion
UIs—where things can look like Dired, we make them alike, but
where they must differ, we differentiate the designs accordingly.
There can be no compromises or arbitrary constraints.&lt;/p&gt;

        &lt;p&gt;Also read: &lt;a href="https://github.com/minad/marginalia/pull/91"&gt;https://github.com/minad/marginalia/pull/91&lt;/a&gt;.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;The second batch covered all sorts of extra classes that provide
granular control over the appearance of Marginalia instances.
Refinements also had to be made to already-supported faces for the
sake of achieving consistency across the various Marginalia
interfaces.&lt;/p&gt;

        &lt;p&gt;Also read: &lt;a href="https://github.com/minad/marginalia/pull/92"&gt;https://github.com/minad/marginalia/pull/92&lt;/a&gt;.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Refined &lt;code&gt;diredfl&lt;/code&gt; and &lt;code&gt;dired+&lt;/code&gt; faces.  For the various “priv” faces,
the intent is to increase the difference in hueness between adjacent
file permissions (the changes are minor, but they do change the
overall result).  Numbers are toned down so that they do not clash
with dates.  The file suffix no longer uses cyan to stand out more in
detailed views.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Made &lt;code&gt;icomplete-selected-match&lt;/code&gt; (Emacs28) more legible by aligning its
presentation with metaphors that are estaslished across the
modus-themes.  Thanks to Kévin Le Gouguec (peniblec) for noting the
inconsistency with the new face upstream and for writing the patch for
it in merge request 50:
&lt;a href="https://gitlab.com/protesilaos/modus-themes/-/merge_requests/50"&gt;https://gitlab.com/protesilaos/modus-themes/-/merge_requests/50&lt;/a&gt;.
Also thanks to Manuel Uberti for confirming that things would look
consistent in the comments’ section of that merge request.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Fixed faulty inheritance for the &lt;code&gt;web-mode-keyword-face&lt;/code&gt;.  It should
now properly copy the attributes of &lt;code&gt;font-lock-keyword-face&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Made inheritance of the new &lt;code&gt;help-key-binding&lt;/code&gt; (Emacs28 key) the
default for all faces that need to style key bindings.&lt;/p&gt;

    &lt;p&gt;In Emacs 28 all key bindings are automatically displayed with the face
&lt;code&gt;help-key-binding&lt;/code&gt; which uses some new face attributes to draw a
cleaner box around it.  Given that the themes must work with earlier
versions of Emacs, we cannot inherit it unconditionally so we added
the relevant conditionality.  It is nice to offer this feature to
those who use the themes on Emacs 28.  Older versions retain the
previous style of a blue colour coupled with a bold weight.&lt;/p&gt;

    &lt;p&gt;The exception to this rule is the transient.el faces (this is the
pop-up window used by Magit, among others—transient.el is now built
into Emacs).  The box effect creates unpredictable misalignments, so
we default to the old key binding style for those.&lt;/p&gt;

    &lt;p&gt;Thanks to Manuel Uberti and Kevin Fleming for their feedback in issue
232: &lt;a href="https://gitlab.com/protesilaos/modus-themes/-/issues/232"&gt;https://gitlab.com/protesilaos/modus-themes/-/issues/232&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Added support for the new &lt;code&gt;notmuch-jump-key&lt;/code&gt; face.  I contributed this
face in commits c37c9912, 5cc106b0 to the Notmuch git repo:
&lt;a href="https://git.notmuchmail.org/git/notmuch"&gt;https://git.notmuchmail.org/git/notmuch&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Updated the &lt;code&gt;bookmark-face&lt;/code&gt; (Emacs28) as it has been changed upstream
to be a fringe indicator instead of an in-buffer, line-wide background
highlight.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Aligned Ediff faces with other &lt;code&gt;modus-themes-diffs&lt;/code&gt; styles.  Before we
would differentiate a “focus state”, though that is now considered
surplus to requirements.  The notion of a “focus state” only make
sense in Magit which applies variegated colour-coding to diff hunks
based on their state.  Whereas non-active Ediff changes are grayed
out, so there is no need for further colour-coding nuances.  The most
noticeable change is with:&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;(setq modus-themes-diffs 'bg-only)
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;As noted in the commit message of 64c74ae (from 2021-09-04):&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;If users think this change is for the worse, we can always define a
helper function like this:

    (defun modus-themes--ediff-style (bgonly default)
      "Diff style for Ediff.
    BGONLY and DEFAULT depend on the value of `modus-themes-diffs'.
    The former is more subtle."
      (if (eq modus-themes-diffs 'bg-only)
          (list bgonly)
        (list default)))

And apply it thus:

    `(ediff-current-diff-A ((,class :inherit ,@(modus-themes--ediff-style
                                                'modus-themes-diff-removed
                                                'modus-themes-diff-focus-removed))))
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;No feedback was received towards that end in about a month, so we
consider the change to be acceptable, without prejudice to the
possibility of future updates.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Unified the styles of &lt;code&gt;org-agenda-calendar-sexp&lt;/code&gt;, &lt;code&gt;org-agenda-diary&lt;/code&gt;,
and &lt;code&gt;org-agenda-calendar-event&lt;/code&gt;.  This is not a user-facing change but
an internal refactoring to avoid repetition.  It also makes things
easier for the implementation of the &lt;code&gt;modus-themes-org-agenda&lt;/code&gt; (as
mentioned above).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Ensured that the &lt;code&gt;bookmark-menu-bookmark&lt;/code&gt; face inherits from the
&lt;code&gt;bold&lt;/code&gt; face.  By default it hardcodes the bold weight, whereas we
instruct it to inherit the &lt;code&gt;bold&lt;/code&gt; face.  A user can thus change the
&lt;code&gt;:weight&lt;/code&gt; of that face to whatever they want, like semibold,
extrabold, etc.  We do this throughout the themes for bold and
italics—consider it a “hidden feature” of sorts.  Check the manual
for more on the matter:&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;(info "(modus-themes) Configure bold and italic faces (DIY)")
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Provided support for tab-bar groups (Emacs28).  Specifically the faces
&lt;code&gt;tab-bar-tab-group-current&lt;/code&gt; and &lt;code&gt;tab-bar-tab-group-inactive&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;Thanks to Adam Porter (alphapapa) for the feedback in issue 8 over at
the Github mirror: &lt;a href="https://github.com/protesilaos/modus-themes/issues/8"&gt;https://github.com/protesilaos/modus-themes/issues/8&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Decoupled the &lt;code&gt;stripes&lt;/code&gt; face from that of &lt;code&gt;hl-line-face&lt;/code&gt;.  This is
because the stripes are not meant to change depending on the value of
the user option &lt;code&gt;modus-themes-hl-line&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Revised the red shade of “flagged” entries in mu4e and notmuch.  Those
are now consistent with Gnus.  The shade of red that was used before
was closer to the orange side of the spectrum whereas the current has
hints of blue (a cherry colour) and thus combines better with the cyan
and blue that prevail in those interfaces.  These are fine margins,
though the effect is noticeable regardless.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Configured the new &lt;code&gt;ansi-color&lt;/code&gt; faces (Emacs28) which are used by
shells and terminals (among others).  Thanks to Manuel Uberti for
reporting the changes to upstream Emacs in issue 236:
&lt;a href="https://gitlab.com/protesilaos/modus-themes/-/issues/236"&gt;https://gitlab.com/protesilaos/modus-themes/-/issues/236&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Expanded support for EMMS faces, pertaining to its browser views.
Thanks to Feng Shu (tumashu) for bringing those to my attention in
issue 11 over at the Github mirror:
&lt;a href="https://github.com/protesilaos/modus-themes/issues/11"&gt;https://github.com/protesilaos/modus-themes/issues/11&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Styled the new &lt;code&gt;tab-line-tab-modified&lt;/code&gt; face (Emacs28).  It should now
use a faint red colour to denote changes to the underlying file.
Thanks to Adam Porter (alphapapa) for bringing it to my attention in
issue 12 over at the Github mirror:
&lt;a href="https://github.com/protesilaos/modus-themes/issues/12"&gt;https://github.com/protesilaos/modus-themes/issues/12&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Configured the single face that the &lt;code&gt;cursor-flash&lt;/code&gt; package has to
offer.  Thanks to Manuel Uberti for the feedback in issue 231:
&lt;a href="https://gitlab.com/protesilaos/modus-themes/-/issues/231"&gt;https://gitlab.com/protesilaos/modus-themes/-/issues/231&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Included &lt;code&gt;elpher&lt;/code&gt; in the list of supported packages by means of
covering the heading faces it implements.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Recalibrated certain dedicated colours for inactive tabs and tweaked
tab faces to (i) marginally improve the default aesthetic and (ii)
harmonise it with the style of &lt;code&gt;modus-themes-tabs-accented&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Removed the foreground attribute from all markup faces that are meant
to denote emphasis in italics.  That is because such faces are
typically composed with others, so we do not wish to inadvertently
override any other colour that would otherwise have taken effect.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Wrote the faces for upstream Org that improve the contextuality of
various agenda views (included in version 9.5).  This was done in
close collaboration with Gustavo Barros who offered detailed feedback
in issue 208 (which also led to the creation and eventual expansion of
the &lt;code&gt;modus-themes-org-agenda&lt;/code&gt; user option):
&lt;a href="https://gitlab.com/protesilaos/modus-themes/-/issues/208"&gt;https://gitlab.com/protesilaos/modus-themes/-/issues/208&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;Four new faces improve certain styles and offer more flexibility for
some Org agenda views: &lt;code&gt;org-agenda-date-weekend-today&lt;/code&gt;,
&lt;code&gt;org-imminent-deadline&lt;/code&gt;, &lt;code&gt;org-agenda-structure-secondary&lt;/code&gt;,
&lt;code&gt;org-agenda-structure-filter&lt;/code&gt;.  They inherit from existing faces in
order to remain backward-compatible.&lt;/p&gt;

    &lt;p&gt;Quoting from &lt;a href="https://list.orgmode.org/87lf7q7gpq.fsf@protesilaos.com/"&gt;https://list.orgmode.org/87lf7q7gpq.fsf@protesilaos.com/&lt;/a&gt;:&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;+ The 'org-imminent-deadline' is useful to disambiguate generic
  warnings from deadlines.  For example, a warning could be
  rendered in a yellow colored text and have a bold weight,
  whereas a deadline might be red and styled with italics.

+ The 'org-agenda-structure-filter' applies to all tag/term
  filters in agenda views that search for keywords or patterns.
  It is designed to inherit from 'org-agenda-structure' in
  addition to the 'org-warning' face that was present before (and
  removes the generic 'warning' face from one place).  This offers
  the benefit of consistency, as, say, an increase in font height
  or a change in font family in 'org-agenda-structure' will
  propagate to the filter as well.  The whole header line thus
  looks part of a singular design.

+ The 'org-agenda-structure-secondary' complements the above for
  those same views where a description follows the header.  For
  instance, the tags view provides information to "Press N r" to
  filter by a numbered tag.  Themes/users may prefer to
  disambiguate this line from the header above it, such as by
  using a less intense color or by reducing its height relative to
  the 'org-agenda-structure'.

+ The 'org-agenda-date-weekend-today' provides the option to
  differentiate the current date on a weekend from the current
  date on weekdays.
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other patches I have made to, inter alia, emacs.git and org.git with
regard to faces are documented in previous change log entries.&lt;/p&gt;

&lt;h3&gt;Documentation&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Removed references to old versions of the themes from before their
refactoring in version 1.0.0.  Those old packages no longer exist.
Users must install the &lt;code&gt;modus-themes&lt;/code&gt; and then load either of
&lt;code&gt;modus-operandi&lt;/code&gt; or &lt;code&gt;modus-vivendi&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Included various extensions of the Vertico package in the list of
indirectly supported packages.  Those define faces which either
inherit from basic ones that we already support or use colours that
are consistent with our accessibility target.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Referenced &lt;code&gt;side-hustle&lt;/code&gt;, &lt;code&gt;tide&lt;/code&gt;, &lt;code&gt;bufler&lt;/code&gt; as an indirectly supported
packages for the same reasons.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Simplified time-stamp local variables that are used in modus-themes.el
to show the time the file was edited.  We apply &lt;code&gt;time-stamp-pattern&lt;/code&gt;
instead of setting multiple time-stamp variables.  Thanks to Stephen
Gildea for the patch, which was sent to me via email (yes, you can
always do that).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Updated the manual’s “acknowledgements” section to name all new
contributors to code/ideas/feedback.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Furnished information on how to configure the &lt;code&gt;highlight-parentheses&lt;/code&gt;
package and extend its faces for use with the themes.  The entry
provides a complete Elisp implementation.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Improved the code samples for the prism.el setup that users may wish
to set up by themselves.  The new lists of colours work better when
Prism’s colouration is limited to a small set of hues.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Deleted trailing whitespace in the manual which had adverse effects
when trying to compile the modus-themes.org over at emacs.git.  Thanks
to Philip Kaludercic for the patch in merge request 49:
&lt;a href="https://gitlab.com/protesilaos/modus-themes/-/merge_requests/49"&gt;https://gitlab.com/protesilaos/modus-themes/-/merge_requests/49&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks again to everyone involved.  Looking forward to see the Modus
themes, version 1.6.0, as part of the next stable release of Emacs.&lt;/p&gt;</content>
		<author>
			<name>Protesilaos Stavrou</name>
			<uri>https://protesilaos.com/codelog</uri>
		</author>
		<source>
			<title type="html">Protesilaos Stavrou: Coding blog</title>
			<subtitle type="html">Coding blog</subtitle>
			<link rel="self" href="https://protesilaos.com/codelog.xml"/>
			<id>https://protesilaos.com/codelog</id>
		</source>
	</entry>

	<entry>
		<title type="html" xml:lang="en-US">Irreal: Easy Draw</title>
		<link href="https://irreal.org/blog/?p=10007"/>
		<id>https://irreal.org/blog/?p=10007</id>
		<updated>2021-09-28T16:38:46+00:00</updated>
		<content type="html" xml:lang="en-US">&lt;p&gt;The &lt;a href="https://irreal.org/blog/?p=9996"&gt;other day&lt;/a&gt;, I wrote about line drawing tools in Emacs. For those who like interactive systems, I mentioned &lt;a href="http://ditaa.sourceforge.net/"&gt;ditaa&lt;/a&gt;, which takes an ASCII art diagram and turns it into a pretty PNG file. AKIYAMA Kouhei (misohena) has a project that offers a true visual drawing tool that runs in Emacs. Here’s a demonstration.&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;
&lt;p dir="ltr" lang="ja"&gt;埋め込み型の&lt;br /&gt;
簡単な作図ツールくらいあっても罰は当たらないと思うんですよ。&lt;a href="https://t.co/JGhGC3dfUf"&gt;https://t.co/JGhGC3dfUf&lt;/a&gt;&lt;a href="https://twitter.com/hashtag/Emacs?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#Emacs&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://twitter.com/hashtag/orgmode?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#orgmode&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://t.co/8FkCzw0iwh"&gt;pic.twitter.com/8FkCzw0iwh&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;—&lt;br /&gt;
ak10i (@ak10i) &lt;a href="https://twitter.com/ak10i/status/1433022738294132752?ref_src=twsrc%5Etfw"&gt;September&lt;br /&gt;
1, 2021&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;I haven’t tried it out yet but it looks pretty nice. The project is called &lt;a href="https://github.com/misohena/el-easydraw"&gt;el-easydraw&lt;/a&gt;. It’s not on MELPA and misohena doesn’t say whether he plans to add it but all the code is available on GitHub.&lt;/p&gt;
&lt;p&gt;If you’re looking for a visual drawing tool for Emacs this is something you should definitely take a look at.  It’s still early days for the project so it will be interesting to see how it evolves.&lt;/p&gt;</content>
		<author>
			<name>jcs</name>
			<uri>https://irreal.org/blog</uri>
		</author>
		<source>
			<title type="html">Emacs – Irreal</title>
			<subtitle type="html">The minds had long ago come up with a proper name for it; they called it the Irreal, but they thought of it as Infinite Fun. That was what they really knew it as. The Land of Infinite Fun. --Iain M. Banks, Excession</subtitle>
			<link rel="self" href="http://irreal.org/blog/?tag=emacs&amp;feed=rss2"/>
			<id>https://irreal.org/blog</id>
		</source>
	</entry>

	<entry>
		<title type="html">Magnus: Using lens to set a value based on another</title>
		<link href="https://magnus.therning.org/2021-09-28-using-lens-to-set-a-value-based-on-another.html"/>
		<id>https://magnus.therning.org/2021-09-28-using-lens-to-set-a-value-based-on-another.html</id>
		<updated>2021-09-28T11:21:00+00:00</updated>
		<content type="html">&lt;p&gt;
I started writing a small tool for work that consumes YAML files and combines
the data into a single YAML file. To be specific it consumes YAML files
containing snippets of service specification for &lt;a href="https://docs.docker.com/compose/"&gt;Docker Compose&lt;/a&gt; and it produces
a YAML file for use with &lt;code&gt;docker-compose&lt;/code&gt;. Besides being useful to me, I thought
it'd also be a good way to get some experience with &lt;a href="https://hackage.haskell.org/package/lens"&gt;lens&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
The first transformation I wanted to write was one that puts in the correct
image name. So, only slightly simplified, it is transforming
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-yaml"&gt;&lt;span class="org-variable-name"&gt;panda&lt;/span&gt;:
    &lt;span class="org-variable-name"&gt;x-image&lt;/span&gt;: panda
&lt;span class="org-variable-name"&gt;goat&lt;/span&gt;:
    &lt;span class="org-variable-name"&gt;x-image&lt;/span&gt;: goat
&lt;span class="org-variable-name"&gt;tapir&lt;/span&gt;:
    &lt;span class="org-variable-name"&gt;image&lt;/span&gt;: incorrent
    &lt;span class="org-variable-name"&gt;x-image&lt;/span&gt;: tapir
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
into
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-yaml"&gt;&lt;span class="org-variable-name"&gt;panda&lt;/span&gt;:
    &lt;span class="org-variable-name"&gt;image&lt;/span&gt;: panda:latest
    &lt;span class="org-variable-name"&gt;x-image&lt;/span&gt;: panda
&lt;span class="org-variable-name"&gt;goat&lt;/span&gt;:
    &lt;span class="org-variable-name"&gt;image&lt;/span&gt;: goat:latest
    &lt;span class="org-variable-name"&gt;x-image&lt;/span&gt;: goat
&lt;span class="org-variable-name"&gt;tapir&lt;/span&gt;:
    &lt;span class="org-variable-name"&gt;image&lt;/span&gt;: tapir:latest
    &lt;span class="org-variable-name"&gt;x-image&lt;/span&gt;: tapir
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
That is, it creates a new key/value pair in each object based on the value of
&lt;code&gt;x-image&lt;/code&gt; in the same object.
&lt;/p&gt;

&lt;div class="outline-2" id="outline-container-org3bb936a"&gt;
&lt;h2 id="org3bb936a"&gt;First approach&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org3bb936a"&gt;
&lt;p&gt;
The first approach I came up with was to traverse the sub-objects and apply a
function that adds the &lt;code&gt;image&lt;/code&gt; key.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-haskell"&gt;&lt;span class="org-haskell-definition"&gt;setImage&lt;/span&gt; &lt;span class="org-haskell-operator"&gt;::&lt;/span&gt; &lt;span class="org-haskell-type"&gt;Value&lt;/span&gt; &lt;span class="org-haskell-operator"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="org-haskell-type"&gt;Value&lt;/span&gt;
&lt;span class="org-haskell-definition"&gt;setImage&lt;/span&gt; y &lt;span class="org-haskell-operator"&gt;=&lt;/span&gt; y &lt;span class="org-haskell-operator"&gt;&amp;amp;&lt;/span&gt; members &lt;span class="org-haskell-operator"&gt;%~&lt;/span&gt; setImg
  &lt;span class="org-haskell-keyword"&gt;where&lt;/span&gt;
    setImg o &lt;span class="org-haskell-operator"&gt;=&lt;/span&gt;
        o
            &lt;span class="org-haskell-operator"&gt;&amp;amp;&lt;/span&gt; _Object &lt;span class="org-haskell-operator"&gt;.&lt;/span&gt; at &lt;span class="org-string"&gt;"image"&lt;/span&gt;
            &lt;span class="org-haskell-operator"&gt;?~&lt;/span&gt; &lt;span class="org-haskell-constructor"&gt;String&lt;/span&gt; &lt;span class="org-rainbow-delimiters-depth-1"&gt;(&lt;/span&gt;o &lt;span class="org-haskell-operator"&gt;^.&lt;/span&gt; key &lt;span class="org-string"&gt;"x-image"&lt;/span&gt; &lt;span class="org-haskell-operator"&gt;.&lt;/span&gt; _String &lt;span class="org-haskell-operator"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="org-string"&gt;":latest"&lt;/span&gt;&lt;span class="org-rainbow-delimiters-depth-1"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
It did make me wonder if this kind of problem, setting a value based on another
value, isn't so common that there's a nicer solution to it. Perhaps coded up in
a combinator that isn't mentioned in &lt;a href="https://leanpub.com/optics-by-example"&gt;Optics By Example&lt;/a&gt; (or mabye I've forgot it
was mentioned). That lead me to ask around a bit, which leads to approach two.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="outline-2" id="outline-container-orgf55f462"&gt;
&lt;h2 id="orgf55f462"&gt;Second approach&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgf55f462"&gt;
&lt;p&gt;
Arguably there isn't much difference, it's still traversing the sub-objects and
applying a function. The function makes use of &lt;code&gt;view&lt;/code&gt; being run in a monad and
&lt;code&gt;ASetter&lt;/code&gt; being defined with &lt;code&gt;Identity&lt;/code&gt; (a monad).
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-haskell"&gt;&lt;span class="org-haskell-definition"&gt;setImage'&lt;/span&gt; &lt;span class="org-haskell-operator"&gt;::&lt;/span&gt; &lt;span class="org-haskell-type"&gt;Value&lt;/span&gt; &lt;span class="org-haskell-operator"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="org-haskell-type"&gt;Value&lt;/span&gt;
&lt;span class="org-haskell-definition"&gt;setImage'&lt;/span&gt; y &lt;span class="org-haskell-operator"&gt;=&lt;/span&gt;
    y
        &lt;span class="org-haskell-operator"&gt;&amp;amp;&lt;/span&gt; members &lt;span class="org-haskell-operator"&gt;.&lt;/span&gt; _Object
        &lt;span class="org-haskell-operator"&gt;%~&lt;/span&gt; &lt;span class="org-rainbow-delimiters-depth-1"&gt;(&lt;/span&gt;set &lt;span class="org-rainbow-delimiters-depth-2"&gt;(&lt;/span&gt;at &lt;span class="org-string"&gt;"image"&lt;/span&gt;&lt;span class="org-rainbow-delimiters-depth-2"&gt;)&lt;/span&gt; &lt;span class="org-haskell-operator"&gt;.&lt;/span&gt; &lt;span class="org-rainbow-delimiters-depth-2"&gt;(&lt;/span&gt;_Just &lt;span class="org-haskell-operator"&gt;.&lt;/span&gt; _String &lt;span class="org-haskell-operator"&gt;%~&lt;/span&gt; &lt;span class="org-rainbow-delimiters-depth-3"&gt;(&lt;/span&gt;&lt;span class="org-haskell-operator"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="org-string"&gt;":latest"&lt;/span&gt;&lt;span class="org-rainbow-delimiters-depth-3"&gt;)&lt;/span&gt;&lt;span class="org-rainbow-delimiters-depth-2"&gt;)&lt;/span&gt; &lt;span class="org-haskell-operator"&gt;=&amp;lt;&amp;lt;&lt;/span&gt; view &lt;span class="org-rainbow-delimiters-depth-2"&gt;(&lt;/span&gt;at &lt;span class="org-string"&gt;"x-image"&lt;/span&gt;&lt;span class="org-rainbow-delimiters-depth-2"&gt;)&lt;/span&gt;&lt;span class="org-rainbow-delimiters-depth-1"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
I haven't made up my mind on whether I like this better than the first. It's
disappointingly similar to the first one.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="outline-2" id="outline-container-orge880fe2"&gt;
&lt;h2 id="orge880fe2"&gt;Third approach&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge880fe2"&gt;
&lt;p&gt;
Then I it might be nice to split the fetching of &lt;code&gt;x-image&lt;/code&gt; values from the
addition of &lt;code&gt;image&lt;/code&gt; key/value pairs. By extracting with an index it's possible
to keep track of what sub-object each &lt;code&gt;x-image&lt;/code&gt; value comes from. Then two steps
can be combined using &lt;code&gt;foldl&lt;/code&gt;.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-haskell"&gt;&lt;span class="org-haskell-definition"&gt;setImage''&lt;/span&gt; &lt;span class="org-haskell-operator"&gt;::&lt;/span&gt; &lt;span class="org-haskell-type"&gt;Value&lt;/span&gt; &lt;span class="org-haskell-operator"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="org-haskell-type"&gt;Value&lt;/span&gt;
&lt;span class="org-haskell-definition"&gt;setImage''&lt;/span&gt; y &lt;span class="org-haskell-operator"&gt;=&lt;/span&gt; foldl setOne y vals
  &lt;span class="org-haskell-keyword"&gt;where&lt;/span&gt;
    vals &lt;span class="org-haskell-operator"&gt;=&lt;/span&gt; y &lt;span class="org-haskell-operator"&gt;^@..&lt;/span&gt; members &lt;span class="org-haskell-operator"&gt;&amp;lt;.&lt;/span&gt; key &lt;span class="org-string"&gt;"x-image"&lt;/span&gt; &lt;span class="org-haskell-operator"&gt;.&lt;/span&gt; _String
    setOne y' &lt;span class="org-rainbow-delimiters-depth-1"&gt;(&lt;/span&gt;objKey, value&lt;span class="org-rainbow-delimiters-depth-1"&gt;)&lt;/span&gt; &lt;span class="org-haskell-operator"&gt;=&lt;/span&gt;
        y'
            &lt;span class="org-haskell-operator"&gt;&amp;amp;&lt;/span&gt; key objKey &lt;span class="org-haskell-operator"&gt;.&lt;/span&gt; _Object &lt;span class="org-haskell-operator"&gt;.&lt;/span&gt; at &lt;span class="org-string"&gt;"image"&lt;/span&gt;
            &lt;span class="org-haskell-operator"&gt;?~&lt;/span&gt; &lt;span class="org-haskell-constructor"&gt;String&lt;/span&gt; &lt;span class="org-rainbow-delimiters-depth-1"&gt;(&lt;/span&gt;value &lt;span class="org-haskell-operator"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="org-string"&gt;":latest"&lt;/span&gt;&lt;span class="org-rainbow-delimiters-depth-1"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
I'm not convinced though. I guess I'm still holding out for a brilliant
combinator that fits my problem perfectly.
&lt;/p&gt;

&lt;p&gt;
Please point me to "the perfect solution" if you have one, or if you just have
some general tips on optics that would make my code clearer, or shorter, or more
elegant, or maybe just more lens-y.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="taglist"&gt;&lt;a href="https://magnus.therning.org/tags.html"&gt;Tags&lt;/a&gt;: &lt;a href="https://magnus.therning.org/tag-haskell.html"&gt;haskell&lt;/a&gt; &lt;a href="https://magnus.therning.org/tag-lens.html"&gt;lens&lt;/a&gt; &lt;a href="https://magnus.therning.org/tag-optics.html"&gt;optics&lt;/a&gt; &lt;/div&gt;</content>
		<author>
			<name>Magnus</name>
			<uri>https://magnus.therning.org/</uri>
		</author>
		<source>
			<title type="html">Magnus web site</title>
			<subtitle type="html">Magnus web site</subtitle>
			<link rel="self" href="https://magnus.therning.org/feed.xml"/>
			<id>https://magnus.therning.org/</id>
		</source>
	</entry>

	<entry>
		<title type="html">Meta Redux: Meta Reduce 2021.2: Autumn Begins</title>
		<link href="http://metaredux.com/posts/2021/09/28/meta-reduce-2021-2-autumn-begins.html"/>
		<id>http://metaredux.com/posts/2021/09/28/meta-reduce-2021-2-autumn-begins</id>
		<updated>2021-09-28T08:58:00+00:00</updated>
		<content type="html">&lt;p&gt;It’s been a while since my last general update. The summer is now behind us, and
autumn is in full swing. I don’t know about you, but for me historically autumn
has been a pretty productive season. I am, however, still on my sabbatical (long
vacation) and I spend most of my time traveling and relaxing. That being said,
there’s has been plenty of progress with my projects.&lt;/p&gt;

&lt;h2 id="rubocop"&gt;RuboCop&lt;/h2&gt;

&lt;p&gt;There has been a new RuboCop release every couple of weeks (give or take) for
the entire summer. While there’s nothing significant worth highlighting here, I
think we’ve made great progress across the board. I’m especially happy that &lt;a href="https://github.com/rubocop/rubocop/pull/10094"&gt;cop
safety is now documented a lot better&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id="emacs"&gt;Emacs&lt;/h2&gt;

&lt;p&gt;I’ve submitted most of my Emacs projects to &lt;a href="https://elpa.nongnu.org/nongnu/"&gt;NonGNU ELPA&lt;/a&gt;. CIDER is the only important
project missing at this point. I’ll submit it there after its next stable release.&lt;/p&gt;

&lt;p&gt;I’ve also started to pay more attention to the &lt;code class="language-plaintext highlighter-rouge"&gt;emacs-devel&lt;/code&gt; mailing list, after mostly ignoring it for years.
It’s challenging, but insightful to be involved there.&lt;/p&gt;

&lt;p&gt;Outside of this and CIDER, I had very little time for my Emacs projects. I’d definitely like to spent
some time on Projectile before the end of the year.&lt;/p&gt;

&lt;h2 id="cider--friends"&gt;CIDER &amp;amp; Friends&lt;/h2&gt;

&lt;p&gt;I already wrote about &lt;a href="http://metaredux.com/posts/2021/08/17/introducing-incomplete-a-simple-clojure-code-completion-library.html"&gt;incomplete&lt;/a&gt; a while ago. I’m happy to report that it replaced &lt;code class="language-plaintext highlighter-rouge"&gt;clojure-complete&lt;/code&gt; in both REPLy and Leiningen, so my work here is done. It was
fun to work on a small library. I had forgotten how that felt.&lt;/p&gt;

&lt;p&gt;For CIDER the big news is undoubtedly that &lt;a href="https://github.com/clojure-emacs/cider/issues/3037"&gt;now it supports library and middleware
sideloading&lt;/a&gt;, which means that any connection can be “upgraded” on the fly by CIDER to
provide the full range of CIDER functionality.
That’s big! Huge thanks to Arne for working on that functionality!&lt;/p&gt;

&lt;p&gt;&lt;code class="language-plaintext highlighter-rouge"&gt;clj-refactor&lt;/code&gt; and &lt;code class="language-plaintext highlighter-rouge"&gt;refactor-nrepl&lt;/code&gt; have been getting a lot of love by &lt;code class="language-plaintext highlighter-rouge"&gt;vemv&lt;/code&gt;,
and I guess we’ll be ready for great release in a couple of weeks. I think it’s
safe to say that the projects hadn’t seen so much activity in a very long time. At this pace
the issue trackers for both projects will be empty by Christmas!&lt;/p&gt;

&lt;p&gt;&lt;code class="language-plaintext highlighter-rouge"&gt;cider-nrepl&lt;/code&gt; and &lt;code class="language-plaintext highlighter-rouge"&gt;orchard&lt;/code&gt; have also been getting some attention
(e.g. performance improvements, making APIs more consistent) and will likely
have new releases soon.&lt;/p&gt;

&lt;p&gt;Things have been quiet on the nREPL front, apart from work related to implementing sideloading support in CIDER. Right now it seems nREPL 0.9
might land in the second part of October.&lt;/p&gt;

&lt;p&gt;Last, but not least, &lt;a href="https://www.clojuriststogether.org/news/long-term-funding-selections/"&gt;I (CIDER) was selected to receive one year of funding from “Clojurists Together”&lt;/a&gt;! That
was totally unexpected, and it means a lot to me! Thanks to all the members of
“Clojurists Together” for their support! Cheers!&lt;/p&gt;

&lt;h2 id="misc"&gt;Misc&lt;/h2&gt;

&lt;p&gt;Here are some random personal updates:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I traveled to Corfu, Athens, Tuscany, Bologna, Milano and Lago di Como during September. I haven’t had so many trips in so little time in ages!&lt;/li&gt;
  &lt;li&gt;I’ve switched from Chrome to Firefox for my personal browsing. Firefox is awesome! I still plan to use Chrome for work.&lt;/li&gt;
  &lt;li&gt;I’ve switched from LastPass to 1Password and Bitwarden. That’s not a mistake - I like them both, so I use them both, at least for the time being. 1Password has better UI/UX, but I like the simplicity of Bitwarden and the fact I don’t need a desktop app with it.&lt;/li&gt;
  &lt;li&gt;I’ve been pondering whether to upgrade my trusted old iPhone XS. I love it, but its battery life leaves something to be desired.&lt;/li&gt;
  &lt;li&gt;I’ve been a super happy Fastmail user for several month now.&lt;/li&gt;
  &lt;li&gt;I’ve read a ton of books. I can highly recommend “The Cult of We”.&lt;/li&gt;
  &lt;li&gt;I’ve started watching the new season of “Sex Education”. It’s awesome!&lt;/li&gt;
  &lt;li&gt;I’ve started to re-watch Daniel Craig’s James Bond movies. 2 down, 2 to go.&lt;/li&gt;
  &lt;li&gt;I achieved over 100 1vs1 wins with Protoss in the current StarCraft II season. I still suck, but I guess I suck a bit less.&lt;/li&gt;
  &lt;li&gt;I’ve been playing a bit with &lt;a href="https://world.hey.com/bozhidar"&gt;HEY World&lt;/a&gt;. I like it, I just have to figure out what to use it for. &lt;code class="language-plaintext highlighter-rouge"&gt;TooManyBlogsException&lt;/code&gt;!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="epilogue"&gt;Epilogue&lt;/h2&gt;

&lt;p&gt;That’s all from me for now. I’ll be mostly on the road until mid-October, so expect some slowdown around my OSS projects, but I hope that once my long vacation is behind me, I’ll be more productive than ever. Keep hacking!&lt;/p&gt;</content>
		<author>
			<name>Bozhidar Batsov</name>
			<uri>http://metaredux.com/</uri>
		</author>
		<source>
			<title type="html">Meta Redux</title>
			<subtitle type="html">Meta-x meta-redux</subtitle>
			<link rel="self" href="http://metaredux.com/feed.xml"/>
			<id>http://metaredux.com/feed.xml</id>
		</source>
	</entry>

	<entry>
		<title type="html">Emacs TIL: Insert Templated Code Blocks with Yasnippet</title>
		<link href="https://emacstil.com/til/2021/09/28/yasnippet/"/>
		<id>https://emacstil.com/til/2021/09/28/yasnippet</id>
		<updated>2021-09-28T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;When editing org file with code blocks, sometimes we want to print out the stdout, pipe the output to a file. As a result, we may type &lt;code class="language-plaintext highlighter-rouge"&gt;:results&lt;/code&gt; option near the code block a lot.&lt;/p&gt;

&lt;p&gt;This post is about using the power of &lt;a href="https://joaotavora.github.io/yasnippet/snippet-development.html"&gt;Yasnippet&lt;/a&gt; to streamline the workflow.&lt;/p&gt;

&lt;p&gt;Below is my snippet for inserting a scripting code block and set the &lt;code class="language-plaintext highlighter-rouge"&gt;result&lt;/code&gt; to output:&lt;/p&gt;

&lt;div class="language-plaintext highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;# key: &amp;lt;so
# name: src-script
# --
#+begin_${1:$$(yas-choose-value '("src"))} ${2:$$(yas-choose-value '("bash" "ruby" "elisp"))} :results output
  $0
#+end_$1

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now if I type &lt;code class="language-plaintext highlighter-rouge"&gt;&amp;lt;so&lt;/code&gt; and press &lt;code class="language-plaintext highlighter-rouge"&gt;TAB&lt;/code&gt;, it expands the block, prompts me to select language, or to enter the name of output file.&lt;/p&gt;

&lt;p&gt;Example of going through the &lt;code class="language-plaintext highlighter-rouge"&gt;&amp;lt;so&lt;/code&gt; flow and selecting bash:&lt;/p&gt;

&lt;div class="language-plaintext highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;#+begin_src bash :results output
echo "test"
#+end_src
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; There was a small quirks with &lt;code class="language-plaintext highlighter-rouge"&gt;#begin_src&lt;/code&gt; block when inserting as a plaintext, so I create the extra field to disable eval error. It results in an extra enter keystroke and a TAB, but it is good enough for my use.&lt;/p&gt;</content>
		<author>
			<name>Junji Zhi</name>
			<uri>https://emacstil.com/</uri>
		</author>
		<source>
			<title type="html">Emacs TIL</title>
			<subtitle type="html">Today I learned in Emacs</subtitle>
			<link rel="self" href="https://emacstil.com/feed.xml"/>
			<id>https://emacstil.com/feed.xml</id>
		</source>
	</entry>

	<entry>
		<title type="html" xml:lang="en-US">Irreal: Spanish Punctuation in Org-mode</title>
		<link href="https://irreal.org/blog/?p=10005"/>
		<id>https://irreal.org/blog/?p=10005</id>
		<updated>2021-09-27T16:37:55+00:00</updated>
		<content type="html" xml:lang="en-US">&lt;p&gt;The other day, I saw this tweet from John Cook’s TeX Tips Twitter account:&lt;/p&gt;
&lt;blockquote class="twitter-tweet"&gt;
&lt;p dir="ltr" lang="en"&gt;Spanish punctuation: Can use !` and ?` for inverted exclamation points and question marks.&lt;/p&gt;
&lt;p&gt;— TeX and Typography (@TeXtip) &lt;a href="https://twitter.com/TeXtip/status/1441413405991129093?ref_src=twsrc%5Etfw"&gt;September 24, 2021&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;I was vaguely aware of this but had never thought much about it. Still, I &lt;i&gt;do&lt;/i&gt; occasionally have a need for ¿ and ¡ so I wondered if it would work in Org-mode.&lt;/p&gt;
&lt;p&gt;It turns out that it does if you use the &lt;a href="http://irreal.org/blog/?p=4254"&gt;TeX input method&lt;/a&gt;. I usually have that turned on for my blog posts so that the mapping &lt;code&gt;---&lt;/code&gt; \(\mapsto\) — works correctly. It turns out that it works in any text buffer, not just Org buffers. Now if I want an exclamation in Spanish, I can use &lt;code&gt;!`&lt;/code&gt; to start it. ¡Perfecto!&lt;/p&gt;</content>
		<author>
			<name>jcs</name>
			<uri>https://irreal.org/blog</uri>
		</author>
		<source>
			<title type="html">Emacs – Irreal</title>
			<subtitle type="html">The minds had long ago come up with a proper name for it; they called it the Irreal, but they thought of it as Infinite Fun. That was what they really knew it as. The Land of Infinite Fun. --Iain M. Banks, Excession</subtitle>
			<link rel="self" href="http://irreal.org/blog/?tag=emacs&amp;feed=rss2"/>
			<id>https://irreal.org/blog</id>
		</source>
	</entry>

	<entry>
		<title type="html" xml:lang="en-US">Sacha Chua: 2021-09-27 Emacs news</title>
		<link href="https://sachachua.com/blog/2021/09/2021-09-27-emacs-news/"/>
		<id>https://sachachua.com/blog/2021/09/2021-09-27-emacs-news/</id>
		<updated>2021-09-27T00:00:00+00:00</updated>
		<content type="html">&lt;ul class="org-ul"&gt;
&lt;li&gt;Ending soon: &lt;a href="https://emacsconf.org/2021/cfp/"&gt;EmacsConf 2021 Call for Proposals&lt;/a&gt; (&lt;a href="https://reddit.com/r/emacs/comments/oyl40m/emacsconf_2021_call_for_proposals/"&gt;Reddit&lt;/a&gt;, &lt;a href="https://news.ycombinator.com/item?id=28075442"&gt;HN&lt;/a&gt;) until Sept 30&lt;/li&gt;
&lt;li&gt;Upcoming events:
&lt;ul class="org-ul"&gt;
&lt;li&gt;EmacsConf Office Hour &lt;a href="https://emacsconf.org/2021/office-hours/"&gt;https://emacsconf.org/2021/office-hours/&lt;/a&gt; Tue Sep 28 1800 Vancouver / 2000 Chicago / 2100 Toronto – Wed Sep 29 0100 GMT / 0300 Berlin / 0630 Kolkata / 0900 Singapore&lt;/li&gt;
&lt;li&gt;Emacs Berlin (virtual, in English) &lt;a href="https://emacs-berlin.org/"&gt;https://emacs-berlin.org/&lt;/a&gt; Wed Sep 29 0930 Vancouver / 1130 Chicago / 1230 Toronto / 1630 GMT / 1830 Berlin / 2200 Kolkata – Thu Sep 30 0030 Singapore&lt;/li&gt;
&lt;li&gt;M-x Research (contact them for password): TBA &lt;a href="https://m-x-research.github.io/"&gt;https://m-x-research.github.io/&lt;/a&gt; Fri Oct 1 0700 Vancouver / 0900 Chicago / 1000 Toronto / 1400 GMT / 1600 Berlin / 1930 Kolkata / 2200 Singapore&lt;/li&gt;
&lt;li&gt;EmacsNYC: Discussion: Remote Collaboration Software and crdt.el &lt;a href="https://www.meetup.com/New-York-Emacs-Meetup/events/280981454/"&gt;https://www.meetup.com/New-York-Emacs-Meetup/events/280981454/&lt;/a&gt; Mon Oct 4 1600 Vancouver / 1800 Chicago / 1900 Toronto / 2300 GMT – Tue Oct 5 0100 Berlin / 0430 Kolkata / 0700 Singapore (&lt;a href="http://emacsnyc.org/2021/09/23/online-meetup-discussionremote-collaboration-software-and-crtd-el.html"&gt;Emacs NYC&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;EmacsATX: TBD &lt;a href="https://www.meetup.com/EmacsATX/events/hkckgsyccnbjb/"&gt;https://www.meetup.com/EmacsATX/events/hkckgsyccnbjb/&lt;/a&gt; Wed Oct 6 1630 Vancouver / 1830 Chicago / 1930 Toronto / 2330 GMT – Thu Oct 7 0130 Berlin / 0500 Kolkata / 0730 Singapore&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Emacs configuration:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://tech.toryanderson.com/2021/09/20/swapping-chords-in-dvorak-or-why-does-emacs-keyboard-translate-fail-with-wrong-type-argument-characterp-134217845/"&gt;Tory Anderson: Swapping chords in Dvorak, or Why does emacs keyboard-translate fail with (wrong-type-argument characterp 134217845)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tech.toryanderson.com/2021/09/23/fail-fast-transients-like-hydra/"&gt;Tory Anderson: Fail-fast Transients like Hydra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=ZolOUgXHgbo"&gt;System Crafters Live! - Investigating use-package Alternatives&lt;/a&gt; (02:08:23)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/emacs/comments/pthma9/just_out_of_curiosity_how_many/"&gt;Just out of curiosity, how many bytes/kilobytes/megabytes does your dot file weight?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/alphapapa/ap.el"&gt;ap.el: A simple, Emacs Lisp-focused Emacs config&lt;/a&gt; (&lt;a href="https://www.reddit.com/r/emacs/comments/pt4psr/apel_a_simple_emacs_lispfocused_emacs_config/"&gt;Reddit&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/alphapapa/with-emacs.sh"&gt;with-emacs.sh: Script to easily run Emacs with specified configurations&lt;/a&gt; (&lt;a href="https://www.reddit.com/r/emacs/comments/pv46oi/withemacssh_script_to_easily_run_emacs_with/"&gt;Reddit&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=knRI1O_XSeY"&gt;My Current Emacs Configuration&lt;/a&gt; (34:33) - web dev, software dev - Timothy Unkert&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Crandel/home/tree/master/.config/emacs"&gt;Crandel's .emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Emacs Lisp:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://countvajhula.com/2021/09/25/symex-el-edit-lisp-code-in-a-vim-like-way/"&gt;Sid Kasivajhula: Symex.el: Edit Lisp Code in a Vim-like Way&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://countvajhula.com/2021/09/25/the-animated-guide-to-symex/"&gt;Sid Kasivajhula: The Animated Guide to Symex&lt;/a&gt; (&lt;a href="https://www.reddit.com/r/emacs/comments/pv231f/the_animated_guide_to_symex/"&gt;Reddit&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=kk2W9krvNVg"&gt;scimax - formatting strings in elisp&lt;/a&gt; (22:35, &lt;a href="https://irreal.org/blog/?p=9993"&gt;Irreal&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=t-IsXzEz7hs"&gt;scimax - functions in emacs-lisp&lt;/a&gt; (26:02, &lt;a href="https://irreal.org/blog/?p=10000"&gt;Irreal&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/yiS1eXdgcYI"&gt;Little Experiment - Source Code View in Built-in Help, a lá Helpful&lt;/a&gt; (&lt;a href="https://www.reddit.com/r/emacs/comments/pt3icl/little_experiment_source_code_view_in_builtin/"&gt;Reddit&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lists.gnu.org/archive/html/emacs-devel/2021-09/msg01492.html"&gt;Mattias Engdegård makes an interesting discovery about the Emacs Lisp bytecode interpreter, and ERT tests&lt;/a&gt; (&lt;a href="https://www.reddit.com/r/emacs/comments/ps5o04/mattias_engdeg%C3%A5rd_makes_an_interesting_discovery/"&gt;Reddit&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Appearance:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/emacs/comments/pweeeb/ann_idlehighlightmode_fast_symbolatpoint/"&gt;[ANN] idle-highlight-mode (fast symbol-at-point highlighting) updated&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tech.toryanderson.com/2021/09/24/replacing-beacon.el-with-hl-line-flash/"&gt;Tory Anderson: Replacing beacon.el with hl-line-flash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://readingworldmagazine.com/emacs/2021-09-22-how-to-configure-emacs-themes/"&gt;yuri tricys: How to Configure Emacs Themes in var_year&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mohkale/an-old-hope-emacs"&gt;an-old-hope-emacs: a syntax theme from a galaxy far far away…&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=n920BQM_ic4"&gt;Emacs Beautification Using Mode-Line Dashboard And Themes&lt;/a&gt; (12:14)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Navigation:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://www.wisdomandwonder.com/programming/13521/automatically-open-read-only-files-in-view-mode?utm_source=rss&amp;amp;utm_medium=rss&amp;amp;utm_campaign=automatically-open-read-only-files-in-view-mode"&gt;Grant Rettke: Automatically open read-only files in View mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/emacs/comments/pt8kod/gumshoe_20_my_first_package_in_melpa/"&gt;Gumshoe 2.0, my first package in Melpa&lt;/a&gt; - fancy point logger to help you remember where you've been&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=JkRQ_WWJqyg"&gt;Swiper Search &amp;amp; Centaur-Tabs in Emacs&lt;/a&gt; (03:56)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=-KrMaLq8Bms&amp;amp;feature=youtu.be"&gt;Emacs filetree package demo&lt;/a&gt; (&lt;a href="https://www.reddit.com/r/emacs/comments/psbsve/demo_video_for_filetree_package/"&gt;Reddit&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tech.toryanderson.com/2021/09/20/the-lost-art-of-page-breaks-in-text-documents/"&gt;Tory Anderson: The lost art of page breaks in text documents&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Dired:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://ag91.github.io/blog/2021/09/23/moldable-emacs-extending-the-playground-powers-via-hooks-to-include-dired/"&gt;Moldable Emacs: extending the Playground powers via hooks (to include Dired)&lt;/a&gt; (&lt;a href="https://www.reddit.com/r/emacs/comments/pu3v7r/moldable_emacs_extending_the_playground_powers/"&gt;Reddit&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Org Mode:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=NZZVRCo1dLc"&gt;Emacs Org-Mode Intro&lt;/a&gt; (13:14)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=ffBDQauDAgQ"&gt;O que é, e como utilizar: Org em Emacs&lt;/a&gt; (22:48)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/alphapapa/org-ql#06"&gt;[ANN] org-ql 0.6 released&lt;/a&gt; (&lt;a href="https://www.reddit.com/r/emacs/comments/pt1iol/ann_orgql_06_released/"&gt;Reddit&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://helpdeskheadesk.net/help-desk-head-desk/2021-09-19/"&gt;TAONAW: Refreshing my Capture Templates&lt;/a&gt; (&lt;a href="https://www.reddit.com/r/orgmode/comments/pt665p/capture_templates_updated_mine_whats_yours/"&gt;Reddit&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Images:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://i.redd.it/b81lkn1sd4p71.gif"&gt;Now you can real-ly view your org files&lt;/a&gt; (&lt;a href="https://www.reddit.com/r/orgmode/comments/ptgfhs/now_you_can_really_view_your_org_files/"&gt;Reddit&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://junjizhi.com/all/experience/2021/09/19/emacs-systems-thinking/"&gt;Use Emacs for Systems Thinking&lt;/a&gt; (&lt;a href="https://irreal.org/blog/?p=9996"&gt;Irreal&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/misohena/el-easydraw"&gt;Emacs Drawing Tool&lt;/a&gt; (&lt;a href="https://www.reddit.com/r/emacs/comments/pvtbq5/emacs_drawing_tool/"&gt;Reddit&lt;/a&gt;) - for drawing diagrams in Org, includes color picker&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Org Roam:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://www.badykov.com/emacs/2021/09/27/split/"&gt;I split my brain&lt;/a&gt; (&lt;a href="https://www.reddit.com/r/emacs/comments/pvrv0u/i_split_my_brain/"&gt;Reddit&lt;/a&gt;) - org-roam contexts&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=CUkuyW6hr18"&gt;5 Org Roam Hacks for Better Productivity in Emacs&lt;/a&gt; (29:44)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Import, export, and integration:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=oacHbFO71v8"&gt;😎😎 Emacs exportar .org a .pdf (video random)😜😜&lt;/a&gt; (14:05)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://oylenshpeegul.gitlab.io/blog/posts/20210921/"&gt;Tim Heaney: blogpost&lt;/a&gt; - Rust script to create an ox-hugo blog post&lt;/li&gt;
&lt;li&gt;&lt;a href="https://emacs.love/weblorg/posts/v0-1-2-slowly-but-surely.html"&gt;weblorg - v0.1.2 - Slowly but Surely-weblorg, the modern Static HTML Generator for Emacs and Org-Mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.hoowl.se/khalel.html"&gt;Managing calendar events in Emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Coding:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/astoff/comint-mime"&gt;comint-mime: Display graphics and other MIME attachments in Emacs shells&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/emacs/comments/pu3mtc/announcing_experimental_support_for_janet/"&gt;Announcing experimental support for Janet programming language in PEL&lt;/a&gt; (Pragmatic Emacs Library, configuration)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Shopify/theme-check/wiki/Emacs"&gt;theme-check on Emacs. Theme Check is a command line tool that helps you follow Shopify Themes &amp;amp; Liquid best practices by analyzing the Liquid &amp;amp; JSON inside your theme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://oylenshpeegul.gitlab.io/blog/posts/20210920/"&gt;Tim Heaney: Zig&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=GC0swmxh8AM"&gt;EmacsでのISLispモードが公開されています。&lt;/a&gt; (06:21)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Mail and news:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/emacs/comments/pvpb6d/mu4e_very_fast_thread_folding/"&gt;Mu4e (very) fast thread folding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/john2x/dank-mode"&gt;dank-mode: Emacs major mode for browsing Reddit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://emacsnyc.org/2021/09/20/managing-email-in-emacs-with-mu4e.html"&gt;Emacs NYC: Managing Email in Emacs with mu4e&lt;/a&gt; (1:13:41)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Chat:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://zevlg.github.io/telega.el/"&gt;Telega Manual (v0.7.018). telega is full featured unofficial client for Telegram platform for GNU Emacs.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tsdh.org/posts/2021-09-22-rcirc-hack-of-the-day-print-timestamps-less-often.html"&gt;Tassilo Horn: Rcirc hack of the day: print timestamps less often&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Community:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/emacs/comments/pt2xws/weekly_tips_tricks_c_thread/"&gt;Weekly Tips, Tricks, &amp;amp;c. Thread&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/emacs/comments/puqodm/xemacs_vs_gnu_emacs/"&gt;XEmacs vs. GNU Emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://i.redd.it/qpbqimfqx4p71.jpg"&gt;Life of an Emacser&lt;/a&gt; (&lt;a href="https://www.reddit.com/r/emacs/comments/pti06k/life_of_an_emacser/"&gt;Reddit&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://protesilaos.com/codelog/2021-09-22-live-stream-emacs-unix/"&gt;Protesilaos Stavrou: Live stream: Emacs and the Unix philosophy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://alexschroeder.ch/wiki/2021-09-22_The_first_programming_language_is_English"&gt;Alex Schroeder: The first programming language is English&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lars.ingebrigtsen.no/2021/09/21/11x10/"&gt;Lars Ingebrigtsen: 11x10%&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Other:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=ub3T-y6_u-4"&gt;Como utilizar o Emacs (com evil mode)&lt;/a&gt; (27:59)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=b3Ja6N0edwo"&gt;Emacs Macros&lt;/a&gt; (07:43) - keyboard macros&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=PE714pm1kvE"&gt;System Crafters Live! - The Many Varieties of Emacs&lt;/a&gt; (48:26)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=JMP8JjmS3ds"&gt;System Crafters Live! - The Many Varieties of Emacs (Part 2)&lt;/a&gt; (1:07:41)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://i.redd.it/bg5uuk1d71p71.png"&gt;I love that you can do this (A few of them got a little destroyed)&lt;/a&gt; (&lt;a href="https://www.reddit.com/r/emacs/comments/pt4lh1/i_love_that_you_can_do_this_a_few_of_them_got_a/"&gt;Reddit&lt;/a&gt;) - running various text editors inside Emacs&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ruediger/qrencode-el"&gt;qrencode-el: QRCode encoder for Emacs in pure elisp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://connorberry.com/2021/08/20/emacs-typing-tutor/"&gt;Emacs Typing Tutor | Actually&lt;/a&gt; (&lt;a href="https://news.ycombinator.com/item?id=28597994"&gt;HN&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Emacs development:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://git.savannah.gnu.org/cgit/emacs.git/commit/etc/NEWS?id=0f4b55dc8d551f266ae8cc36d94bcd216a80754b"&gt;'glyphless-char-display-control' now applies to Variation Selectors.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://git.savannah.gnu.org/cgit/emacs.git/commit/etc/NEWS?id=a2a62f71051f1295492780f320e9b7bc02b6e6f4"&gt;Enhance font_range to check for emoji composition triggers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://git.savannah.gnu.org/cgit/emacs.git/commit/etc/NEWS?id=58055b5fc330689234cafb51398844f6e5791077"&gt;Document shorthands in the Elisp manual section on Symbols&lt;/a&gt; (&lt;a href="https://www.reddit.com/r/emacs/comments/pwcw7t/jo%C3%A3o_t%C3%A1vora_document_shorthands_in_the_elisp/"&gt;Reddit&lt;/a&gt;, &lt;a href="https://lists.gnu.org/archive/html/emacs-devel/2021-09/msg01949.html"&gt;emacs-devel&lt;/a&gt;) - namespacing&lt;/li&gt;
&lt;li&gt;&lt;a href="http://git.savannah.gnu.org/cgit/emacs.git/commit/etc/NEWS?id=7cb29440433bda1ad8defad70cbd43fb2f9f4d1f"&gt;Add new macro with-environment-variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://git.savannah.gnu.org/cgit/emacs.git/commit/etc/NEWS?id=fcca1db9fd1eb2930f29972e7def0936c3269f1b"&gt;* lisp/tab-line.el: Add modified-buffer face&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://git.savannah.gnu.org/cgit/emacs.git/commit/etc/NEWS?id=ed02b88bbae18caad650d76876940ffb58cab554"&gt;Renege on anonymous &amp;amp;rest (bug#50268, bug#50720)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://git.savannah.gnu.org/cgit/emacs.git/commit/etc/NEWS?id=9bc2ac4a95ed2c1d6d7b56c3a1fd72e5ee1dc5f5"&gt;Add new user option ispell-help-timeout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://git.savannah.gnu.org/cgit/emacs.git/commit/etc/NEWS?id=f1071bf08e246d0820edfb66163acb65e90d9482"&gt;New :type natnum for defcustom&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://git.savannah.gnu.org/cgit/emacs.git/commit/etc/NEWS?id=091791933704cd706f90c1685ac4b35f51c98199"&gt;Add support for man page hyperlinks in doc strings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://git.savannah.gnu.org/cgit/emacs.git/commit/etc/NEWS?id=38037e04cb05cb1f2b604f0b1602d36b0bcf6985"&gt;Indent bodies of local function definitions properly in elisp-mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://git.savannah.gnu.org/cgit/emacs.git/commit/etc/NEWS?id=2abf143f8185fced544c4f8d144ea710142d7a59"&gt;New thing-at-point target 'string' used in context-menu-region&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://git.savannah.gnu.org/cgit/emacs.git/commit/etc/NEWS?id=d4a6e42e92ee215659d09b0456032714aab73ca5"&gt;Add support for "bright" ANSI colors in term-mode&lt;/a&gt; and &lt;a href="http://git.savannah.gnu.org/cgit/emacs.git/commit/etc/NEWS?id=ceb9da3b7125fbdf0da04a3b158ac1e792c87f4f"&gt;ansi-color&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://git.savannah.gnu.org/cgit/emacs.git/commit/etc/NEWS?id=aef84c5f17c33714bda402e9408a3cb2ae928b61"&gt;Add aggregate project discovery and maintenance functions&lt;/a&gt;: project-remember-projects-under, project-forget-project, project-forget-projects-under, project-forget-zombie-projects&lt;/li&gt;
&lt;li&gt;&lt;a href="http://git.savannah.gnu.org/cgit/emacs.git/commit/etc/NEWS?id=efdb89f15b4d0dae334952bfe11073534e244d75"&gt;Move 'kdb-macro-redisplay' key binding&lt;/a&gt; (old: C-x C-k Q, new: C-x C-k d)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://git.savannah.gnu.org/cgit/emacs.git/commit/etc/NEWS?id=2386b085268af9c06aebc5c4aced1aa6a0d3f702"&gt;Fix build with native compilation but without zlib&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://git.savannah.gnu.org/cgit/emacs.git/commit/etc/NEWS?id=7b62ea95c9616b6897b8a727a219925c62c38557"&gt;New major mode with font-locking for etc/AUTHORS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://git.savannah.gnu.org/cgit/emacs.git/commit/etc/NEWS?id=be4f8584983e63905aa409efad11fb7d8d418ccb"&gt;Add new function `ensure-list'&lt;/a&gt;: makes a list of its object if it's not a list already&lt;/li&gt;
&lt;li&gt;&lt;a href="http://git.savannah.gnu.org/cgit/emacs.git/commit/etc/NEWS?id=1c73c0b33a9b10cdae1316ad9e0ba861af454b66"&gt;Add new command 'checkdoc-dired'&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://git.savannah.gnu.org/cgit/emacs.git/commit/etc/NEWS?id=14495e33afa0b8038c494f1e6e90065683ccbd07"&gt;Consistently test alist keys with equal in map.el&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://git.savannah.gnu.org/cgit/emacs.git/commit/etc/NEWS?id=5b962a7ad8d0acfe40a41ce139059b9c8e46f666"&gt;Avoid double argument evaluation in vc-call macro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://git.savannah.gnu.org/cgit/emacs.git/commit/etc/NEWS?id=7e395a59b025c7f4be49294ad806addf5b1a25c9"&gt;Make dired-compress-file query for a directory to uncompress to&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://git.savannah.gnu.org/cgit/emacs.git/commit/etc/NEWS?id=9767c6b01dccb7e29e240a22d978835d240e8ab0"&gt;New command 'project-find-dir' runs Dired in a directory inside project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://git.savannah.gnu.org/cgit/emacs.git/commit/etc/NEWS?id=de289d58a4efff4a8625f100eabdc56da98e2e07"&gt;Support for Unicode emoji sequences&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;New packages:
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://melpa.org/#/lacquer" target="_blank"&gt;lacquer&lt;/a&gt;: Switch theme/font by selecting from a cache&lt;/li&gt;
&lt;li&gt;&lt;a href="http://melpa.org/#/org-movies" target="_blank"&gt;org-movies&lt;/a&gt;: Manage watchlist with Org mode&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Links from &lt;a href="https://www.reddit.com/r/emacs"&gt;reddit.com/r/emacs&lt;/a&gt;, &lt;a href="https://www.reddit.com/r/orgmode"&gt;r/orgmode&lt;/a&gt;, &lt;a href="https://www.reddit.com/r/spacemacs"&gt;r/spacemacs&lt;/a&gt;, &lt;a href="https://www.reddit.com/r/planetemacs"&gt;r/planetemacs&lt;/a&gt;, &lt;a href="https://hn.algolia.com/?query=emacs&amp;amp;sort=byDate&amp;amp;prefix&amp;amp;page=0&amp;amp;dateRange=all&amp;amp;type=story"&gt;Hacker News&lt;/a&gt;, &lt;a href="https://planet.emacslife.com"&gt;planet.emacslife.com&lt;/a&gt;, &lt;a href="https://www.youtube.com/playlist?list=PL4th0AZixyREOtvxDpdxC9oMuX7Ar7Sdt"&gt;YouTube&lt;/a&gt;, &lt;a href="http://git.savannah.gnu.org/cgit/emacs.git/log/etc/NEWS"&gt;the Emacs NEWS file&lt;/a&gt;, &lt;a href="https://emacslife.com/calendar/"&gt;Emacs Calendar&lt;/a&gt; and &lt;a href="http://lists.gnu.org/archive/html/emacs-devel/2021-09"&gt;emacs-devel&lt;/a&gt;.
&lt;/p&gt;</content>
		<author>
			<name>Sacha Chua</name>
			<uri>https://sachachua.com/blog/category/emacs/feed/index.xml</uri>
		</author>
		<source>
			<title type="html">Sacha Chua - category - emacs</title>
			<subtitle type="html">Emacs, sketches, and life</subtitle>
			<link rel="self" href="https://sachachua.com/blog/category/emacs/feed/"/>
			<id>https://sachachua.com/blog/category/emacs/feed/index.xml</id>
		</source>
	</entry>

	<entry>
		<title type="html">Garjola Dindi: Listen to a random album and generate a log entry (all with Emacs, of course)</title>
		<link href="https://dindi.garjola.net/emms-random-album.html"/>
		<id>https://dindi.garjola.net/emms-random-album.html</id>
		<updated>2021-09-26T19:00:00+00:00</updated>
		<content type="html">&lt;p&gt;
When I was young, and vinyl records were not a cool thing but just the usual thing, I used to sit down and listen to music. Actually, I used to listen to &lt;i&gt;albums&lt;/i&gt;, which is a forgotten concept that has been replaced by &lt;i&gt;playlists&lt;/i&gt;. Anyway.
&lt;/p&gt;

&lt;p&gt;
The fact of just listening to music and not doing anything else has been a luxury for years, but two years ago, I decided that I would sit down and listen again to music with full attention. Unfortunately, I don't have my vinyl collection anymore. All my music has been digitized and lives in the hard disk drive of my laptop. This has the great advantage of being available everywhere I go.
&lt;/p&gt;

&lt;p&gt;
I of course use Emacs as my media player. And I use EMMS because it was the only solution available when I started and I like it. EMMS allows to browse the available music by album, artist, song, etc. So, when I want to listen to an album, I can just do &lt;code&gt;M-x emms-browse-by-album&lt;/code&gt; and choose one album. This is what the buffer with the albums looks like:
&lt;/p&gt;


&lt;figure id="orga63cb00"&gt;
&lt;img alt="screenshot-emms.png" src="https://dindi.garjola.net/static/media/screenshot-emms.png" /&gt;

&lt;/figure&gt;

&lt;p&gt;
So for a couple of years I have had a weekly ritual, on Sunday afternoons, where I choose an album, put my comfortable headphones and listen to a full album, track by track, in the order they were defined by the artists. Then, I log the album to an org-mode file, so that I can keep track of what I listen.
&lt;/p&gt;

&lt;p&gt;
The issue I have had is of course choosing what to listen to. One year in this new habit, I decided that I would choose the album randomly. So I started using &lt;code&gt;M-:&lt;/code&gt; to type &lt;code&gt;(random 1077)&lt;/code&gt;&lt;sup&gt;&lt;a class="footref" href="https://dindi.garjola.net/rss.xml#fn.1" id="fnr.1"&gt;1&lt;/a&gt;&lt;/sup&gt;, then &lt;code&gt;M-x goto-line&lt;/code&gt; with the result of the random choice.
&lt;/p&gt;

&lt;p&gt;
Of course, after several weeks, this became tedious and I had to automate it. I also decided that I did not want to write the log entry by hand. This is what I came up with:
&lt;/p&gt;


&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span class="org-keyword"&gt;defun&lt;/span&gt; &lt;span class="org-function-name"&gt;my/emms-play-random-album&lt;/span&gt; ()
  &lt;span class="org-doc"&gt;"Play a random album from the EMMS music database.&lt;/span&gt;
&lt;span class="org-doc"&gt;Generate an org entry with album artist and listened date for my records."&lt;/span&gt;
  (&lt;span class="org-keyword"&gt;interactive&lt;/span&gt;)
  (emms-browse-by-album)
  (&lt;span class="org-keyword"&gt;let&lt;/span&gt; ((nlines (count-lines (point-min) (point-max))))
    (goto-line (random nlines))
    (emms-browser-add-tracks-and-play))
  (&lt;span class="org-keyword"&gt;let*&lt;/span&gt; ((album (alist-get 'info-album  (emms-playlist-current-selected-track)))
        (artist (alist-get 'info-artist (emms-playlist-current-selected-track)))
        (org-entry
         (format &lt;span class="org-string"&gt;"* %s\n:PROPERTIES:\n:ARTIST: %s\n:LISTEN_DATE: %s\n:END:\n"&lt;/span&gt;
                 album artist (format-time-string &lt;span class="org-string"&gt;"[%Y-%m-%d %a]"&lt;/span&gt;))))
    (kill-new org-entry)
    (message org-entry)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
The function is easy to understand. I start by opening the album browser. Then, I count the number of lines in the buffer, and jump to a random line. The call to &lt;code&gt;(emms-browser-add-tracks-and-play)&lt;/code&gt; just does what it says. This is just automating what I was doing by hand, but calls the same commands I was using.
&lt;/p&gt;

&lt;p&gt;
I am more proud of what follows, which allows me to generate the bit of org-mode text that I need for my logs. Here, I get the name of the album and the artist of the track that just started playing using the appropriate EMMS internal function. Then I format the string with an org headline containing the album title and a property drawer with the artist and the date. It looks like this:
&lt;/p&gt;

&lt;pre class="example" id="org9ebaf99"&gt;* Undercover
:PROPERTIES:
:ARTIST: Rolling Stones, The
:LISTEN_DATE: [2021-09-26 Sun]
:END:
&lt;/pre&gt;


&lt;p&gt;
I don't automatically put the entry in the log file, because sometimes I play a random album without wanting to log it. What I do here is put the entry in the kill ring so I can yank it in the appropriate place. And I also display it in the echo area.
&lt;/p&gt;

&lt;p&gt;
This is yet another example of how powerful living in Emacs is. You can bridge packages that were not designed to work together (here EMMS and org-mode) to automate things. In other &lt;b&gt;operating systems&lt;/b&gt;, if the &lt;i&gt;apps&lt;/i&gt; are not from the same vendor and that they have not foreseen to use them together, you can't do that.
&lt;/p&gt;

&lt;p&gt;
Another nice thing here is that the EMMS buffer (the album list here, but it is the same with the playlists, or any other buffer) is just text, so you can move around as in any other buffer (with &lt;code&gt;goto-line&lt;/code&gt; in this example).
&lt;/p&gt;

&lt;p&gt;
Finally, being able to use any internal function or variable of a package (&lt;code&gt;emms-playlist-current-selected-track&lt;/code&gt; in my case) is very handy. As always, in Emacs, everything (the code, the documentation, etc.) is always available for the users to do whatever they need.
&lt;/p&gt;
&lt;div id="footnotes"&gt;
&lt;h2 class="footnotes"&gt;Footnotes: &lt;/h2&gt;
&lt;div id="text-footnotes"&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a class="footnum" href="https://dindi.garjola.net/rss.xml#fnr.1" id="fn.1"&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;div class="footpara"&gt;&lt;p class="footpara"&gt;yes I have that many albums&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;&lt;div class="taglist"&gt;&lt;a href="https://dindi.garjola.net/tags.html"&gt;Tags&lt;/a&gt;: &lt;a href="https://dindi.garjola.net/tag-emacs.html"&gt;emacs&lt;/a&gt; &lt;a href="https://dindi.garjola.net/tag-emms.html"&gt;emms&lt;/a&gt; &lt;a href="https://dindi.garjola.net/tag-music.html"&gt;music&lt;/a&gt; &lt;a href="https://dindi.garjola.net/tag-org-mode.html"&gt;org-mode&lt;/a&gt; &lt;/div&gt;</content>
		<author>
			<name>Garjola Dindi</name>
			<uri>https://dindi.garjola.net/</uri>
		</author>
		<source>
			<title type="html">Garjola Dindi</title>
			<subtitle type="html">Garjola Dindi</subtitle>
			<link rel="self" href="https://dindi.garjola.net/rss.xml"/>
			<id>https://dindi.garjola.net/</id>
		</source>
	</entry>

	<entry>
		<title type="html" xml:lang="en-US">Grant Rettke: Automatically open read-only files in View mode</title>
		<link href="https://www.wisdomandwonder.com/programming/13521/automatically-open-read-only-files-in-view-mode?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=automatically-open-read-only-files-in-view-mode"/>
		<id>https://www.wisdomandwonder.com/?p=13521</id>
		<updated>2021-09-26T18:41:00+00:00</updated>
		<content type="html">When you open read-only files in Emacs, you probably won’t want to attempt to save them. Emacs will warn you if you try and help you deal with it. However, most of the time, it is interruptive to your flow to deal with it—most of the time, we never want to modify read-only files. In … &lt;a class="more-link" href="https://www.wisdomandwonder.com/programming/13521/automatically-open-read-only-files-in-view-mode"&gt;Continue reading&lt;span class="screen-reader-text"&gt; "Automatically open read-only files in View mode"&lt;/span&gt;&lt;/a&gt;</content>
		<author>
			<name>grant</name>
			<uri>https://www.wisdomandwonder.com</uri>
		</author>
		<source>
			<title type="html">Emacs – Wisdom And Wonder</title>
			<subtitle type="html">Happiness, Creativity, And Computing.</subtitle>
			<link rel="self" href="https://www.wisdomandwonder.com/tag/emacs/feed"/>
			<id>https://www.wisdomandwonder.com</id>
		</source>
	</entry>

	<entry>
		<title type="html" xml:lang="en-US">Irreal: Writing Elisp Functions</title>
		<link href="https://irreal.org/blog/?p=10000"/>
		<id>https://irreal.org/blog/?p=10000</id>
		<updated>2021-09-25T16:31:23+00:00</updated>
		<content type="html" xml:lang="en-US">&lt;p&gt;John Kitchin is back with another in his series of videos comparing Python and Elisp programming. This time it’s about &lt;a href="https://www.youtube.com/watch?v=t-IsXzEz7hs"&gt;writing Elisp functions&lt;/a&gt;. Earlier, Kitchin made a video discussing how to write Python functions. This video is a followup that reimplements the Python functions in Elisp following the original implementation strategy as closely as possible.&lt;/p&gt;
&lt;p&gt;The video mostly focuses on handling the function arguments. The canonical Elisp function using &lt;code&gt;defun&lt;/code&gt; is pretty straightforward. You call the function by specifying each of the arguments listed in the function definition with the possible exception of optional arguments. There are no keywords. Keywords can be included if you use &lt;code&gt;cl-defun&lt;/code&gt; to define the function. That enables certain Common Lisp additions including keywords.&lt;/p&gt;
&lt;p&gt;At one point, Kitchin wants to test if every value of a list of boolean values is &lt;code&gt;t&lt;/code&gt;. The natural way of doing that is&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-elisp"&gt;(apply #'and list-of-booleans)
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;but that doesn’t work because &lt;code&gt;and&lt;/code&gt; is a macro, not a function. Kitchin couldn’t remember how to do it and ended up using the &lt;code&gt;-all?&lt;/code&gt; predicate from the &lt;a href="https://github.com/magnars/dash.el"&gt;Dash library&lt;/a&gt;. I couldn’t remember either but I did remember writing about it years ago. It turns out that it was 10 years ago so no wonder I didn’t remember. You can read &lt;a href="http://irreal.org/blog/?p=318"&gt;that post&lt;/a&gt; for a discussion of the issues and the standard Elisp way of performing an &lt;code&gt;and&lt;/code&gt; or &lt;code&gt;or&lt;/code&gt; on a sequence of values.&lt;/p&gt;
&lt;p&gt;Kitchin says he’s trying to get his viewers to the point where they can begin writing their own Elisp applications. The video is 26 minutes so you’ll need to schedule some time but as always with Kithcin’s content, it’s worth your time.&lt;/p&gt;</content>
		<author>
			<name>jcs</name>
			<uri>https://irreal.org/blog</uri>
		</author>
		<source>
			<title type="html">Emacs – Irreal</title>
			<subtitle type="html">The minds had long ago come up with a proper name for it; they called it the Irreal, but they thought of it as Infinite Fun. That was what they really knew it as. The Land of Infinite Fun. --Iain M. Banks, Excession</subtitle>
			<link rel="self" href="http://irreal.org/blog/?tag=emacs&amp;feed=rss2"/>
			<id>https://irreal.org/blog</id>
		</source>
	</entry>

	<entry>
		<title type="html" xml:lang="en-US">Sid Kasivajhula: The Animated Guide to Symex</title>
		<link href="https://countvajhula.com/2021/09/25/the-animated-guide-to-symex/"/>
		<id>http://countvajhula.com/?p=701</id>
		<updated>2021-09-25T07:03:05+00:00</updated>
		<content type="html" xml:lang="en-US">&lt;p&gt;&lt;em&gt;[This is about &lt;a href="https://github.com/countvajhula/symex.el"&gt;Symex.el&lt;/a&gt;, the Emacs extension for structural editing with Lisp. If you are unfamiliar with Symex, you could read &lt;a href="https://countvajhula.com/2021/09/25/symex-el-edit-lisp-code-in-a-vim-like-way/"&gt;the post introducing it&lt;/a&gt;, or TL;DR: just know that “symex” is short for Lisp symbolic expression / S-expression, and this extension provides a full-featured modal interface / Evil state for editing Lisp code.]&lt;/em&gt;&lt;/p&gt;



&lt;p&gt;This tutorial is modeled after the excellent &lt;a href="http://danmidwood.com/content/2014/11/21/animated-paredit.html"&gt;Animated Guide to Paredit&lt;/a&gt;.&lt;/p&gt;



&lt;h2&gt;Using this Guide&lt;/h2&gt;



&lt;p&gt;If you are learning for the first time, you can use this as a tutorial and go through it sequentially. The Table of Contents below also doubles as a quick reference card, and you can click on any item to visit that section. The animations are short, typically lasting no more than a few seconds (knowing this may help you mentally bound the animations as you watch, since they cycle continuously). At the end of each animated section, you will find a &lt;a href="https://countvajhula.com/category/emacs/feed/"&gt;&lt;img alt="⬆" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/2b06.png" style="height: 1em;" /&gt;&lt;/a&gt; glyph. You can use this to return to the top of the page and the table of contents. The emoji &lt;img alt="👉" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/1f449.png" style="height: 1em;" /&gt; signifies a tip or general insight.&lt;/p&gt;



&lt;div class="wp-block-ideabox-toc ib-block-toc"&gt;&lt;div class="ib-toc-container ib-toc-list-style-numbers ib-toc-hierarchical ib-toc-expanded"&gt;&lt;div class="ib-toc-header"&gt;&lt;div class="ib-toc-header-title"&gt;Table of Contents&lt;/div&gt;&lt;div class="ib-toc-header-right"&gt;&lt;span class="ib-toc-icon-collapse"&gt;&lt;svg class="dashicon dashicons-minus" height="20" viewBox="0 0 20 20" width="20" xmlns="http://www.w3.org/2000/svg"&gt;&lt;path d="M4 9h12v2H4V9z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/span&gt;&lt;span class="ib-toc-icon-expand"&gt;&lt;svg class="dashicon dashicons-plus" height="20" viewBox="0 0 20 20" width="20" xmlns="http://www.w3.org/2000/svg"&gt;&lt;path d="M17 7v3h-5v5H9v-5H4V7h5V2h3v5h5z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="ib-toc-separator" style="height: 2px;"&gt;&lt;/div&gt;&lt;div class="ib-toc-body"&gt;&lt;ol class="ib-toc-anchors"&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;



&lt;h2&gt;Movement&lt;/h2&gt;



&lt;p&gt;The main thing about movement in Symex is that the “point” (i.e. cursor) always indicates a symex and never rests in arbitrary locations in the buffer. Motions move the cursor structurally, i.e. from one symex to another.&lt;/p&gt;



&lt;h5&gt;&lt;code&gt;h l&lt;/code&gt; — Left and Right&lt;/h5&gt;



&lt;figure class="wp-block-image size-large is-style-default"&gt;&lt;img alt="" class="wp-image-737" height="61" src="https://countvajhula.com/wp-content/uploads/2021/05/hl-consistent.gif" width="253" /&gt;&lt;/figure&gt;



&lt;p&gt;These go left and right at a particular (tree) level, not in terms of how it looks on the screen, so for instance, they would also move across expressions at the same level that are aligned vertically. &lt;a href="https://countvajhula.com/category/emacs/feed/"&gt;&lt;img alt="⬆" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/2b06.png" style="height: 1em;" /&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h5&gt;&lt;code&gt;k j&lt;/code&gt; — Up and Down&lt;/h5&gt;



&lt;figure class="wp-block-image size-large is-style-default"&gt;&lt;img alt="" class="wp-image-735" height="61" src="https://countvajhula.com/wp-content/uploads/2021/05/jk-2.gif" width="145" /&gt;&lt;/figure&gt;



&lt;p&gt;These aren’t very interesting, but the key thing is that they are structural motions with precise meaning. Also …&lt;/p&gt;



&lt;figure class="wp-block-image size-large"&gt;&lt;img alt="" class="wp-image-730" height="65" src="https://countvajhula.com/wp-content/uploads/2021/05/jk-memory.gif" width="269" /&gt;&lt;/figure&gt;



&lt;p&gt;… with branch memory, the same keystrokes remember your positions as you go up and down. &lt;a href="https://countvajhula.com/category/emacs/feed/"&gt;&lt;img alt="⬆" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/2b06.png" style="height: 1em;" /&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h5&gt;&lt;code&gt;f b&lt;/code&gt; — Forwards and Backwards&lt;/h5&gt;



&lt;figure class="wp-block-image size-large is-style-default"&gt;&lt;img alt="" class="wp-image-733" height="147" src="https://countvajhula.com/wp-content/uploads/2021/05/fb.gif" width="251" /&gt;&lt;/figure&gt;



&lt;p&gt;These traverse every element / expression in the tree. &lt;a href="https://countvajhula.com/category/emacs/feed/"&gt;&lt;img alt="⬆" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/2b06.png" style="height: 1em;" /&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h5&gt;&lt;code&gt;C-f C-b&lt;/code&gt; — Traversing More Quickly&lt;/h5&gt;



&lt;figure class="wp-block-image size-large"&gt;&lt;img alt="" class="wp-image-786" height="146" src="https://countvajhula.com/wp-content/uploads/2021/09/C-fC-b.gif" width="381" /&gt;&lt;/figure&gt;



&lt;p&gt;A faster way of getting around, these are like &lt;code&gt;f&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; but visit every third element instead of every element.&lt;/p&gt;



&lt;p&gt;&lt;img alt="👉" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/1f449.png" style="height: 1em;" /&gt; The Control key sometimes (as in this case) functions as the comparative “more”, but at other times is a generic modifier[1]. &lt;a href="https://countvajhula.com/category/emacs/feed/"&gt;&lt;img alt="⬆" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/2b06.png" style="height: 1em;" /&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h5&gt;&lt;code&gt;F B&lt;/code&gt; — Skipping forward and backwards&lt;/h5&gt;



&lt;figure class="wp-block-image size-large"&gt;&lt;img alt="" class="wp-image-787" height="152" src="https://countvajhula.com/wp-content/uploads/2021/09/FB-skip.gif" width="419" /&gt;&lt;/figure&gt;



&lt;p&gt;&lt;code&gt;F&lt;/code&gt; – skip forward. This traverses forward like &lt;code&gt;f&lt;/code&gt; but doesn’t enter nested expressions. It is a useful way to go forward without getting into the weeds, and often quicker than &lt;code&gt;C-f&lt;/code&gt;.&lt;/p&gt;



&lt;figure class="wp-block-image size-large"&gt;&lt;img alt="" class="wp-image-788" height="152" src="https://countvajhula.com/wp-content/uploads/2021/09/FB-skip-B.gif" width="419" /&gt;&lt;/figure&gt;



&lt;p&gt;&lt;code&gt;B&lt;/code&gt; – skip backwards. &lt;a href="https://countvajhula.com/category/emacs/feed/"&gt;&lt;img alt="⬆" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/2b06.png" style="height: 1em;" /&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h5 id="leapbranch"&gt;&lt;code&gt;{ }&lt;/code&gt; — Leaping to Other Branches&lt;/h5&gt;



&lt;figure class="wp-block-image size-large"&gt;&lt;img alt="" class="wp-image-866" height="104" src="https://countvajhula.com/wp-content/uploads/2021/09/leap-simple-1.gif" width="338" /&gt;&lt;/figure&gt;



&lt;p&gt;Leap backwards / forwards to a neighboring branch, preserving position along the branch. The branches need not be adjacent, as long as a spot in the same position on the other branch can be found.&lt;/p&gt;



&lt;figure class="wp-block-image size-large"&gt;&lt;img alt="" class="wp-image-793" height="210" src="https://countvajhula.com/wp-content/uploads/2021/09/leap3.gif" width="492" /&gt;&lt;/figure&gt;



&lt;p&gt;Leaping stays within the current tree (e.g. a function definition), but you can also “soar” across trees using &lt;code&gt;M-{&lt;/code&gt; and &lt;code&gt;M-}&lt;/code&gt;. &lt;a href="https://countvajhula.com/category/emacs/feed/"&gt;&lt;img alt="⬆" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/2b06.png" style="height: 1em;" /&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h5&gt;&lt;code&gt;gk gj&lt;/code&gt; — Coordinates-based Up and Down&lt;/h5&gt;



&lt;figure class="wp-block-image size-large"&gt;&lt;img alt="" class="wp-image-825" height="73" src="https://countvajhula.com/wp-content/uploads/2021/09/coordinate-up-down.gif" width="147" /&gt;&lt;/figure&gt;



&lt;p&gt;Go up / down by buffer coordinates (not structural).&lt;/p&gt;



&lt;p&gt;&lt;img alt="👉" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/1f449.png" style="height: 1em;" /&gt; Avoid using these as a crutch since e.g. &lt;a href="https://countvajhula.com/category/emacs/feed/#leapbranch"&gt;leap branch&lt;/a&gt; is often more appropriate. &lt;a href="https://countvajhula.com/category/emacs/feed/"&gt;&lt;img alt="⬆" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/2b06.png" style="height: 1em;" /&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h5&gt;&lt;code&gt;C-k C-j&lt;/code&gt; — Climbing and Descending&lt;/h5&gt;



&lt;figure class="wp-block-image size-large"&gt;&lt;img alt="" class="wp-image-795" height="180" src="https://countvajhula.com/wp-content/uploads/2021/09/climb.gif" width="302" /&gt;&lt;/figure&gt;



&lt;p&gt;These motions can be useful in navigating unfamiliar trees where you don’t already have familiar positions that would be reached using &lt;code&gt;j&lt;/code&gt; and &lt;code&gt;k&lt;/code&gt;.&lt;/p&gt;



&lt;p&gt;&lt;img alt="👉" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/1f449.png" style="height: 1em;" /&gt; Here, Control functions as the comparative “more.” &lt;a href="https://countvajhula.com/category/emacs/feed/"&gt;&lt;img alt="⬆" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/2b06.png" style="height: 1em;" /&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h5&gt;&lt;code&gt;0 $&lt;/code&gt; — First and Last&lt;/h5&gt;



&lt;figure class="wp-block-image size-large"&gt;&lt;img alt="" class="wp-image-796" height="106" src="https://countvajhula.com/wp-content/uploads/2021/09/0-3.gif" width="162" /&gt;&lt;/figure&gt;



&lt;p&gt;Alternatively &lt;code&gt;M-h M-l&lt;/code&gt;, these go to the first or last symex at the present level.&lt;/p&gt;



&lt;p&gt;&lt;img alt="👉" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/1f449.png" style="height: 1em;" /&gt; The Meta key sometimes (as in this case) functions as the superlative “most”, while at other times it is a simple modifier[1]. &lt;a href="https://countvajhula.com/category/emacs/feed/"&gt;&lt;img alt="⬆" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/2b06.png" style="height: 1em;" /&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h5&gt;&lt;code&gt;M-j M-k&lt;/code&gt; — Lowest and Highest&lt;/h5&gt;



&lt;figure class="wp-block-image size-large"&gt;&lt;img alt="" class="wp-image-797" height="169" src="https://countvajhula.com/wp-content/uploads/2021/09/M-jM-k.gif" width="302" /&gt;&lt;/figure&gt;



&lt;p&gt;Go to the lowest (root) or highest (most nested) symex in relation to the current position. &lt;code&gt;M-k&lt;/code&gt; goes to the highest position accessible by ascending the current branch — it will not jump to neighboring branches that may be higher.&lt;/p&gt;



&lt;p&gt;&lt;img alt="👉" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/1f449.png" style="height: 1em;" /&gt; Here, again, the Meta key functions as the superlative “most.” &lt;a href="https://countvajhula.com/category/emacs/feed/"&gt;&lt;img alt="⬆" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/2b06.png" style="height: 1em;" /&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;Editing&lt;/h2&gt;



&lt;p&gt;Symex’s editing style is essentially Vim-like. While Vim’s Normal mode can be considered a Domain Specific Language for text editing in general, it has the following drawbacks when it comes to editing symexes: (1) it doesn’t have an appropriate noun to refer to symexes (e.g. it only has “words,” “lines,” “paragraphs,” etc.), and (2) the nouns it has are for the most part irrelevant when editing symexes. Thus, it isn’t exactly the right language to use. Symex.el attempts to be “the right language” here by supporting just a single noun — symexes — which, by virtue of its singularity, need not ever be stated and is implicit in every action[2]. But aside from this, Symex mimics Normal mode idioms and conventions. Therefore, a lot of these usage patterns should be very familiar from Vim/Evil even though they aren’t the same — they are the same ideas applied to symexes (along with other symex-specific ideas).&lt;/p&gt;



&lt;h5&gt;&lt;code&gt;i&lt;/code&gt; — Insert&lt;/h5&gt;



&lt;figure class="wp-block-image size-large"&gt;&lt;img alt="" class="wp-image-798" height="114" src="https://countvajhula.com/wp-content/uploads/2021/09/ii.gif" width="243" /&gt;&lt;/figure&gt;



&lt;p&gt;The behavior of &lt;code&gt;i&lt;/code&gt; is sensitive to whether the symex is an atom or a form. For atoms, it inserts under the cursor. For forms, it inserts at the beginning of the &lt;em&gt;contents&lt;/em&gt; of the form.&lt;/p&gt;



&lt;p&gt;&lt;img alt="👉" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/1f449.png" style="height: 1em;" /&gt; In some cases you may want to just enter an insertion state at point without considering the context; for this, use &lt;code&gt;&amp;lt;Enter&amp;gt;&lt;/code&gt;. But if your reason for doing this is to quote or unquote an expression, use the bindings in &lt;a href="https://countvajhula.com/category/emacs/feed/#quoting"&gt;Quoting and Unquoting&lt;/a&gt; instead. &lt;a href="https://countvajhula.com/category/emacs/feed/"&gt;&lt;img alt="⬆" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/2b06.png" style="height: 1em;" /&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h5&gt;&lt;code&gt;a&lt;/code&gt; — Append&lt;/h5&gt;



&lt;figure class="wp-block-image size-large"&gt;&lt;img alt="" class="wp-image-799" height="114" src="https://countvajhula.com/wp-content/uploads/2021/09/aa.gif" width="243" /&gt;&lt;/figure&gt;



&lt;p&gt;The behavior of &lt;code&gt;a&lt;/code&gt; is sensitive to whether the symex is an atom or a form. For atoms, it appends at the end of the atom. For forms, it appends at the end of the &lt;em&gt;contents&lt;/em&gt; of the form. &lt;a href="https://countvajhula.com/category/emacs/feed/"&gt;&lt;img alt="⬆" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/2b06.png" style="height: 1em;" /&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h5&gt;&lt;code&gt;I&lt;/code&gt; — Insert before&lt;/h5&gt;



&lt;figure class="wp-block-image size-large"&gt;&lt;img alt="" class="wp-image-800" height="114" src="https://countvajhula.com/wp-content/uploads/2021/09/I-I.gif" width="243" /&gt;&lt;/figure&gt;



&lt;p&gt;For forms, &lt;code&gt;i&lt;/code&gt; inserts inside the form, while &lt;code&gt;I&lt;/code&gt; inserts outside (before) the form. &lt;a href="https://countvajhula.com/category/emacs/feed/"&gt;&lt;img alt="⬆" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/2b06.png" style="height: 1em;" /&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h5&gt;&lt;code&gt;A&lt;/code&gt; — Append after&lt;/h5&gt;



&lt;figure class="wp-block-image size-large"&gt;&lt;img alt="" class="wp-image-801" height="114" src="https://countvajhula.com/wp-content/uploads/2021/09/A-A.gif" width="264" /&gt;&lt;/figure&gt;



&lt;p&gt;For forms, &lt;code&gt;a&lt;/code&gt; appends inside the form, while &lt;code&gt;A&lt;/code&gt; appends outside (after) the form. &lt;a href="https://countvajhula.com/category/emacs/feed/"&gt;&lt;img alt="⬆" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/2b06.png" style="height: 1em;" /&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h5&gt;&lt;code&gt;o O&lt;/code&gt; — Open Newline Below or Above&lt;/h5&gt;



&lt;figure class="wp-block-image size-large"&gt;&lt;img alt="" class="wp-image-802" height="169" src="https://countvajhula.com/wp-content/uploads/2021/09/o-O.gif" width="304" /&gt;&lt;/figure&gt;



&lt;p&gt;These open the newlines before or after the current &lt;em&gt;expression&lt;/em&gt;, not the current line. They also enter an insertion state, just like their usual behavior in Normal state. &lt;a href="https://countvajhula.com/category/emacs/feed/"&gt;&lt;img alt="⬆" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/2b06.png" style="height: 1em;" /&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h5&gt;&lt;code&gt;( [&lt;/code&gt; — Create&lt;/h5&gt;



&lt;figure class="wp-block-image size-large"&gt;&lt;img alt="" class="wp-image-803" height="61" src="https://countvajhula.com/wp-content/uploads/2021/09/create-lists.gif" width="275" /&gt;&lt;/figure&gt;



&lt;p&gt;&lt;img alt="👉" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/1f449.png" style="height: 1em;" /&gt; I find that I don’t use these very often since it’s just as easy to do &lt;code&gt;I(&lt;/code&gt; as &lt;code&gt;(i&lt;/code&gt;. &lt;a href="https://countvajhula.com/category/emacs/feed/"&gt;&lt;img alt="⬆" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/2b06.png" style="height: 1em;" /&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h5&gt;&lt;code&gt;) ] -&lt;/code&gt; — Wrap and Splice&lt;/h5&gt;



&lt;figure class="wp-block-image size-large"&gt;&lt;img alt="" class="wp-image-804" height="61" src="https://countvajhula.com/wp-content/uploads/2021/09/nest-splice.gif" width="216" /&gt;&lt;/figure&gt;



&lt;p&gt;&lt;code&gt;)&lt;/code&gt; and &lt;code&gt;]&lt;/code&gt; wrap the symex with the indicated delimiter. Contrastingly, &lt;code&gt;-&lt;/code&gt; removes a wrapping level.&lt;br /&gt;&lt;br /&gt;&lt;img alt="👉" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/1f449.png" style="height: 1em;" /&gt; I use these fairly often. “Splice” is a confusing (but standard) term since it sounds like “slice” which has the opposite meaning! Really what we are doing here is “splicing” the contents into the containing expression by “slicing” the delimiters using the sharp &lt;code&gt;-&lt;/code&gt; key. Glad we cleared that up &lt;img alt="😝" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/1f61d.png" style="height: 1em;" /&gt;. &lt;a href="https://countvajhula.com/category/emacs/feed/"&gt;&lt;img alt="⬆" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/2b06.png" style="height: 1em;" /&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h5&gt;&lt;code&gt;w W&lt;/code&gt; — Wrap and Insert or Append&lt;/h5&gt;



&lt;figure class="wp-block-image size-large"&gt;&lt;img alt="" class="wp-image-921" height="115" src="https://countvajhula.com/wp-content/uploads/2021/09/wrap-insert-append.gif" width="256" /&gt;&lt;/figure&gt;



&lt;p&gt;&lt;code&gt;w&lt;/code&gt; is equivalent to &lt;code&gt;)i&lt;/code&gt;, while capital &lt;code&gt;W&lt;/code&gt; is equivalent to &lt;code&gt;)a&lt;/code&gt;.&lt;/p&gt;



&lt;p&gt;&lt;img alt="👉" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/1f449.png" style="height: 1em;" /&gt; I use these often. &lt;a href="https://countvajhula.com/category/emacs/feed/"&gt;&lt;img alt="⬆" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/2b06.png" style="height: 1em;" /&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h5&gt;&lt;code&gt;x&lt;/code&gt; — Delete&lt;/h5&gt;



&lt;figure class="wp-block-image size-large"&gt;&lt;img alt="" class="wp-image-806" height="177" src="https://countvajhula.com/wp-content/uploads/2021/09/delete.gif" width="305" /&gt;&lt;/figure&gt;



&lt;p&gt;You can also use capital &lt;code&gt;X&lt;/code&gt; to delete backwards. &lt;a href="https://countvajhula.com/category/emacs/feed/"&gt;&lt;img alt="⬆" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/2b06.png" style="height: 1em;" /&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h5&gt;&lt;code&gt;c&lt;/code&gt; — Change&lt;/h5&gt;



&lt;figure class="wp-block-image size-large"&gt;&lt;img alt="" class="wp-image-807" height="117" src="https://countvajhula.com/wp-content/uploads/2021/09/change.gif" width="250" /&gt;&lt;/figure&gt;



&lt;p&gt;&lt;a href="https://countvajhula.com/category/emacs/feed/"&gt;&lt;img alt="⬆" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/2b06.png" style="height: 1em;" /&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h5&gt;&lt;code&gt;C D Y&lt;/code&gt; — Change, Delete, or Yank Remaining Symexes&lt;/h5&gt;



&lt;figure class="wp-block-image size-large"&gt;&lt;img alt="" class="wp-image-809" height="87" src="https://countvajhula.com/wp-content/uploads/2021/09/change-remaining.gif" width="145" /&gt;&lt;/figure&gt;



&lt;p&gt;The above animation depicts &lt;code&gt;C&lt;/code&gt; (change remaining). &lt;code&gt;D&lt;/code&gt; and &lt;code&gt;Y&lt;/code&gt; are analogous, respectively changing, deleting, or yanking (copying) the remaining symexes at the present level. &lt;a href="https://countvajhula.com/category/emacs/feed/"&gt;&lt;img alt="⬆" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/2b06.png" style="height: 1em;" /&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h5&gt;&lt;code&gt;y p&lt;/code&gt; — Yank (Copy) and Paste&lt;/h5&gt;



&lt;figure class="wp-block-image size-large"&gt;&lt;img alt="" class="wp-image-808" height="289" src="https://countvajhula.com/wp-content/uploads/2021/09/yank-paste.gif" width="325" /&gt;&lt;/figure&gt;



&lt;p&gt;You can also use capital &lt;code&gt;P&lt;/code&gt; to paste before. &lt;a href="https://countvajhula.com/category/emacs/feed/"&gt;&lt;img alt="⬆" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/2b06.png" style="height: 1em;" /&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h5&gt;&lt;code&gt;- C--&lt;/code&gt; — Splice and Clear&lt;/h5&gt;



&lt;figure class="wp-block-image size-large"&gt;&lt;img alt="" class="wp-image-810" height="87" src="https://countvajhula.com/wp-content/uploads/2021/09/clear-splice.gif" width="145" /&gt;&lt;/figure&gt;



&lt;p&gt;“Splice” removes the delimiters, and “clear” removes the contents.&lt;/p&gt;



&lt;p&gt;We already saw “splice” earlier — it is just here again because I didn’t realize it was duplicated when I made this animation &lt;img alt="😀" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/1f600.png" style="height: 1em;" /&gt; But also, it is useful to see its symmetry with “clear”. &lt;a href="https://countvajhula.com/category/emacs/feed/"&gt;&lt;img alt="⬆" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/2b06.png" style="height: 1em;" /&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h5&gt;&lt;code&gt;s&lt;/code&gt; — Substitute&lt;/h5&gt;



&lt;figure class="wp-block-image size-large"&gt;&lt;img alt="" class="wp-image-811" height="87" src="https://countvajhula.com/wp-content/uploads/2021/09/substitute.gif" width="145" /&gt;&lt;/figure&gt;



&lt;p&gt;Similar to &lt;code&gt;c&lt;/code&gt; but changes the contents and not the whole.&lt;/p&gt;



&lt;p&gt;&lt;img alt="👉" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/1f449.png" style="height: 1em;" /&gt; This also works with strings. &lt;a href="https://countvajhula.com/category/emacs/feed/"&gt;&lt;img alt="⬆" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/2b06.png" style="height: 1em;" /&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h5&gt;&lt;code&gt;S&lt;/code&gt; — Change Surrounding Delimiter&lt;/h5&gt;



&lt;figure class="wp-block-image size-large"&gt;&lt;img alt="" class="wp-image-812" height="87" src="https://countvajhula.com/wp-content/uploads/2021/09/change-surround.gif" width="145" /&gt;&lt;/figure&gt;



&lt;p&gt;&lt;a href="https://countvajhula.com/category/emacs/feed/"&gt;&lt;img alt="⬆" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/2b06.png" style="height: 1em;" /&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h5&gt;&lt;code&gt;H L&lt;/code&gt; — Shift Left and Shift Right&lt;/h5&gt;



&lt;figure class="wp-block-image size-large"&gt;&lt;img alt="" class="wp-image-813" height="61" src="https://countvajhula.com/wp-content/uploads/2021/09/shift-left-right.gif" width="233" /&gt;&lt;/figure&gt;



&lt;p&gt;&lt;img alt="👉" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/1f449.png" style="height: 1em;" /&gt; The Shift key usually functions as a verb, in this case to “translate” left and right, &lt;code&gt;S-h S-l&lt;/code&gt; [1]. &lt;a href="https://countvajhula.com/category/emacs/feed/"&gt;&lt;img alt="⬆" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/2b06.png" style="height: 1em;" /&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h5 id="raise"&gt;&lt;code&gt;K&lt;/code&gt; — Raise&lt;/h5&gt;



&lt;figure class="wp-block-image size-large"&gt;&lt;img alt="" class="wp-image-814" height="73" src="https://countvajhula.com/wp-content/uploads/2021/09/raise.gif" width="190" /&gt;&lt;/figure&gt;



&lt;p&gt;Promote an expression by replacing the containing expression with it.&lt;/p&gt;



&lt;p&gt;&lt;img alt="👉" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/1f449.png" style="height: 1em;" /&gt; Once again, the Shift key “translates” the symex in a direction, in this case, “up.”[3] Also see &lt;a href="https://countvajhula.com/category/emacs/feed/#swallow"&gt;swallow&lt;/a&gt; which is similar and is more appropriate in some cases. &lt;a href="https://countvajhula.com/category/emacs/feed/"&gt;&lt;img alt="⬆" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/2b06.png" style="height: 1em;" /&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h5&gt;&lt;code&gt;C-H C-J C-K C-L&lt;/code&gt; — Emit and Capture&lt;/h5&gt;



&lt;figure class="wp-block-image size-large"&gt;&lt;img alt="" class="wp-image-815" height="107" src="https://countvajhula.com/wp-content/uploads/2021/09/emit-capture.gif" width="203" /&gt;&lt;/figure&gt;



&lt;p&gt;Include or exclude expressions at either end of a form. These are also known as “barf” and “slurp” in paredit.&lt;/p&gt;



&lt;p&gt;&lt;img alt="👉" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/1f449.png" style="height: 1em;" /&gt; Here, too, Shift functions as a verb. &lt;a href="https://countvajhula.com/category/emacs/feed/"&gt;&lt;img alt="⬆" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/2b06.png" style="height: 1em;" /&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h5 id="swallow"&gt;&lt;code&gt;z Z&lt;/code&gt; — Swallow Head / Swallow Tail&lt;/h5&gt;



&lt;figure class="wp-block-image size-large"&gt;&lt;img alt="" class="wp-image-816" height="110" src="https://countvajhula.com/wp-content/uploads/2021/09/swallow.gif" width="224" /&gt;&lt;/figure&gt;



&lt;p&gt;Consumes either the head or the tail, promoting the rest of the expression into the containing expression.&lt;/p&gt;



&lt;p&gt;[&lt;em&gt;Note&lt;/em&gt;: the animation shows the operation of &lt;code&gt;z&lt;/code&gt; and &lt;code&gt;Z&lt;/code&gt; in turn, beginning each time with the entire let expression visible.]&lt;/p&gt;



&lt;p&gt;&lt;img alt="👉" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/1f449.png" style="height: 1em;" /&gt; I use these often. Also see &lt;a href="https://countvajhula.com/category/emacs/feed/#raise"&gt;raise&lt;/a&gt; which is similar and is more appropriate in some cases. &lt;a href="https://countvajhula.com/category/emacs/feed/"&gt;&lt;img alt="⬆" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/2b06.png" style="height: 1em;" /&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h5&gt;&lt;code&gt;| &amp;amp;&lt;/code&gt; — Split and Merge&lt;/h5&gt;



&lt;figure class="wp-block-image size-large"&gt;&lt;img alt="" class="wp-image-817" height="61" src="https://countvajhula.com/wp-content/uploads/2021/09/split-merge.gif" width="254" /&gt;&lt;/figure&gt;



&lt;p&gt;&lt;a href="https://countvajhula.com/category/emacs/feed/"&gt;&lt;img alt="⬆" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/2b06.png" style="height: 1em;" /&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h5&gt;&lt;code&gt;&amp;gt; &amp;lt;&lt;/code&gt; — Insert Newline / Join Previous Line&lt;/h5&gt;



&lt;figure class="wp-block-image size-large"&gt;&lt;img alt="" class="wp-image-821" height="88" src="https://countvajhula.com/wp-content/uploads/2021/09/newline-joinline-before.gif" width="229" /&gt;&lt;/figure&gt;



&lt;p&gt;&lt;a href="https://countvajhula.com/category/emacs/feed/"&gt;&lt;img alt="⬆" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/2b06.png" style="height: 1em;" /&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h5&gt;&lt;code&gt;C-&amp;gt; C-&amp;lt;&lt;/code&gt; — Append Newline / Join Next Line&lt;/h5&gt;



&lt;figure class="wp-block-image size-large"&gt;&lt;img alt="" class="wp-image-820" height="88" src="https://countvajhula.com/wp-content/uploads/2021/09/newline-joinline.gif" width="229" /&gt;&lt;/figure&gt;



&lt;p&gt;You can also use &lt;code&gt;J&lt;/code&gt; to join next line, as usual in Vim. But note that these add and remove lines in relation to the current expression rather than the current line.&lt;/p&gt;



&lt;p&gt;&lt;img alt="👉" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/1f449.png" style="height: 1em;" /&gt; The Control key functions as a modifier here. &lt;a href="https://countvajhula.com/category/emacs/feed/"&gt;&lt;img alt="⬆" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/2b06.png" style="height: 1em;" /&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h5&gt;&lt;code&gt;M-&amp;lt; M-&amp;gt;&lt;/code&gt; — Collapse and Unfurl&lt;/h5&gt;



&lt;figure class="wp-block-image size-large"&gt;&lt;img alt="" class="wp-image-822" height="135" src="https://countvajhula.com/wp-content/uploads/2021/09/collapse-unfurl.gif" width="417" /&gt;&lt;/figure&gt;



&lt;p&gt;Collapse the indicated symex to a single line, or unfurl its contents across multiple lines. You can also use &lt;code&gt;C-M-&amp;lt;&lt;/code&gt; and &lt;code&gt;C-M-&amp;gt;&lt;/code&gt; to collapse and unfurl the “remaining” symexes at the present level, which are often more useful.&lt;/p&gt;



&lt;p&gt;&lt;img alt="👉" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/1f449.png" style="height: 1em;" /&gt; The Meta key functions as the superlative “most” here. &lt;a href="https://countvajhula.com/category/emacs/feed/"&gt;&lt;img alt="⬆" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/2b06.png" style="height: 1em;" /&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h5 id="quoting"&gt;&lt;code&gt;C-' C-, ` C-`&lt;/code&gt; — Quoting and Unquoting&lt;/h5&gt;



&lt;figure class="wp-block-image size-large"&gt;&lt;img alt="" class="wp-image-823" height="61" src="https://countvajhula.com/wp-content/uploads/2021/09/quote-unquote.gif" width="190" /&gt;&lt;/figure&gt;



&lt;p&gt;&lt;code&gt;C-'&lt;/code&gt; cycles through configured quoting prefixes (defaults to &lt;code&gt;'&lt;/code&gt; and &lt;code&gt;`&lt;/code&gt;), while &lt;code&gt;C-,&lt;/code&gt; cycles through configured &lt;em&gt;un&lt;/em&gt;quoting prefixes (defaults: &lt;code&gt;,&lt;/code&gt; and &lt;code&gt;,@&lt;/code&gt;). &lt;code&gt;`&lt;/code&gt; adds an extra quoting level and &lt;code&gt;C-`&lt;/code&gt; removes a quoting level.&lt;/p&gt;



&lt;p&gt;&lt;img alt="👉" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/1f449.png" style="height: 1em;" /&gt; This avoids the need to enter an insertion state to do a relatively common activity in Lisp (quoting). The quoting and unquoting styles can be customized. &lt;a href="https://countvajhula.com/category/emacs/feed/"&gt;&lt;img alt="⬆" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/2b06.png" style="height: 1em;" /&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h5&gt;&lt;code&gt;M-H M-L&lt;/code&gt; — Shift “the Most”&lt;/h5&gt;



&lt;figure class="wp-block-image size-large"&gt;&lt;img alt="" class="wp-image-824" height="67" src="https://countvajhula.com/wp-content/uploads/2021/09/shift-max.gif" width="174" /&gt;&lt;/figure&gt;



&lt;p&gt;Shift the expression to the left or to the right as far as possible. This stops each time at indentation boundaries. &lt;a href="https://countvajhula.com/category/emacs/feed/"&gt;&lt;img alt="⬆" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/2b06.png" style="height: 1em;" /&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h5&gt;&lt;code&gt;&amp;lt;Tab&amp;gt; M-&amp;lt;Tab&amp;gt;&lt;/code&gt; — Indenting&lt;/h5&gt;



&lt;figure class="wp-block-image size-large"&gt;&lt;img alt="" class="wp-image-827" height="168" src="https://countvajhula.com/wp-content/uploads/2021/09/indent.gif" width="363" /&gt;&lt;/figure&gt;



&lt;p&gt;&lt;code&gt;&amp;lt;Tab&amp;gt;&lt;/code&gt; works by indenting the expression in the usual way for your major (e.g. Lisp) mode, but this doesn’t work when the form is badly indented in nested forms. In this case you can use &lt;code&gt;M-&amp;lt;Tab&amp;gt;&lt;/code&gt; to traverse the indicated symex and indent it recursively. &lt;a href="https://countvajhula.com/category/emacs/feed/"&gt;&lt;img alt="⬆" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/2b06.png" style="height: 1em;" /&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h5&gt;&lt;code&gt;; M-;&lt;/code&gt; — Commenting&lt;/h5&gt;



&lt;figure class="wp-block-image size-large"&gt;&lt;img alt="" class="wp-image-828" height="285" src="https://countvajhula.com/wp-content/uploads/2021/09/comment.gif" width="410" /&gt;&lt;/figure&gt;



&lt;p&gt;&lt;code&gt;;&lt;/code&gt; comments the indicated symex while &lt;code&gt;M-;&lt;/code&gt; comments the remaining symexes at the present level. &lt;a href="https://countvajhula.com/category/emacs/feed/"&gt;&lt;img alt="⬆" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/2b06.png" style="height: 1em;" /&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;Control&lt;/h2&gt;



&lt;p&gt;Symex also provides IDE-like features, but these don’t benefit from animated demonstrations, so I’ll just mention a few of them here:&lt;/p&gt;



&lt;h5&gt;&lt;code&gt;e&lt;/code&gt; — Evaluate&lt;/h5&gt;



&lt;p&gt;There are many ways to evaluate code of interest — the most common are &lt;code&gt;e&lt;/code&gt; to evaluate the symex at point, and &lt;code&gt;d&lt;/code&gt; to evaluate the containing definition. &lt;a href="https://countvajhula.com/category/emacs/feed/"&gt;&lt;img alt="⬆" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/2b06.png" style="height: 1em;" /&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h5&gt;&lt;code&gt;r&lt;/code&gt; — REPL&lt;/h5&gt;



&lt;p&gt;&lt;a href="https://countvajhula.com/category/emacs/feed/"&gt;&lt;img alt="⬆" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/2b06.png" style="height: 1em;" /&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h5&gt;&lt;code&gt;t&lt;/code&gt; — Scratch Buffer&lt;/h5&gt;



&lt;p&gt;Scratch buffers are a context-preserving alternative to working in a REPL that can be an efficient way to prototype things. Some examples of this pattern are Emacs’s Scratch Buffer for ELisp code, &lt;a href="https://github.com/noamraph/dreampie"&gt;DreamPie&lt;/a&gt; for Python, and &lt;a href="https://groovy-lang.org/groovyconsole.html"&gt;GroovyConsole&lt;/a&gt; for Groovy. I’m sure there are more — these are just the ones I’ve seen. In support of this style of prototyping, in Symex, &lt;code&gt;t&lt;/code&gt; opens a scratch buffer in the appropriate Lisp mode. &lt;a href="https://countvajhula.com/category/emacs/feed/"&gt;&lt;img alt="⬆" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/2b06.png" style="height: 1em;" /&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h5&gt;&lt;code&gt;M&lt;/code&gt; — Messages Buffer&lt;/h5&gt;



&lt;p&gt;Reviewing messages and logs is a common activity, making this a useful feature especially for ELisp development. &lt;a href="https://countvajhula.com/category/emacs/feed/"&gt;&lt;img alt="⬆" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/2b06.png" style="height: 1em;" /&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h5&gt;&lt;code&gt;R&lt;/code&gt; — Run&lt;/h5&gt;



&lt;p&gt;Evaluates the entire buffer. &lt;a href="https://countvajhula.com/category/emacs/feed/"&gt;&lt;img alt="⬆" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/2b06.png" style="height: 1em;" /&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h5&gt;&lt;code&gt;?&lt;/code&gt; — Lookup Documentation&lt;/h5&gt;



&lt;p&gt;Looks up the symbol at point using the Lisp mode’s documentation facilities. &lt;a href="https://countvajhula.com/category/emacs/feed/"&gt;&lt;img alt="⬆" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/2b06.png" style="height: 1em;" /&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h5&gt;&lt;code&gt;H-h&lt;/code&gt; — Toggle Highlighting (beta)&lt;/h5&gt;



&lt;p&gt;Highlights the symex at point. As an implementation note, this feature uses Emacs’s region functionality at the moment but this tends to interfere with other functionality offered by Symex. It would be better to highlight using some kind of overlay eventually so that it can be seamless. &lt;a href="https://countvajhula.com/category/emacs/feed/"&gt;&lt;img alt="⬆" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/2b06.png" style="height: 1em;" /&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;[1] The conventions around the Control, Meta, and Shift keys in Symex are inherited from the &lt;a href="https://github.com/countvajhula/rigpa"&gt;Rigpa&lt;/a&gt; framework.&lt;/p&gt;



&lt;p&gt;[2] Another possible approach here could be to augment Normal mode with a symex noun bound to &lt;code&gt;(&lt;/code&gt; and &lt;code&gt;)&lt;/code&gt; in Lisp modes since “sentences” aren’t useful for editing symexes anyway. It has the other benefit that the text objects &lt;code&gt;is&lt;/code&gt; and &lt;code&gt;as&lt;/code&gt; could be read as “in symex” and “around symex.” This approach would allow Normal mode to be used for editing symexes without requiring an entire extra state, but it would mean that editing symexes specifically may be less efficient than in the approach taken in Symex.el (since the noun wouldn’t be implicit, e.g. &lt;code&gt;c)&lt;/code&gt; vs just &lt;code&gt;c&lt;/code&gt;). Still, this approach could be worth exploring as well, if anyone wants to take a crack at it.&lt;/p&gt;



&lt;p&gt;[3] — Technically, this should be &lt;code&gt;J&lt;/code&gt; rather than &lt;code&gt;K&lt;/code&gt; since we’re translating the symex “down” the tree. But as &lt;code&gt;J&lt;/code&gt; already has a standard binding in Vim/Evil, we use &lt;code&gt;K&lt;/code&gt; here since we’re at least translating the symex “up” on the page. Of course in any case, all of these keys are user-customizable, and indeed, some users flip the orientation of &lt;code&gt;j&lt;/code&gt; and &lt;code&gt;k&lt;/code&gt;.&lt;/p&gt;</content>
		<author>
			<name>sid</name>
			<uri>https://countvajhula.com</uri>
		</author>
		<source>
			<title type="html">Emacs – Terminally Undead</title>
			<subtitle type="html">Batty Bits and Sharptoothed Bytes</subtitle>
			<link rel="self" href="https://countvajhula.com/category/emacs/feed/"/>
			<id>https://countvajhula.com</id>
		</source>
	</entry>

	<entry>
		<title type="html" xml:lang="en-US">Sid Kasivajhula: Symex.el: Edit Lisp Code in a Vim-like Way</title>
		<link href="https://countvajhula.com/2021/09/25/symex-el-edit-lisp-code-in-a-vim-like-way/"/>
		<id>http://countvajhula.com/?p=774</id>
		<updated>2021-09-25T06:56:11+00:00</updated>
		<content type="html" xml:lang="en-US">&lt;p&gt;A quick movement out of the corner of your eye, but it’s gone as you turn to see. A rustle in the trees, or did you imagine it? A shadow passing overhead, and a blinding flash as you look up. Was that the Sun, or the gleam in the eye of Symex the Squirrel, as it soared above the treetops?&lt;/p&gt;



&lt;p&gt;You’ll never know. The legendary Squirrel is said to possess startling agility and speed, capable of executing mind-bending maneuvers in the trees, and traversing impossible distances in a single leap. So they say. Yet, no one has ever seen Symex. Some say that it is much too quick for our eyes to see. Others say that no one has seen Symex because, you fool (they say), Symex isn’t some squirrel &lt;em&gt;out there&lt;/em&gt; — it’s the squirrel &lt;em&gt;in you&lt;/em&gt;.&lt;/p&gt;



&lt;p&gt;And of course, there’s an &lt;a href="https://github.com/countvajhula/symex.el"&gt;Emacs extension&lt;/a&gt; for that!&lt;/p&gt;



&lt;p&gt;Symex is many things:&lt;/p&gt;



&lt;ol&gt;&lt;li&gt;It is an abbreviated way of saying “symbolic expression.” I remember when I first learned about Lisp, I thought “S-expressions” must be something very advanced and sophisticated, far beyond my meagre imagination to conceive. But symexes are the simplest things in the world! Why shouldn’t they have a nice and simple, even fun, name? One that’s more welcoming to your friends who may be considering learning about Lisp?&lt;/li&gt;&lt;/ol&gt;



&lt;p&gt;And, as an Emacs extension, it’s also:&lt;/p&gt;



&lt;ol start="2"&gt;&lt;li&gt;A &lt;a href="https://en.wikipedia.org/wiki/Domain-specific_language"&gt;DSL&lt;/a&gt; for describing, traversing, and manipulating symexes, allowing it to provide complex and useful features you won’t find anywhere else.&lt;/li&gt;&lt;li&gt;A full-featured Vim-style modal interface (implemented as an evil state, just like Normal) for structural editing using the DSL, allowing the keybindings to be minimal and composable, and also supporting quantifiers and &lt;a href="https://countvajhula.com/2021/02/08/vim-tip-of-the-day-saying-more-macros/"&gt;expressive macros&lt;/a&gt; just like Vim.&lt;/li&gt;&lt;/ol&gt;



&lt;p&gt;You would use it if:&lt;/p&gt;



&lt;ol&gt;&lt;li&gt;You write code in dialect of Lisp, like Emacs Lisp, Racket, Clojure, Common Lisp, etc.&lt;/li&gt;&lt;li&gt;If you’re an evil user you would be right at home, but you don’t need to be one in order to use Symex.&lt;/li&gt;&lt;li&gt;Er, that’s it. There’s no other reason. Well, since you asked, at some future point the hope is to &lt;a href="https://github.com/countvajhula/symex.el/issues/3"&gt;have Symex be language-agnostic&lt;/a&gt;, so that it would work with Python and Ruby and C++ and what have you, but, that’s a pipe dream for the moment.&lt;/li&gt;&lt;/ol&gt;



&lt;p&gt;Now that Symex has hit 1.0, I thought it was a good time to write about it a little more than I have (which is, almost not at all) and, at the encouragement of one of my erudite users (Hi, Tommy!), prepare an animated tutorial for it. After all, the responsibility for writing the documentation &lt;a href="https://www.youtube.com/watch?v=z3fRu9pkuXE"&gt;lies with the core developers&lt;/a&gt; (but help is always appreciated!).&lt;/p&gt;



&lt;p&gt;First, I should mention that Symex owes its existence to (1) my partner Ariana, who named it and gave it life, (2) my friend Soumya, who chided me (very sweetly) on my lack of output and motivated me to put some work out there, and (3) Jeff who organizes &lt;a href="https://www.meetup.com/Emacs-SF/"&gt;EmacsSF&lt;/a&gt;, who, in response to my feeble “I tried” message saying I could maybe mention Symex at an upcoming meetup, warmly encouraged me and helped make that happen and made it easy[1]. It just goes to show that a little help or a good kick in the butt can be all that’s needed sometimes, and may be appreciated more than you think. So, er, help somebody out today &lt;img alt="😉" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/1f609.png" style="height: 1em;" /&gt;&lt;/p&gt;



&lt;p&gt;You can find the original EmacsSF video &lt;a href="https://www.youtube.com/watch?v=a5s1ScTx8Zk"&gt;here&lt;/a&gt;, but that’s more of a deep dive than a tutorial. Without further ado, here, in the next post, is the long-overdue &lt;img alt="✨" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/2728.png" style="height: 1em;" /&gt; &lt;a href="https://countvajhula.com/2021/09/25/the-animated-guide-to-symex/"&gt;&lt;strong&gt;&lt;em&gt;animated tutorial&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt; &lt;img alt="✨" class="wp-smiley" src="https://s.w.org/images/core/emoji/13.0.0/72x72/2728.png" style="height: 1em;" /&gt;.&lt;/p&gt;



&lt;hr class="wp-block-separator" /&gt;



&lt;p&gt;[1] Oh, and (4) Oleh Krehel, whose creative mind gave us the &lt;a href="https://github.com/abo-abo/hydra"&gt;hydra&lt;/a&gt; package which made it easy to prototype things like Symex. Although Symex is based on &lt;a href="https://github.com/emacs-evil/evil"&gt;evil&lt;/a&gt; now by default (for interoperability reasons), it may not have existed at all if I had to write an evil state that early in my ELisp dabblings. Thanks Oleh!&lt;/p&gt;</content>
		<author>
			<name>sid</name>
			<uri>https://countvajhula.com</uri>
		</author>
		<source>
			<title type="html">Emacs – Terminally Undead</title>
			<subtitle type="html">Batty Bits and Sharptoothed Bytes</subtitle>
			<link rel="self" href="https://countvajhula.com/category/emacs/feed/"/>
			<id>https://countvajhula.com</id>
		</source>
	</entry>

	<entry>
		<title type="html" xml:lang="en-us">Tory Anderson: Replacing beacon.el with hl-line-flash</title>
		<link href="https://tech.toryanderson.com/2021/09/24/replacing-beacon.el-with-hl-line-flash/"/>
		<id>https://tech.toryanderson.com/2021/09/24/replacing-beacon.el-with-hl-line-flash/</id>
		<updated>2021-09-24T00:00:00+00:00</updated>
		<content type="html">Intro  EDIT [2021-09-27 Mon]: decreased hl-line-flash-show-period1  I learned about beacon.el2 in one of Sacha Chua’s videos3 that asted users about their favorite tweaks, and it remained one that I found useful throughout several years with emacs. However, it stopped working somewhere in version 27, with a number of glitches that were eventually recognized in the repo, but no fix was available.
Beacon candy Beacon was nice because it didn’t highlight the whole line, but only a gradient extending from your cursor, which would gently fade away (at least, that was the idea).</content>
		<author>
			<name>Tory Anderson</name>
			<uri>https://tech.toryanderson.com/tags/emacs/</uri>
		</author>
		<source>
			<title type="html">emacs on Tech.ToryAnderson.com</title>
			<subtitle type="html">Recent content in emacs on Tech.ToryAnderson.com</subtitle>
			<link rel="self" href="https://tech.toryanderson.com/tags/emacs/index.xml"/>
			<id>https://tech.toryanderson.com/tags/emacs/</id>
		</source>
	</entry>

	<entry>
		<title type="html">Emacs NYC: Online Meetup—Discussion:Remote Collaboration Software and crtd.el</title>
		<link href="http://emacsnyc.org/2021/09/23/online-meetup-discussionremote-collaboration-software-and-crtd-el.html"/>
		<id>http://emacsnyc.org/2021/09/23/online-meetup-discussionremote-collaboration-software-and-crtd-el</id>
		<updated>2021-09-23T23:47:45+00:00</updated>
		<content type="html">&lt;p&gt;
  
    Monday, Oct 4, 2021&lt;br /&gt;
    7:00 PM EDT (GMT-0400)
  
&lt;/p&gt;

&lt;p&gt;
  Join us online: &lt;a href="https://bbb.emacsverse.org/b/eri-4ol-yqd-7wq"&gt;https://bbb.emacsverse.org/b/eri-4ol-yqd-7wq&lt;/a&gt;&lt;br /&gt;
  Please join us using your favorite IRC client at #emacsnyc or use &lt;a href="https://webchat.freenode.net"&gt;webchat.freenode.net&lt;/a&gt; to join us online.
&lt;/p&gt;

&lt;p&gt;We're excited to have you join us for EmacsNYC a group of dedicated
lambda enthusiasts that come together once a month to share our mutual
joy of a piece of software that's over 40 years old.&lt;/p&gt;

&lt;p&gt;Whether you are first time user, long time contributor, software
developer, writer, or just curious what this is all about, you will
find an open and welcome community that is eager for you to be a
part.&lt;/p&gt;

&lt;p&gt;To create an environment that is welcoming,
  harrassment-free, and enjoyable to everyone, we have a
  &lt;a href="https://github.com/emacsnyc/meeting-logistics/blob/master/code-of-conduct.md"&gt;code-of-conduct&lt;/a&gt;
  that we following for every get together.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;During this discussion we’ll be focusing on collaboration software and techniques. Living in this remote world and even before collaboration has been invaluable. Having a good setup can make a huge difference.&lt;/p&gt;

&lt;p&gt;To help get us prepped for this a previous guest Qiantan Hong will be giving us a brief workshop on crdt.el, a project he debuted last year.&lt;/p&gt;

&lt;p&gt;Join us and learn about a new Emacs specific way to collaborate and share with us your own techniques and woes.&lt;/p&gt;</content>
		<author>
			<name>(emacs-nyc)</name>
			<uri>http://emacsnyc.org/</uri>
		</author>
		<source>
			<title type="html">(emacs-nyc)</title>
			<link rel="self" href="http://emacsnyc.org/atom.xml"/>
			<id>http://emacsnyc.org/</id>
		</source>
	</entry>

	<entry>
		<title type="html" xml:lang="en-US">Irreal: Drawing Diagrams in Emacs</title>
		<link href="https://irreal.org/blog/?p=9996"/>
		<id>https://irreal.org/blog/?p=9996</id>
		<updated>2021-09-23T16:45:42+00:00</updated>
		<content type="html" xml:lang="en-US">&lt;p&gt;Junji Zhi has an interesting post on &lt;a href="https://junjizhi.com/all/experience/2021/09/19/emacs-systems-thinking/"&gt;drawing diagrams in Emacs&lt;/a&gt;. He wanted to draw diagrams for system modeling and do it from within Emacs. There are several ways of accomplishing that but Zhi chose &lt;a href="https://mermaid-js.github.io/mermaid/#/"&gt;Mermaid&lt;/a&gt;. It basically provides a markup language for the diagram and then renders a PNG. It’s much like the &lt;a href="https://www.graphviz.org/doc/info/lang.html"&gt;Graphviz’s dot language&lt;/a&gt; that I usually use for this type of thing.&lt;/p&gt;
&lt;p&gt;For those who prefer a more visual approach, there’s &lt;a href="http://ditaa.sourceforge.net/"&gt;ditaa&lt;/a&gt;, which takes an ASCII art diagram and turns it into a very nice looking PNG picture. It’s really easy to use but I rarely turn to it because I find Emacs’ &lt;a href="https://www.emacswiki.org/emacs/ArtistMode"&gt;Artist Mode&lt;/a&gt; difficult to use. That’s probably because my manual dexterity is challenged even to the extent of dealing with—for most people—the excellent artist-mode.&lt;/p&gt;
&lt;p&gt;The point is, there is almost certainly a way of drawing a diagram in Emacs that you will find comfortable. I’ve never used Mermaid but it seems like a nice program that’s pretty easy to use. I’ll probably keep using &lt;code&gt;dot&lt;/code&gt; because I’m used to it and it’s similar to Mermaid. I’ve used &lt;code&gt;ditaa&lt;/code&gt; but mostly just as a test drive. If you’re good with artist-mode, &lt;code&gt;ditaa&lt;/code&gt; is a quick and easy way of getting a diagram without having to learn a markup language.&lt;/p&gt;
&lt;p&gt;As usual, Emacs lets you have it your way. Whichever way of drawing diagrams is most natural for you, Emacs has a package that supports it.&lt;/p&gt;</content>
		<author>
			<name>jcs</name>
			<uri>https://irreal.org/blog</uri>
		</author>
		<source>
			<title type="html">Emacs – Irreal</title>
			<subtitle type="html">The minds had long ago come up with a proper name for it; they called it the Irreal, but they thought of it as Infinite Fun. That was what they really knew it as. The Land of Infinite Fun. --Iain M. Banks, Excession</subtitle>
			<link rel="self" href="http://irreal.org/blog/?tag=emacs&amp;feed=rss2"/>
			<id>https://irreal.org/blog</id>
		</source>
	</entry>

	<entry>
		<title type="html">Alex Schroeder: The first programming language is English</title>
		<link href="https://alexschroeder.ch/wiki/2021-09-22_The_first_programming_language_is_English"/>
		<id>https://alexschroeder.ch/wiki/2021-09-22_The_first_programming_language_is_English</id>
		<updated>2021-09-23T04:48:11+00:00</updated>
		<content type="html">&lt;div class="e-content" lang="en"&gt;&lt;blockquote&gt;&lt;p&gt;One of these late nights again. I should sleep. We both should sleep. I’m typing on the laptop as fast as possible, trying to finish this post before she realizes that it is long past our bedtime, and I feel bad about that. She also does it, of course, but that thought is not helping.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt; I just saw a talk by &lt;a class="fediverse" href="https://merveilles.town/users/nasser"&gt;@nasser&lt;/a&gt; called “A Personal Computer for Children of All Cultures”, via a boost by &lt;a class="fediverse" href="https://merveilles.town/users/neauoire"&gt;@neauoire&lt;/a&gt;. It’s about English being the language you need to know if you want to program and how English names and its alphabet influence our thinking, our culture. It’s all over the world because it’s our current lingua franca, but it’s also a requirement if you want to be a programmer. If then else. Begin end. For loop print. Keywords are a problem. But also libraries. They way we build libraries these days is that the function names end up in the binaries. You cannot use the library without using the language of its authors, or using a translation layer. Their names are the real ones. If you translate them, your names are secondary names. From there we go to character encodings, and so on.&lt;/p&gt;&lt;p&gt;I remember deciding that I’d be Alex Schroeder instead of Schröder because I was using email when MIME messages were new. I was using computers at a time when ASCII was right and proper and the upper part, the bytes 128 to 255 would mean whatever, depending on your current code page or locale or font. The battles that had to be fought until people finally admitted that perhaps 7bit systems just had to go. The rage I saw when Emacs added multibyte buffers. ISO-2022 and friends is a way to encode text using escape sequences so that you can shift character encoding as you go, and there’s an option to do it all in 7 bits, too. It was hard, of course. Unicode was so much better. The anger around Han unification. Do you remember? Traditional Chinese, Simplified Chinese, Japanese Kanji, all using the same code points? And what about the 50,000 variants all over history? And that’s just the resistance in tech circles.&lt;/p&gt;&lt;p&gt;Anyway, the excellent example in Ramsey Nasser’s talk is how git manages to have all the canonical names be hashes and all the branches and tags and all that be in whatever language you want. The example he gives is a programming language where the symbols in the binaries just have hashes as names and the human-readable dictionary is a separate artifact that gets created. You could use a different language mapping, and use the same binary in your own programming.&lt;/p&gt;&lt;p&gt;Just last week I asked about the language convention in code comments for this new project I’m in. Everybody in this company speaks German. You cannot get a job in this company if you don’t speak German. Our customer for this new project speaks German. We are in the German speaking part of Switzerland. The official languages of Switzerland are German, French, Italian, and Rumantsch. But of course, you know how it goes. All code comments are to be in English. The customer specifies the label of a field in German. The class implementing gets an English name. The database column gets an English name. The translation layer uses an English key. The English used is often recognisably German. This is the programming culture we adopt when we train to be programmers.&lt;/p&gt;&lt;p&gt;The problem is also a problem of our culture. We have internalised the need for English because it permeates everything. It’s how we look for help online, because everybody else is also using English, of course. We ridicule efforts like translated Visual Basic because programmers run into problems running these problems on their English machines even though the users who wrote these programs for their own use in Excel or Word are happy. We forget that learning English imposes a cost just because we were willing and able to pay it, and we are justifiably proud of our achievement, but it still is a cost. When I see my German speaking friends in tabletop role-playing games struggling with English rule books, I start to remember. People are still paying the cost.&lt;/p&gt;&lt;p&gt;English is everywhere. It’s limitations are everywhere. Nobody thinks about bidirectional text, double width characters, mandatory ligatures, or vertical writing, when they start with ASCII characters. I certainly didn’t.&lt;/p&gt;&lt;p&gt;If you know me, you know I love Emacs. It is the great lisp machine that actually exists. You can also edit texts with it, but I mostly use it to browse stuff online, to listen to music, to chat, to manage files. It’s great. It’s self documenting. It comes with an English Emacs manual. It comes with an English Emacs Lisp manual. It comes with an English Emacs Lisp introduction. The functions and variables have English names. The functions and variables have English documentation strings. The menus are in English. It’s ideal for English reading programmers. I don’t know how to change that. I follow the same conventions in my code.&lt;/p&gt;&lt;p&gt;Und diesen deprimierenden Artikel habe ich ja auch auf Englisch geschrieben, wie auch mein Blog fast komplett auf Englisch geschrieben ist. Und schon gar nicht auf Französisch oder Portugiesisch. So trage ich zur Misere selber bei.&lt;/p&gt;&lt;p&gt;Here’s an interesting thought by &lt;a class="fediverse" href="https://octodon.social/users/wim_v12e"&gt;@wim_v12e&lt;/a&gt;:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;It goes further, most programming languages are based on English grammar as well. Even assembly language usually has verb-object syntax. This is one of the reasons that led me to create Haku, my Japanese programming language that I have been posting about recently: what happens if we use a different language with a different writing system and a different grammar?&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt; It does look interesting:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;A toy functional programming language based on literary Japanese. – &lt;a class="url https outside" href="https://codeberg.org/wimvanderbauwhede/haku"&gt;Haku, on Codeberg&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Now I’m trying to remember that programming language that looks like classical Chinese.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;文言, or wenyan, is an esoteric programming language that closely follows the grammar and tone of classical Chinese literature. – &lt;a class="url https outside" href="https://wy-lang.org/"&gt;文言 / wenyan‑lang&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;The new language’s developer, Lingdong Huang, previously designed an infinite computer-generated Chinese landscape painting. He also helped create the first and so far only AI-generated Chinese opera. He graduated with a degree in computer science and art from Carnegie Mellon University in December. – &lt;a class="url https outside" href="https://spectrum.ieee.org/classical-chinese"&gt;World's First Classical Chinese Programming Language, by Charles Q. Choi&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Then again, I don’t actually want to replace English with a different language. I want a multilingual world.&lt;/p&gt;&lt;p&gt;&lt;a class="outside tag" href="https://alexschroeder.ch/wiki?action=tag;id=English" rel="tag" title="Tag"&gt;#English&lt;/a&gt; &lt;a class="outside tag" href="https://alexschroeder.ch/wiki?action=tag;id=Languages" rel="tag" title="Tag"&gt;#Languages&lt;/a&gt; &lt;a class="outside tag" href="https://alexschroeder.ch/wiki?action=tag;id=Emacs" rel="tag" title="Tag"&gt;#Emacs&lt;/a&gt; &lt;a class="outside tag" href="https://alexschroeder.ch/wiki?action=tag;id=Programming" rel="tag" title="Tag"&gt;#Programming&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</content>
		<author>
			<name>Alex Schroeder</name>
			<uri>https://alexschroeder.ch/wiki/Emacs</uri>
		</author>
		<source>
			<title type="html">Alex Schroeder: Emacs</title>
			<subtitle type="html">The Homepage of Alex Schroeder.</subtitle>
			<link rel="self" href="https://alexschroeder.ch/wiki?action=journal;search=tag%3aemacs"/>
			<id>https://alexschroeder.ch/wiki/Emacs</id>
			<rights type="html">Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation.</rights>
		</source>
	</entry>

	<entry>
		<title type="html" xml:lang="en-us">Tory Anderson: Fail-fast Transients like Hydra</title>
		<link href="https://tech.toryanderson.com/2021/09/23/fail-fast-transients-like-hydra/"/>
		<id>https://tech.toryanderson.com/2021/09/23/fail-fast-transients-like-hydra/</id>
		<updated>2021-09-23T00:00:00+00:00</updated>
		<content type="html">Problem: exwm choking on Transients with Unbound suffix I have been gradually experimenting with replacing my hydras with Transients1, partly as a proof of concept. I have a show-stopping issue2 when I sometimes end up invoking the Transients from an EXWM window, however. The Transient pops up, but no key I press is then sent to the Transient and I end up trapped in a loop: Transient is expecting a key, which needs to be passed by EXWM, but EXWM can’t pass the right keys because Transient is intercepting them3.</content>
		<author>
			<name>Tory Anderson</name>
			<uri>https://tech.toryanderson.com/tags/emacs/</uri>
		</author>
		<source>
			<title type="html">emacs on Tech.ToryAnderson.com</title>
			<subtitle type="html">Recent content in emacs on Tech.ToryAnderson.com</subtitle>
			<link rel="self" href="https://tech.toryanderson.com/tags/emacs/index.xml"/>
			<id>https://tech.toryanderson.com/tags/emacs/</id>
		</source>
	</entry>

	<entry>
		<title type="html">Andrea: Moldable Emacs: extending the Playground powers via hooks (to include Dired)</title>
		<link href="http://ag91.github.io/blog/2021/09/23/moldable-emacs-extending-the-playground-powers-via-hooks-to-include-dired"/>
		<id>http://ag91.github.io/blog/2021/09/23/moldable-emacs-extending-the-playground-powers-via-hooks-to-include-dired</id>
		<updated>2021-09-23T00:00:00+00:00</updated>
		<content type="html"/>
		<author>
			<name>Andrea</name>
			<uri>http://ag91.github.io</uri>
		</author>
		<source>
			<title type="html">Where parallels cross</title>
			<subtitle type="html">Interesting bits of life</subtitle>
			<link rel="self" href="https://ag91.github.io/rss.xml"/>
			<id>http://ag91.github.io</id>
		</source>
	</entry>

	<entry>
		<title type="html" xml:lang="en-US">Irreal: Iteration with Elisp</title>
		<link href="https://irreal.org/blog/?p=9993"/>
		<id>https://irreal.org/blog/?p=9993</id>
		<updated>2021-09-22T18:26:27+00:00</updated>
		<content type="html" xml:lang="en-US">&lt;p&gt;John Kitchen has important things to do so naturally &lt;a href="https://twitter.com/johnkitchin/status/1440068644130607104?s=20"&gt;he’s procrastinating&lt;/a&gt;. That’s probably bad for him but it’s good for us because he has &lt;a href="https://www.youtube.com/watch?v=kk2W9krvNVg"&gt;another Elisp video&lt;/a&gt; up. This one considers various ways of iterating in Elisp. Earlier, he had posted a video on iteration in Python and this video considers the corresponding idioms in Elisp.&lt;/p&gt;
&lt;p&gt;To me, the most general (non-recursive) iteration technique in Lisp is the &lt;code&gt;do&lt;/code&gt; statement. It’s so powerful that &lt;a href="https://irreal.org/blog/?p=2430"&gt;you can do significant work even with an empty body&lt;/a&gt;. It’s powerful but not exactly transparent. Kitchin mostly focuses on the &lt;code&gt;cl-loop&lt;/code&gt; macro. It’s natural and seems to translate amazingly well into Python even though Elisp predates Python by many years.&lt;/p&gt;
&lt;p&gt;I’ve never been able to warm up to the &lt;code&gt;loop&lt;/code&gt; macro but Kitchen’s demonstration of its use is more persuasive than any polemic could be. Take a look at the video to see it in action. It can do all sorts of things in a natural way much as Python does with list comprehensions.&lt;/p&gt;
&lt;p&gt;Kitchin also considers using &lt;code&gt;while&lt;/code&gt;. You can specify an ending condition or you can exit from the while by throwing an exception. That’s Lisp’s version of the &lt;code&gt;break&lt;/code&gt; verb in other languages’ version of &lt;code&gt;while&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The other iteration method that I use a lot that Kitchin doesn’t mention is the &lt;code&gt;dolist&lt;/code&gt; macro. It’s sort of like a list comprehension but easier to use. In those situations where Kitchin uses &lt;code&gt;cl-loop&lt;/code&gt;, I’d be inclined to use &lt;code&gt;dolist&lt;/code&gt;. Still, Kitchin makes a good case for &lt;code&gt;cl-loop&lt;/code&gt; and has encouraged me to spend a bit of time getting more comfortable with it.&lt;/p&gt;
&lt;p&gt;The video is just short of 24 minutes so you’ll have to put some time aside for it but as usual with Kitchin’s videos, it’s worth it.&lt;/p&gt;</content>
		<author>
			<name>jcs</name>
			<uri>https://irreal.org/blog</uri>
		</author>
		<source>
			<title type="html">Emacs – Irreal</title>
			<subtitle type="html">The minds had long ago come up with a proper name for it; they called it the Irreal, but they thought of it as Infinite Fun. That was what they really knew it as. The Land of Infinite Fun. --Iain M. Banks, Excession</subtitle>
			<link rel="self" href="http://irreal.org/blog/?tag=emacs&amp;feed=rss2"/>
			<id>https://irreal.org/blog</id>
		</source>
	</entry>

	<entry>
		<title type="html">Tassilo Horn: Rcirc hack of the day: print timestamps less often</title>
		<link href="https://tsdh.org/posts/2021-09-22-rcirc-hack-of-the-day-print-timestamps-less-often.html"/>
		<id>https://tsdh.org/posts/2021-09-22-rcirc-hack-of-the-day-print-timestamps-less-often.html</id>
		<updated>2021-09-22T15:53:52+00:00</updated>
		<content type="html">&lt;p&gt;I use &lt;code&gt;rcirc&lt;/code&gt; for all my IRC needs and let it run on my server in a dedicated
Emacs instance hosted in a &lt;code&gt;tmux&lt;/code&gt; session.  That process usually runs for many
days or even weeks.&lt;/p&gt;
&lt;p&gt;By default, &lt;code&gt;rcirc&lt;/code&gt; puts a timestamp in the format &lt;code&gt;"HH:MM "&lt;/code&gt; in front of every
activity (someone writing a message, JOIN/PART/QUIT notifications, etc.).
That's allright when you are closely watching a channel.  However, it sometimes
happens that I ask something and eventually leave my tmux session and don't
come back for days.  When coming back, I might see I got a response and check
it out but it's hard to impossible to tell when (on which date) that response
has been given.&lt;/p&gt;
&lt;p&gt;So I've tried adding the date to &lt;code&gt;rcirc-time-format&lt;/code&gt; in addition to the time.
That works fine but is not satisfactory because it uses up so much vertical
screen estate.&lt;/p&gt;
&lt;p&gt;Then I thought that timestamps are pretty much irrelevant when there is a
heated discussion ongoing while they are quite interesting when there's not
much activity.  That brought me to the idea of hacking something together which
would suppress printing of timestamps for one minute after an activity so that
I have at most one timestamp per minute.&lt;/p&gt;
&lt;p&gt;The first thing is that I customized the timestamp format to contain both date
and time with a trailing newline so that they are printed on their own line
instead preceding the activity text.&lt;/p&gt;
&lt;pre style="background-color: #2b303b;"&gt;&lt;span style="color: #c0c5ce;"&gt;(&lt;/span&gt;&lt;span style="color: #96b5b4;"&gt;setq&lt;/span&gt;&lt;span style="color: #c0c5ce;"&gt; rcirc-&lt;/span&gt;&lt;span style="color: #96b5b4;"&gt;time&lt;/span&gt;&lt;span style="color: #c0c5ce;"&gt;-&lt;/span&gt;&lt;span style="color: #96b5b4;"&gt;format &lt;/span&gt;&lt;span style="color: #c0c5ce;"&gt;"&lt;/span&gt;&lt;span style="color: #a3be8c;"&gt;%F %H:%M&lt;/span&gt;&lt;span style="color: #96b5b4;"&gt;\n&lt;/span&gt;&lt;span style="color: #c0c5ce;"&gt;")
&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;The actual suppression of timestamps is implemented by the following function.&lt;/p&gt;
&lt;pre style="background-color: #2b303b;"&gt;&lt;span style="color: #c0c5ce;"&gt;(&lt;/span&gt;&lt;span style="color: #b48ead;"&gt;defun &lt;/span&gt;&lt;span style="color: #8fa1b3;"&gt;th&lt;/span&gt;&lt;span style="color: #c0c5ce;"&gt;/rcirc-suppress-timestamp-&lt;/span&gt;&lt;span style="color: #d08770;"&gt;1&lt;/span&gt;&lt;span style="color: #c0c5ce;"&gt;-min
&lt;/span&gt;&lt;span style="color: #c0c5ce;"&gt;    (process sender response target text)
&lt;/span&gt;&lt;span style="color: #c0c5ce;"&gt;  (&lt;/span&gt;&lt;span style="color: #b48ead;"&gt;let &lt;/span&gt;&lt;span style="color: #c0c5ce;"&gt;(&lt;/span&gt;&lt;span style="color: #65737e;"&gt;;; Find the buffer where the activity will be written to.
&lt;/span&gt;&lt;span style="color: #c0c5ce;"&gt;        (buffer (rcirc-target-buffer
&lt;/span&gt;&lt;span style="color: #c0c5ce;"&gt;                 process sender response target text))
&lt;/span&gt;&lt;span style="color: #c0c5ce;"&gt;        &lt;/span&gt;&lt;span style="color: #65737e;"&gt;;; Remember the default (customized) timestamp format.
&lt;/span&gt;&lt;span style="color: #c0c5ce;"&gt;        (ts (default-value 'rcirc-&lt;/span&gt;&lt;span style="color: #96b5b4;"&gt;time&lt;/span&gt;&lt;span style="color: #c0c5ce;"&gt;-&lt;/span&gt;&lt;span style="color: #96b5b4;"&gt;format&lt;/span&gt;&lt;span style="color: #c0c5ce;"&gt;)))
&lt;/span&gt;&lt;span style="color: #c0c5ce;"&gt;    &lt;/span&gt;&lt;span style="color: #65737e;"&gt;;; If the current rcirc-time-format is not "" and...
&lt;/span&gt;&lt;span style="color: #c0c5ce;"&gt;    (&lt;/span&gt;&lt;span style="color: #b48ead;"&gt;when &lt;/span&gt;&lt;span style="color: #c0c5ce;"&gt;(and (not (&lt;/span&gt;&lt;span style="color: #96b5b4;"&gt;string&lt;/span&gt;&lt;span style="color: #c0c5ce;"&gt;-empty-p rcirc-&lt;/span&gt;&lt;span style="color: #96b5b4;"&gt;time&lt;/span&gt;&lt;span style="color: #c0c5ce;"&gt;-&lt;/span&gt;&lt;span style="color: #96b5b4;"&gt;format&lt;/span&gt;&lt;span style="color: #c0c5ce;"&gt;))
&lt;/span&gt;&lt;span style="color: #c0c5ce;"&gt;               &lt;/span&gt;&lt;span style="color: #65737e;"&gt;;; ... rcirc-omit-mode is disabled or ...
&lt;/span&gt;&lt;span style="color: #c0c5ce;"&gt;               (or (&lt;/span&gt;&lt;span style="color: #d08770;"&gt;null&lt;/span&gt;&lt;span style="color: #c0c5ce;"&gt; rcirc-omit-mode)
&lt;/span&gt;&lt;span style="color: #c0c5ce;"&gt;                   &lt;/span&gt;&lt;span style="color: #65737e;"&gt;;; ... the current response is not omitted...
&lt;/span&gt;&lt;span style="color: #c0c5ce;"&gt;                   (not (&lt;/span&gt;&lt;span style="color: #96b5b4;"&gt;member&lt;/span&gt;&lt;span style="color: #c0c5ce;"&gt; response rcirc-omit-responses))))
&lt;/span&gt;&lt;span style="color: #c0c5ce;"&gt;      &lt;/span&gt;&lt;span style="color: #65737e;"&gt;;; ... then set rcirc-time-format to the empty string
&lt;/span&gt;&lt;span style="color: #c0c5ce;"&gt;      &lt;/span&gt;&lt;span style="color: #65737e;"&gt;;; buffer-locally and ...
&lt;/span&gt;&lt;span style="color: #c0c5ce;"&gt;      (&lt;/span&gt;&lt;span style="color: #96b5b4;"&gt;set&lt;/span&gt;&lt;span style="color: #c0c5ce;"&gt;-buffer buffer)
&lt;/span&gt;&lt;span style="color: #c0c5ce;"&gt;      (&lt;/span&gt;&lt;span style="color: #96b5b4;"&gt;setq&lt;/span&gt;&lt;span style="color: #c0c5ce;"&gt;-local rcirc-&lt;/span&gt;&lt;span style="color: #96b5b4;"&gt;time&lt;/span&gt;&lt;span style="color: #c0c5ce;"&gt;-&lt;/span&gt;&lt;span style="color: #96b5b4;"&gt;format &lt;/span&gt;&lt;span style="color: #c0c5ce;"&gt;"")
&lt;/span&gt;&lt;span style="color: #c0c5ce;"&gt;      &lt;/span&gt;&lt;span style="color: #65737e;"&gt;;; ... restore the original value after 60 seconds.
&lt;/span&gt;&lt;span style="color: #c0c5ce;"&gt;      (run-at-&lt;/span&gt;&lt;span style="color: #96b5b4;"&gt;time &lt;/span&gt;&lt;span style="color: #d08770;"&gt;60 nil &lt;/span&gt;&lt;span style="color: #c0c5ce;"&gt;(&lt;/span&gt;&lt;span style="color: #96b5b4;"&gt;lambda &lt;/span&gt;&lt;span style="color: #c0c5ce;"&gt;()
&lt;/span&gt;&lt;span style="color: #c0c5ce;"&gt;                            (&lt;/span&gt;&lt;span style="color: #96b5b4;"&gt;set&lt;/span&gt;&lt;span style="color: #c0c5ce;"&gt;-buffer buffer)
&lt;/span&gt;&lt;span style="color: #c0c5ce;"&gt;                            (&lt;/span&gt;&lt;span style="color: #96b5b4;"&gt;setq&lt;/span&gt;&lt;span style="color: #c0c5ce;"&gt;-local rcirc-&lt;/span&gt;&lt;span style="color: #96b5b4;"&gt;time&lt;/span&gt;&lt;span style="color: #c0c5ce;"&gt;-&lt;/span&gt;&lt;span style="color: #96b5b4;"&gt;format&lt;/span&gt;&lt;span style="color: #c0c5ce;"&gt; ts))))))
&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;That function needs to be added to &lt;code&gt;rcirc-print-functions&lt;/code&gt; so that it's invoked
after each insertion of text into an rcirc buffer.&lt;/p&gt;
&lt;pre style="background-color: #2b303b;"&gt;&lt;span style="color: #c0c5ce;"&gt;(add-hook 'rcirc-&lt;/span&gt;&lt;span style="color: #96b5b4;"&gt;print&lt;/span&gt;&lt;span style="color: #c0c5ce;"&gt;-functions &lt;/span&gt;&lt;span style="color: #d08770;"&gt;#'th/rcirc-suppress-timestamp-1-min&lt;/span&gt;&lt;span style="color: #c0c5ce;"&gt;)
&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;And that's how it looks.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Screenshot showing rcirc" src="https://tsdh.org/rcirc-timestamp-at-most-once-per-minute.png" /&gt;&lt;/p&gt;
&lt;p&gt;That's it!&lt;/p&gt;</content>
		<author>
			<name>Tassilo Horn</name>
			<uri>https://tsdh.org</uri>
		</author>
		<source>
			<title type="html">tsdh.org</title>
			<subtitle type="html">tsdh's homepage and blog</subtitle>
			<link rel="self" href="https://tsdh.org/rss.xml"/>
			<id>https://tsdh.org</id>
		</source>
	</entry>

	<entry>
		<title type="html" xml:lang="en-us">TAONAW: Refreshing my Capture Templates</title>
		<link href="https://helpdeskheadesk.net/help-desk-head-desk/2021-09-19/"/>
		<id>https://helpdeskheadesk.net/help-desk-head-desk/2021-09-19/</id>
		<updated>2021-09-22T04:00:00+00:00</updated>
		<content type="html">&lt;p&gt;Originally, I wanted to write a new post about updates to my capture templates. As I was looking into the differences I’ve made over time, I thought it would be a better idea to add these changes at the bottom of the original posts.&lt;/p&gt;
&lt;p&gt;My capture templates are mentioned in three parts: &lt;a href="https://helpdeskheadesk.net/help-desk-head-desk/org-capture-template-1/"&gt;1&lt;/a&gt;, &lt;a href="https://helpdeskheadesk.net/help-desk-head-desk/org-capture-template-2/"&gt;2&lt;/a&gt;, and &lt;a href="https://helpdeskheadesk.net/help-desk-head-desk/org-capture-template-3/"&gt;3&lt;/a&gt;. I’ve included an updated section in the second part. Additional capture goodness is &lt;a href="https://helpdeskheadesk.net/help-desk-head-desk/org-capture-in-files/"&gt;here&lt;/a&gt; and &lt;a href="https://helpdeskheadesk.net/help-desk-head-desk/sub-menus-in-org/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Capture is the essence of org-mode to me. It’s where everything starts: a task at work. A thought to write down. A year-long exercise project or a simple reminder to do laundry, it’s all about writing it down first. Capturing it.&lt;/p&gt;</content>
		<author>
			<name>TAONAW</name>
			<uri>https://helpdeskheadesk.net/tags/orgmode/</uri>
		</author>
		<source>
			<title type="html">orgmode on The Art of Not Asking Why</title>
			<subtitle type="html">Recent content in orgmode on The Art of Not Asking Why</subtitle>
			<link rel="self" href="https://helpdeskheadesk.net/tags/orgmode/index.xml"/>
			<id>https://helpdeskheadesk.net/tags/orgmode/</id>
		</source>
	</entry>

	<entry>
		<title type="html">Protesilaos Stavrou: Live stream: Emacs and the Unix philosophy</title>
		<link href="https://protesilaos.com/codelog/2021-09-22-live-stream-emacs-unix/"/>
		<id>https://protesilaos.com/codelog/2021-09-22-live-stream-emacs-unix/</id>
		<updated>2021-09-22T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;Raw link: &lt;a href="https://www.youtube.com/watch?v=FmOYj0SyKfg"&gt;https://www.youtube.com/watch?v=FmOYj0SyKfg&lt;/a&gt;&lt;/p&gt;
         
         &lt;p&gt;This was a live stream that got recorded.  It started on 2021-09-26
13:00 +0300 and lasted for about two hours.&lt;/p&gt;

&lt;p&gt;I talked about the persistent question of how Emacs conforms with the
Unix philosophy, what it means for a set of views to constitute a
philosophy, whether those tenets are generalisable, and what lessons may
be learnt from them for our day-to-day computing.&lt;/p&gt;

&lt;p&gt;After the presentation was concluded, I joined the live chat for further
comments on a variety of issues.&lt;/p&gt;

&lt;p&gt;The text of my talk is copied below.  It is written in Org notation:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-org"&gt;#+TITLE: Live: Emacs and the Unix philosophy
#+AUTHOR: Protesilaos Stavrou (https://protesilaos.com)
#+DATE: 2021-09-26

* How I approach the Emacs VS Unix problématique

Hello everyone!  My name is Protesilaos, also known as "Prot".  In this
live stream, which is being recorded as well, I will talk to you about
the Unix philosophy and how Emacs conforms with it while addressing its
main usability flaw.  The show notes are available on my website:
https://protesilaos.com/codelog/2021-09-22-live-stream-emacs-unix/

My approach to today's topic is informed by my experience as someone who
had used a combination of a tilling window manager, Tmux, Vim, various
ncurses-based programs (e.g. Mutt), and command-line utilities for years
before consolidating around GNU Emacs.  My perspective is further
informed by my background as a social scientist and, ultimately, a
philosopher.  Not as a programmer, though these days I do code a lot for
recreational or educational purposes.

In this presentation I will make arguments against dogmatism; against
misunderstandings in what Unix stands for and how it must work in the
real world.  I will also critically assess the vaunted notions of
minimalism and so-called "bloat" as they pertain to software and discuss
what the appropriate attitude should be when thinking about this and
concomitant issues.  The key word is "attitude": the disposition we
ought to have in order to avoid becoming dogmatic.

This is my second video on the topic.  I did one a couple of years ago,
shortly after I switched to Emacs.  I have also published an article:

+ Emacs mindset and Unix philosophy:
  https://protesilaos.com/codelog/2019-08-09-vlog-emacs-unix/
+ Comment on Unix versus Emacs:
  https://protesilaos.com/codelog/2020-12-28-comment-unix-vs-emacs/

The reason I am doing this again is because I keep getting questions
about my experience with Emacs; questions which typically reveal
deep-seated assumptions that are either outright untrue or ill
considered.

In short, much of this talk will be about theoretical issues.  While I
understand that coding is a technical endeavour, I still believe there
are important insights to be drawn from theoretical work; insights which
will eventually find their application in everyday scenaria.  Besides,
we cannot afford to assume the Unix philosophy as a technical constant
when it clearly is formulated as a /philosophy/.

Finally, note that I will participate in the live chat after I conclude
this presentation.  If you have any questions related to today's topic
or any other subject I cover on my website (https://protesilaos.com),
please let me know.

* Unix minimalism is not a dogma

The Unix philosophy consists of teachings that are based on decades of
experience with systems programming.  Those are encapsulated in the KISS
principle of engineering: Keep It Simple Stupid (or variants).

Unix values specialised tools that can interface with each other to
contribute to emergent workflows.  Its brand of minimalism rests on the
practical consideration of maintainability: both with regard to fixing
bugs and conserving programmer time.  The Unix philosophy prioritises
modularity and composability over monolith-like implementations.  Simple
designs can adapt to evolving circumstances while those that make all
sorts of assumptions and have lots of explicit or implicit dependencies
are unsustainable over the long-term.

Unix programmers did not invent all the concepts associated with their
philosophy.  Humanity had discovered them through aeons of continuous
experimentation and practical reasonableness.  And what better teacher
than the vastness of life all around us?  Natural systems consist of
subsystems, just like our body, forests, oceans, and so on.  In nature
we find division of labour or else the separation of concerns,
specialisation and compartmentalisation, composition of localised
patterns into emergent phenomena...  Everything.

This is not to discount the contributions of Unix, but rather to couch
them in terms of the wider milieu in which we operate.  By framing it
this way, we are better prepared to let go of views that are ultimately
detrimental to our life.  Such as the dogmatic belief that the Unix
philosophy is impeccable and must not be criticised.

Dogma is the misrepresentation of a context-dependent insight as a
universal truth.  In practical terms: when you find yourself not
listening to a counterpoint, consider whether you are giving the other
side a fair chance.  If not, you are most likely being dogmatic.

The Unix philosophy is not the undisputed source of truth.  As with
every corpus of thought, what we learn from Unix remains open to
interpretation.  This means that its followers must assume a sceptical
disposition.  They have to remain open-minded about cases where the
principles of their tradition should not be followed to the letter.  The
practitioner has to exercise judgement and use their discretion to find
the right answer for the task at hand.  Dogma is the enemy of every
school of thought.

Consider the difference between the disciple and the grandmaster.  The
student knows how to faithfully abide by all the precepts of their
tradition.  Whereas the grandmaster not only applies the rules but
understands their underpinnings and thus knows when to suspend their
application and why.  In other words, the student is prone to dogmatism
because of their enthusiasm coupled with their lack of perspective.

* Emacs conforms with the Unix philosophy

In analytical terms, Emacs has two facets to its being:

+ The Lisp interpreter :: We must think of it as the equivalent of a
  POSIX shell like =#!/bin/sh= or whatever environment we use to execute
  scripts.  With Emacs we run or "evaluate" Emacs Lisp code (Elisp).
  That is all we can do with it.
+ The interactive environment :: This is the counterpart of command-line
  shells like =bash=, with the difference being that its event loop, which
  is its interactivity, is more pronounced.  Simply put, Emacs is like a
  shell with superpowers, which looks a text editor upon first sight.
  And this is possible because it is built on top of the interpreter.

Those two aspects of Emacs are woven together into the same application,
making it a /computing environment/ rather than yet another text editor or
IDE.  Still, the analytical distinction is important in light of the
Unix philosophy.  As I already noted, Unix is all about sharp and
specialised tools that can be combined with one another: modularity and
composability.  Emacs is such a tool through its Lisp interpreter.

Just as it is perfectly fine to have a shell interpreter with which to
run arbitrary scripts, it is acceptable to have a Lisp machine for the
purposes of evaluating Lisp.  Similarly, it is customary to run an
interactive shell inside of a terminal emulator.  By the same token, it
is perfectly reasonable to use Emacs' own interactive environment to
interface with the Lisp interpreter.

Emacs should not be compared to Desktop Environments like GNOME or KDE,
or to tilling window managers such as i3, BSPWM, etc.  The reason is
that those are wrappers of otherwise disparate programs.  They basically
bundle different processes inside of a main session, where the joint
presence of distinct applications is a mere coincidence.

In contradistinction, Emacs only runs Elisp and what happens inside of
Emacs participates in the same environment.  This is best understood by
means of an example: if I want to change the font size in my current
BSPWM session, I have to edit the configuration file of my terminal
emulator, my settings daemon for GTK apps, Firefox, and so on.  In other
words, those applications do not know that they are all subprocesses of
the BSPWM session.  Whereas in Emacs, if I change the font size, the
effect is propagated across the entire Emacs environment.

This means that not only does Emacs conform with the Unix philosophy,
but it also has the potential to address its main flaw.  By following
Unix precepts we often find ourselves in scenaria where there is no
integration between the programs we use.  While Emacs ensures that we
get a singular experience /without hacks/: the same commands, the same
fonts and colours, the same paradigms of interaction, and so on.  This
makes Emacs an /integrated computing environment/.

* The integration that Emacs offers is not "bloat"

Which brings us to the dubious notion of bloat in software.  You will
find self-professed proponents of the Unix philosophy dismissing the
value proposition of Emacs on the premise that it is just doing too much
and thus does not abide by the tenets of the Unix faith.  This stems
from the misunderstanding of treating Emacs as a text editor.  Which
naturally raises questions, such as "why should Emacs ever be my Git
front-end, when I already have the command-line?" or "why use Emacs'
windows when Tmux is specialised in multiplexing?".

This is why I stressed that Emacs is a Lisp interpreter that only does
one thing: evaluate Lisp.  And so it is capable of all those wonderful
workflows like editing code, handling your agenda, doing presentations
with plain text like this one, and so on.  If you cavalierly talk about
bloat in Emacs, you are effectively making the argument that =#!/bin/sh=
is at fault because of what shell scripts the user may be running.

Then we have another problem with those who criticise Emacs from a
position of, dare I say, ignorance or based on rumours and hearsay.  And
that is that they themselves do not follow the simulacrum of the Unix
philosophy that is their dogma.  What I mean by that is that you will
often find them using Vim as their text editor.  Last time I checked,
Vim can do multiplexing, it has a concept of workspaces or tabs, it can
spawn a terminal with the =:term= command, and so on.  If you think that
Emacs violates the Unix tradition because it too can do the things that
Vim does, then why do you use Vim?  Why aren't you doing everything with
=ed= or perhaps =sed=?  Or, at the very least, why are you not switching to
=vi=, which is closer to what you claim to stand for.

Maybe then the problem is that you have misunderstood Unix altogether
and are being dogmatic.  Take a pause and think how your totalising
claims are detrimental to your own computing experience: if you follow
them to the letter, you will be missing out on quality-of-life advances
in software.  For what?  Plus you will be tacitly holding that the Unix
tradition is flawless, which is nonsense.

Make no mistake: Vim, Tmux, Mutt, Newsboat, tilling window managers are
all excellent programs in their own right.  But what about their
combination?  What about the /gestalt/?  They lack integration.  To
configure Vim you use Vimscript, Tmux has something like a shell syntax,
Mutt and Newsboat use something else, your window manager may
communicate with shell commands or might require editing a C header
file, and so on.  It is a bit of everything.  And their joint operation
is a mere coincidence, as I already explained: they do not share a
common basis.  Whereas Emacs only knows how to interpret Elisp and all
you do inside of it is an extension of that basic principle, to the
effect that you get what every GNU/Linux power user actually wants: a
singular computing experience that minimises the distance between their
mind and what the machine is doing.  What better minimalism than that?

* Understanding minimalism in context

Let's now consider minimalism as such.  I define minimalism as the
attitude of achieving minimum viable sufficiency for a given task.

To test whether something is minimalist, we must know what it is
designed to do.  Design, however, has two sides to it.  The first is
what the designer thinks is the telos.  The second is what the user
considers as the end goal of the design.

As an example, imagine a sword.  The smith who forged it fathomed a
telos where the sword is fit as a weapon or, at the very least, that it
has a cutting edge.  Now suppose that some collector buys this item and
installs it on their wall for decorative purposes, perhaps to show their
wealth and social status.  To understand the utility and end goal of
this sword, we have to account for the context or, as I say, for the
constitution of the case.  And that is because nothing has a standalone
presence: it always exists in a given context which contributes to its
actuality.

[ Read (among others): On role and actuality
  (https://protesilaos.com/books/2021-04-15-role-actuality/) ]

The same goes for minimalism, whether it is about software or not.  When
we assess the minimum viable sufficiency for a given task, we have to
consider the foresight of the designer or developer but also try to
anticipate the expectations of users.  In other words, there is no
innate minimalism; minimalism that is intrinsic to an otherwise
decontextualised thing.  We must always look at the context.

Allow me to tell you a personal experience with markdown editors from
the days I first switched to GNU/Linux in mid-2016.  I wanted something
that could centre text on the screen like how I am doing it in this
presentation.  It should also have spell checking for English and Greek.
And it should let me configure the colours on display and the size of
the fonts.  So I found several self-styled minimalist apps which would
lack at least one of those basic features.  Now you may think that
changing colours is "bloat", but to me it is a key usability feature,
especially when the designer has not considered applying good colour
contrast for legibility, else accessibility (by the way, I am the author
of the =modus-themes= which are also built into Emacs version 28---they
are designed for the highest legibility standard).

When software calls itself minimalist, it sometimes means that it
actually is incomplete and has not reached the state of minimum viable
sufficiency for the tasks it seeks out to accomplish.  And, by the by, I
will let you connect the dots when marketing folks peddle "minimalism".

* You don't have to switch to Emacs, though you might want to

In conclusion, I encourage you to exercise judgement when thinking about
how some philosophy influences your day-to-day experience.  Do not let
yourself fall into the trap of dogmatism and become a victim of your own
misunderstandings.  In practical terms, always give the other side of
the argument the benefit of the doubt, always keep an open mind, and
always maintain a dubitative and inquisitive disposition.

Emacs is all about integration.  And I already gave some examples, but
let me add another one here.  In Emacs, we have commands to introspect
the environment.  So I can invoke a command which tells me what a key
combination does (=describe-key=).  Or I can call another command which
informs me to which keys is a certain function bound to (=where-is=).
Whereas in my otherwise Unix-y tilling window manager, I have no
built-in way to introspect what the hotkey daemon (=sxhkd=) does when I
type in a certain key chord.  Similarly, my terminal emulator has no
such capabilities, nor do the programs that run inside of it like Vim
and Mutt.  Finding what you want is part of the reason you are using a
computer, so that you do not have to memorise everything.

Basic functionality does not really need that degree of homogeneity.
For instance, =grep= and =sed= get the job done perfectly well, whether
independently or in tandem.  The importance of integration becomes
evident when you operate at a higher level of emergence, where things
must work in concert for optimal results.

To me the Unix philosophy is very important.  It is what inspires me to
separate my programs based on their scope and, more generally, to avoid
duplication of effort.  It also guides me to pursue minimalist solutions
which are fit for their purpose.  I also am, however, a pragmatist who
understands that the Unix tradition is not a dogma.  We can find cases
where improvements can be made to it, such as with the integration of
applications.  When we have a layer of interconnectedness, such as the
one provided by Emacs, we get more consistent results for emergent
workflows, which ultimately lead to a superior end-user experience.

So, should you switch to Emacs?  The answer is "it depends".  If you
need a singular experience that allows you to draw linkages between your
various workflows, then I would say "yes".  Otherwise it really is up to
you.  Whatever you do, however, do it from a position of knowledge, with
a clear purpose, and remain committed to it.  Do not follow trends or
pernicious memes without applying common sense.  Emacs has a learning
curve, but so do all the disparate programs that are glued together in
an ad-hoc fashion in some GNU/Linux power user's setup.  You have to
work for the good things.

That's all for today's presentation, folks.  Now I will check the chat
and comment on any questions or remarks.  Thank you!
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;The video thumbnail is a tweak of the Levitating, Meditating,
Flute-playing Gnu under the terms of the GNU General Public License:
&lt;a href="https://www.gnu.org/graphics/meditate.html"&gt;https://www.gnu.org/graphics/meditate.html&lt;/a&gt;.&lt;/p&gt;</content>
		<author>
			<name>Protesilaos Stavrou</name>
			<uri>https://protesilaos.com/codelog</uri>
		</author>
		<source>
			<title type="html">Protesilaos Stavrou: Coding blog</title>
			<subtitle type="html">Coding blog</subtitle>
			<link rel="self" href="https://protesilaos.com/codelog.xml"/>
			<id>https://protesilaos.com/codelog</id>
		</source>
	</entry>

	<entry>
		<title type="html">FrostyX: Building RHEL packages with Tito</title>
		<link href="http://frostyx.cz/posts/building-rhel-packages-with-tito"/>
		<id>http://frostyx.cz/posts/building-rhel-packages-with-tito</id>
		<updated>2021-09-22T00:00:00+00:00</updated>
		<content type="html">&lt;p&gt;Are you a Fedora packager and consider &lt;a href="https://github.com/rpm-software-management/tito"&gt;Tito&lt;/a&gt; to be a valuable
asset in your toolbox? Do you know it can be used for maintaining RHEL
packages as well? Or any downstream packaging? I didn’t. This article
explains how it can be done.&lt;/p&gt;

&lt;div class="alert alert-warning"&gt;
Disclaimer: I maintain a dozen of Fedora packages for years but I am
fairly new to RHEL packaging. I do not claim to be an expert or an
authority on this topic. This article is subjective and describes my
personal workflow for updating RHEL packages.
&lt;/div&gt;

&lt;h2 id="fedora-vs-rhel-packaging"&gt;Fedora vs RHEL packaging&lt;/h2&gt;

&lt;p&gt;Apart from different hostnames, service names, and a great focus on
quality assurance, there is only one difference relevant to the topic
at hand. That is, in the majority of cases (unless there is a good
reason to do so), the package sources tarball is not being changed
within an RHEL major release. While this may sound insignificant, it
is the only reason for this whole article, so let me elaborate.&lt;/p&gt;

&lt;p&gt;We have an imaginary upstream project &lt;code class="language-plaintext highlighter-rouge"&gt;foo&lt;/code&gt; in version &lt;code class="language-plaintext highlighter-rouge"&gt;1.0&lt;/code&gt;. This
project gets packaged into Fedora as &lt;code class="language-plaintext highlighter-rouge"&gt;foo-1.0-1&lt;/code&gt; (i.e. package name is
&lt;code class="language-plaintext highlighter-rouge"&gt;foo&lt;/code&gt;, its upstream version is &lt;code class="language-plaintext highlighter-rouge"&gt;1.0&lt;/code&gt; and this is the first release of
this version in Fedora). When this package gets included in RHEL, its
NVR is going to be the same, &lt;code class="language-plaintext highlighter-rouge"&gt;foo-1.0-1&lt;/code&gt;. So far there is no
difference.&lt;/p&gt;

&lt;p&gt;Updating this package is when it gets tricky. Upstream publishes
version &lt;code class="language-plaintext highlighter-rouge"&gt;1.1&lt;/code&gt;. In Fedora, we take the new upstream sources as they
are, and build a package &lt;code class="language-plaintext highlighter-rouge"&gt;foo-1.1-1&lt;/code&gt; on top of them. In RHEL, we want
to avoid changing the sources. Instead, we create a patch (or series
of patches) that modifies the original sources into the newly
published ones. Therefore the new package in RHEL will be &lt;code class="language-plaintext highlighter-rouge"&gt;foo-1.0-2&lt;/code&gt;
(the version number remains the same, release is incremented).&lt;/p&gt;

&lt;p&gt;We can choose to do all this patching labor manually or let
&lt;a href="https://github.com/rpm-software-management/tito"&gt;Tito&lt;/a&gt; help us.&lt;/p&gt;

&lt;h2 id="initial-setup"&gt;Initial setup&lt;/h2&gt;

&lt;p&gt;This initial setup needs to be done only once for each package. It’s a
bit lengthy but the payoff is worth it.&lt;/p&gt;

&lt;h3 id="create-an-intermediate-git-repository"&gt;Create an intermediate git repository&lt;/h3&gt;

&lt;p&gt;First, create an empty git repository on some internal forge
(e.g. GitLab) and clone it to your computer.&lt;/p&gt;

&lt;div class="language-bash highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;git clone git@some-internal-url.com:bar/foo.git ~/git/rhel/foo
&lt;span class="nb"&gt;cd&lt;/span&gt; ~/git/rhel/foo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In case that you use a different email address for internal purposes,
configure your git credentials.&lt;/p&gt;

&lt;div class="language-bash highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;git config user.name &lt;span class="s2"&gt;"John Doe"&lt;/span&gt;
git config user.email &lt;span class="s2"&gt;"jdoe@company.ex"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Add an upstream repository as a new &lt;em&gt;remote&lt;/em&gt; for this git
project. We will use this &lt;em&gt;remote&lt;/em&gt; only for pulling, so make sure to
use its HTTPS variant instead of the SSH one. It will help us prevent
accidental pushing of sensitive information out to the world.&lt;/p&gt;

&lt;div class="language-bash highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;git remote add upstream https://github.com/bar/foo.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Pull everything from upstream.&lt;/p&gt;

&lt;div class="language-bash highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;git fetch &lt;span class="nt"&gt;--all&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Go and see what is the version (ignore the release number) of our
package in RHEL, and point the &lt;code class="language-plaintext highlighter-rouge"&gt;main&lt;/code&gt; branch to the Tito tag
associated with this version. For example, if the package name is
&lt;code class="language-plaintext highlighter-rouge"&gt;foo&lt;/code&gt; and its version is &lt;code class="language-plaintext highlighter-rouge"&gt;1.5-3&lt;/code&gt;, run the following command.&lt;/p&gt;

&lt;div class="language-bash highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;git reset &lt;span class="nt"&gt;--hard&lt;/span&gt; foo-1.5-1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And finally, push everything to the internal repository.&lt;/p&gt;

&lt;div class="language-bash highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;git push &lt;span class="nt"&gt;--follow-tags&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id="configure-tito"&gt;Configure Tito&lt;/h3&gt;

&lt;p&gt;Edit the &lt;code class="language-plaintext highlighter-rouge"&gt;.tito/tito.props&lt;/code&gt; file and update the &lt;code class="language-plaintext highlighter-rouge"&gt;builder&lt;/code&gt; and &lt;code class="language-plaintext highlighter-rouge"&gt;tagger&lt;/code&gt;
variables accordingly.&lt;/p&gt;

&lt;div class="language-python highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;builder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tito&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;distributionbuilder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DistributionBuilder&lt;/span&gt;
&lt;span class="n"&gt;tagger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tito&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tagger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReleaseTagger&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class="language-plaintext highlighter-rouge"&gt;DistributionBuilder&lt;/code&gt; handles the patches generation (from the
current RHEL version into the latest upstream version) when building a
package. The &lt;code class="language-plaintext highlighter-rouge"&gt;ReleaseTagger&lt;/code&gt; increments release number instead of
a version number when tagging a new package.&lt;/p&gt;

&lt;p&gt;Edit the &lt;code class="language-plaintext highlighter-rouge"&gt;.tito/releasers.conf&lt;/code&gt; and append the following releaser.&lt;/p&gt;

&lt;div class="language-ini highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="nn"&gt;[rhel]&lt;/span&gt;
&lt;span class="py"&gt;releaser&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;tito.release.DistGitReleaser&lt;/span&gt;
&lt;span class="py"&gt;branches&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;rhel-8.5.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this example I am specifying &lt;code class="language-plaintext highlighter-rouge"&gt;rhel-8.5.0&lt;/code&gt; branch, please insert
the branch that you maintain your package in. In the case of multiple
branches, use spaces as separators.&lt;/p&gt;

&lt;h2 id="update-the-spec-file"&gt;Update the spec file&lt;/h2&gt;

&lt;p&gt;There may be some RHEL specific changes to our package spec file in
the internal DistGit, that we wouldn’t like to get lost. Let’s assume
that the latest upstream version is &lt;code class="language-plaintext highlighter-rouge"&gt;1.7-1&lt;/code&gt; and the latest RHEL
version is &lt;code class="language-plaintext highlighter-rouge"&gt;1.5-3&lt;/code&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Find the spec file for your package in the internal DistGit service&lt;/li&gt;
  &lt;li&gt;Append (from the top) all the changelog entries recorded between
&lt;code class="language-plaintext highlighter-rouge"&gt;1.5-1&lt;/code&gt; and &lt;code class="language-plaintext highlighter-rouge"&gt;1.5-3&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Set the current RHEL release number. In this example
&lt;code class="language-plaintext highlighter-rouge"&gt;Release: 3%{?dist}&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Perform any additional changes that were made in the RHEL spec file&lt;/li&gt;
  &lt;li&gt;In case the RHEL spec file contains some RHEL-specific patches, do
&lt;strong&gt;not&lt;/strong&gt; copy the patch files and add &lt;code class="language-plaintext highlighter-rouge"&gt;PatchN:&lt;/code&gt; records in the spec
file. Instead, perform those changes directly in this repository
and commit them.&lt;/li&gt;
  &lt;li&gt;Commit all the changes that we made to the spec file and in the
&lt;code class="language-plaintext highlighter-rouge"&gt;.tito&lt;/code&gt; configuration directory&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id="cherry-pick-upstream-changes"&gt;Cherry-pick upstream changes&lt;/h2&gt;

&lt;p&gt;Now, we are going to cherry-pick the upstream changes that we would
like to include in RHEL. Let’s see what changes were made between the
version we have in RHEL and the upstream one.&lt;/p&gt;

&lt;div class="language-bash highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;git log master..upstream/master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For each commit that you want in RHEL, run&lt;/p&gt;

&lt;div class="language-bash highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;git cherry-pick &amp;lt;&lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It is a good idea to avoid commits generated by Tito or any commits
incrementing the version number or modifying the changelog.&lt;/p&gt;

&lt;h2 id="build-and-test-the-package-locally"&gt;Build and test the package locally&lt;/h2&gt;

&lt;p&gt;To make sure we made all changes correctly, we are going to build the
package locally and test it works as expected before irreversibly
pushing anything to DistGit and eventually embarrassing ourselves with
amends.&lt;/p&gt;

&lt;div class="language-bash highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;tito build &lt;span class="nt"&gt;--srpm&lt;/span&gt; &lt;span class="nt"&gt;--test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Build the package locally in Mock, or in the internal Copr instance
which provides an actual RHEL chroots.&lt;/p&gt;

&lt;div class="language-plaintext highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;mock -r rocky-8-x86_64 /tmp/tito/foo-1.5-3.git.0.da1346d.fc33.src.rpm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Examine the built package, try to install it (in Docker, Mock, etc)
and test that it works as expected.&lt;/p&gt;

&lt;h2 id="push-the-changes"&gt;Push the changes&lt;/h2&gt;

&lt;p&gt;If you are sure, tag the package, and push the changes.&lt;/p&gt;

&lt;div class="language-bash highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;tito tag
git push &lt;span class="nt"&gt;--follow-tags&lt;/span&gt; origin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By this point, we should be able to build a non-test SRPM package. We
won’t need it but it is a good idea to make sure it works.&lt;/p&gt;

&lt;div class="language-bash highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;tito build &lt;span class="nt"&gt;--srpm&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Push everything into the internal DistGit and submit builds for all
predefined branches.&lt;/p&gt;

&lt;div class="language-bash highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;tito release rhel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When asked if you want to edit the commit message, proceed with
yes. You must reference a ticket requesting this update, e.g.&lt;/p&gt;

&lt;div class="language-plaintext highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;Resolves rhbz#123456
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Just make sure all the submitted builds succeeded and continue with
the rest of the update process.&lt;/p&gt;

&lt;h2 id="consequent-updates"&gt;Consequent updates&lt;/h2&gt;

&lt;p&gt;I haven’t done this part yet, thus it will be explained right after I
get through it. The general idea is to run&lt;/p&gt;

&lt;div class="language-bash highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;git fetch &lt;span class="nt"&gt;--all&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and &lt;a href="https://frostyx.cz/feed#update-the-spec-file"&gt;Update the spec file&lt;/a&gt;,
&lt;a href="https://frostyx.cz/feed#cherry-pick-upstream-changes"&gt;cherry-pick upstream changes&lt;/a&gt;,
&lt;a href="https://frostyx.cz/feed#build-and-test-the-package-locally"&gt;build the package locally&lt;/a&gt;
and then &lt;a href="https://frostyx.cz/feed#push-the-changes"&gt;push the changes&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id="troubleshooting"&gt;Troubleshooting&lt;/h2&gt;

&lt;h3 id="diff-contains-binary-files"&gt;Diff contains binary files&lt;/h3&gt;

&lt;p&gt;If any of the patches that &lt;code class="language-plaintext highlighter-rouge"&gt;DistributionBuilder&lt;/code&gt; generates should
contain binary files, you will end up with a fatal error (with a
rather nice wording).&lt;/p&gt;

&lt;div class="language-plaintext highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;ERROR: You are doomed. Diff contains binary files. You can not use this builder
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this case, I would suggest trying &lt;code class="language-plaintext highlighter-rouge"&gt;UpstreamBuilder&lt;/code&gt; instead.&lt;/p&gt;

&lt;div class="language-python highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;builder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tito&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UpstreamBuilder&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The difference between those two is that &lt;code class="language-plaintext highlighter-rouge"&gt;DistributionBuidler&lt;/code&gt;
generates one patch per upstream version and therefore if any of the
intermediate patches contains binary files, the build fails. Whereas
&lt;code class="language-plaintext highlighter-rouge"&gt;UpstreamBuilder&lt;/code&gt; always generates only one patch file at all times,
therefore any intermediate changes don’t matter, the patch will
simply contain changes for the resulting upstream state (i.e. if the
latest upstream release is alright, the build will succeed).&lt;/p&gt;</content>
		<author>
			<name>FrostyX</name>
			<uri>http://frostyx.cz/</uri>
		</author>
		<source>
			<title type="html">FrostyX's blog</title>
			<subtitle type="html">Personal blog of Jakub Kadlčík (aka FrostyX)</subtitle>
			<link rel="self" href="http://frostyx.cz/feed.xml"/>
			<id>http://frostyx.cz/</id>
		</source>
	</entry>

</feed>