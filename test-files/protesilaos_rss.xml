<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Protesilaos Stavrou: Coding blog</title>
    <description>Coding blog</description>
    <link>https://protesilaos.com/codelog</link>
    <atom:link href="https://protesilaos.com/codelog.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 04 Oct 2021 08:07:09 +0000</pubDate>
    
    
    <item>
      <title>Introducing tmr.el for Emacs</title>
      <description>TMR, else TMR Must Recur, is a simple Emacs package for setting a timer.</description>
      <pubDate>Sat, 02 Oct 2021 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2021-10-02-introducing-tmr-el/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2021-10-02-introducing-tmr-el/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Just created a standalone Git repository for my <code>tmr.el</code> library:
<a href="https://gitlab.com/protesilaos/tmr.el">https://gitlab.com/protesilaos/tmr.el</a>.</p>

<p>This has been part of <a href="https://protesilaos.com/dotemacs">my dotemacs</a>
for several months now and I thought it was right to turn it into its
own package.  No ELPA package is planned for the foreseeable future.</p>

<p>Excerpt from its documentation:</p>

<blockquote>
  <p>This package provides a single command for setting a timer: <code>tmr</code>.</p>

  <p>The command prompts for a unit of time, which is represented as a string
that consists of a number and, optionally, a single character suffix
which specifies the unit of time.</p>

  <p>Valid formats:</p>

  <table>
    <thead>
      <tr>
        <th>Input</th>
        <th>Meaning</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>5</td>
        <td>5 minutes</td>
      </tr>
      <tr>
        <td>5m</td>
        <td>5 minutes</td>
      </tr>
      <tr>
        <td>5s</td>
        <td>5 seconds</td>
      </tr>
      <tr>
        <td>5h</td>
        <td>5 hours</td>
      </tr>
    </tbody>
  </table>

  <p>If <code>tmr</code> is called with an optional prefix argument (<code>C-u</code>), it also asks
for a description which accompanies the given timer.  Preconfigured
candidates are specified in the user option <code>tmr-descriptions-list</code>,
though any arbitrary input is acceptable at the minibuffer prompt.</p>

  <p>When the timer is set, a message is sent to the echo area recording the
current time and the point in the future when the timer elapses.  Echo
area messages can be reviewed with the <code>view-echo-area-messages</code> which is
bound to <code>C-h e</code> by default.</p>

  <p>Once the timer runs its course, it produces a desktop notification and
plays an alarm sound.  The notification’s message is practically the
same as that which is sent to the echo area.  The sound file for the
alarm is defined in <code>tmr-sound-file</code>, while the urgency of the
notification can be set through the <code>tmr-notification-urgency</code> option.</p>

  <p>The <code>tmr-cancel</code> command cancels the last <code>tmr</code>.  Note that for the time
being it has no notion of multiple timers—just the last one.</p>
</blockquote>

<hr />

<p>As with every piece of Elisp I produce for my private needs, this is all
done for recreational and/or educational purposes.  Though I believe
<code>tmr.el</code> can be used by others as well, provided they are willing to
install it manually.</p>

<p>The initial release notwithstanding, there are a couple of user-facing
improvements to be made:</p>

<ol>
  <li>Make the <code>tmr-cancel</code> command prompt with completion for a timer
object when more than one is present.</li>
  <li>Create a <code>tmr-list</code> command which lists all <code>tmr</code> objects (yes, I
know about <code>list-timers</code>, but I want something more specific).</li>
</ol>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Modus themes 1.6.0 for GNU Emacs</title>
      <description>Information about the latest version of my highly accessible themes for GNU Emacs.</description>
      <pubDate>Wed, 29 Sep 2021 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2021-09-29-modus-themes-1-6-0/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2021-09-29-modus-themes-1-6-0/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Just published version <code>1.6.0</code> of <a href="https://protesilaos.com/modus-themes">the Modus
themes</a>.  The detailed release
notes are reproduced below.</p>

<p>For any questions pertaining to this publication, feel welcome to
<a href="https://protesilaos.com/contact/">contact me</a>.</p>

<p>I will now prepare the patch for emacs.git.  The modus-themes package in
GNU ELPA fetches its contents from emacs.git, so expect an update
shortly thereafter.</p>

<hr />

<h2>Modus themes version 1.6.0</h2>

<p>By Protesilaos Stavrou <a href="mailto:info@protesilaos.com">info@protesilaos.com</a> on 2021-09-29</p>

<p>This entry records the changes made to the project since the release of
version 1.5.0 on 2021-07-15.  There have been around 70 commits since
then.</p>

<p>Every colour-related modification referenced herein is always
implemented in accordance with the primary accessibility objective of
the themes for a minimum contrast ratio of 7:1 between background and
foreground values in their given combination (the WCAG AAA standard).
Such edits also account for colour-coding that is optimised for the
needs of users with red-green colour deficiency (deuteranopia or
variants).</p>

<p>Here is the URL of the manual: <a href="https://protesilaos.com/modus-themes">https://protesilaos.com/modus-themes</a>.
Or read it from Emacs by evaluating this form:</p>

<pre><code>(info "(modus-themes) Top")
</code></pre>

<p>The themes are built into Emacs version 28 (current development target),
and are available on GNU ELPA as well as other archives.  This release
is the final one for the emacs-28 branch, as that gets cut as the next
stable release of GNU Emacs.  Future releases will target Emacs 29 once
that becomes the new <code>master</code> branch.</p>

<h3>Customisation options</h3>

<p>[ Themes need to be reloaded for changes to take effect. ]</p>

<ul>
  <li>
    <p>Introduced the new <code>modus-themes-tabs-accented</code> boolean option.  When
set to non-nil, it renders the background of all tab interfaces in a
shade of blue.  Those interfaces are tab-bar (built-in), tab-line
(built-in), and Centaur tabs.</p>

    <ul>
      <li>The background “accented” colour is the same as the one used for
mode lines when <code>modus-themes-mode-line</code> is configured accordingly.</li>
    </ul>
  </li>
  <li>
    <p>Tweaked the <code>modus-themes-mode-line</code> to accept a <code>padded</code> symbol as
part of the list of properties it can read.  This will increase the
spacing around the mode lines’ text, making the line taller overall
but also more spacious.</p>

    <p>Thanks to Manuel Uberti for making the proposal and providing feedback
in issue 228: <a href="https://gitlab.com/protesilaos/modus-themes/-/issues/228">https://gitlab.com/protesilaos/modus-themes/-/issues/228</a>.</p>
  </li>
  <li>
    <p>Added the <code>modus-themes-scale-small</code> which complements the existing
scale values with one that is meant to be smaller than the base
height.  This option is reserved for special cases and is currently
only used as an opt-in feature in the Org agenda.</p>
  </li>
  <li>
    <p>Expanded the <code>modus-themes-org-agenda</code> with more parameters:</p>

    <ul>
      <li>The current date can now also be underlined.</li>
      <li>Date headings can be scaled/enlarged in size.</li>
      <li>Events, like those of the Diary or sexp entries, can be customised.</li>
    </ul>

    <p>Consult the manual or the variable’s doc string for the details.</p>
  </li>
  <li>
    <p>Removed the obsoleted aliases <code>modus-themes-slanted-constructs</code> and
<code>modus-themes-scale-5</code>.  Those are superseded by the more
appropriately named <code>modus-themes-italic-constructs</code> and
<code>modus-themes-scale-title</code>.</p>

    <p>Thanks to Nicolas De Jaeghere for the patch in merge request 47:
<a href="https://gitlab.com/protesilaos/modus-themes/-/merge_requests/47">https://gitlab.com/protesilaos/modus-themes/-/merge_requests/47</a>.</p>
  </li>
</ul>

<h3>Faces and face groups</h3>

<ul>
  <li>
    <p>Make the <code>prodigy</code> faces for red/green/yellow inherit from the faces
<code>error</code>/<code>success</code>/<code>warning</code>, respectively.  This is done to (i) avoid
duplication and (ii) ensure that the green/success colour coding is
consistent with the goal of the themes to empower users with red-green
colour deficiency.  The boolean option that changes all such greens to
shades of blue is <code>modus-themes-success-deuteranopia</code>.</p>
  </li>
  <li>
    <p>Assigned the <code>:extend</code> attribute to the <code>org-code</code> face.  This is
necessary when the Org source contains lines that start with a colon
sign.  Those are interpreted as code blocks.  For example:</p>

    <pre><code># Sample code block
:  #+BEGIN_SRC emacs-lisp
:    (defun in-interval (bounds el)
:      (and (&gt;= el (car bounds)) (&lt;= el (cadr bounds))))
:  #+END_SRC
</code></pre>

    <p>With the <code>:extend</code> in place, the background stretches to the edge of
the window, thus giving those lines a uniform rectangular shape.  For
inline uses of <code>org-code</code>, the background should remain limited to the
span of the text.</p>
  </li>
  <li>
    <p>Broadened support for <code>marginalia</code> faces in two phases.</p>

    <ul>
      <li>
        <p>The first pertained to the file permissions that are shown when
completing against file paths.  Their style is similar to what
<code>dired+</code> or the <code>direfl</code> packages provide, however we have taken
care to optimise the interface for the purposes of completion
UIs—where things can look like Dired, we make them alike, but
where they must differ, we differentiate the designs accordingly.
There can be no compromises or arbitrary constraints.</p>

        <p>Also read: <a href="https://github.com/minad/marginalia/pull/91">https://github.com/minad/marginalia/pull/91</a>.</p>
      </li>
      <li>
        <p>The second batch covered all sorts of extra classes that provide
granular control over the appearance of Marginalia instances.
Refinements also had to be made to already-supported faces for the
sake of achieving consistency across the various Marginalia
interfaces.</p>

        <p>Also read: <a href="https://github.com/minad/marginalia/pull/92">https://github.com/minad/marginalia/pull/92</a>.</p>
      </li>
    </ul>
  </li>
  <li>
    <p>Refined <code>diredfl</code> and <code>dired+</code> faces.  For the various “priv” faces,
the intent is to increase the difference in hueness between adjacent
file permissions (the changes are minor, but they do change the
overall result).  Numbers are toned down so that they do not clash
with dates.  The file suffix no longer uses cyan to stand out more in
detailed views.</p>
  </li>
  <li>
    <p>Made <code>icomplete-selected-match</code> (Emacs28) more legible by aligning its
presentation with metaphors that are estaslished across the
modus-themes.  Thanks to Kévin Le Gouguec (peniblec) for noting the
inconsistency with the new face upstream and for writing the patch for
it in merge request 50:
<a href="https://gitlab.com/protesilaos/modus-themes/-/merge_requests/50">https://gitlab.com/protesilaos/modus-themes/-/merge_requests/50</a>.
Also thanks to Manuel Uberti for confirming that things would look
consistent in the comments’ section of that merge request.</p>
  </li>
  <li>
    <p>Fixed faulty inheritance for the <code>web-mode-keyword-face</code>.  It should
now properly copy the attributes of <code>font-lock-keyword-face</code>.</p>
  </li>
  <li>
    <p>Made inheritance of the new <code>help-key-binding</code> (Emacs28 key) the
default for all faces that need to style key bindings.</p>

    <p>In Emacs 28 all key bindings are automatically displayed with the face
<code>help-key-binding</code> which uses some new face attributes to draw a
cleaner box around it.  Given that the themes must work with earlier
versions of Emacs, we cannot inherit it unconditionally so we added
the relevant conditionality.  It is nice to offer this feature to
those who use the themes on Emacs 28.  Older versions retain the
previous style of a blue colour coupled with a bold weight.</p>

    <p>The exception to this rule is the transient.el faces (this is the
pop-up window used by Magit, among others—transient.el is now built
into Emacs).  The box effect creates unpredictable misalignments, so
we default to the old key binding style for those.</p>

    <p>Thanks to Manuel Uberti and Kevin Fleming for their feedback in issue
232: <a href="https://gitlab.com/protesilaos/modus-themes/-/issues/232">https://gitlab.com/protesilaos/modus-themes/-/issues/232</a>.</p>
  </li>
  <li>
    <p>Added support for the new <code>notmuch-jump-key</code> face.  I contributed this
face in commits c37c9912, 5cc106b0 to the Notmuch git repo:
<a href="https://git.notmuchmail.org/git/notmuch">https://git.notmuchmail.org/git/notmuch</a>.</p>
  </li>
  <li>
    <p>Updated the <code>bookmark-face</code> (Emacs28) as it has been changed upstream
to be a fringe indicator instead of an in-buffer, line-wide background
highlight.</p>
  </li>
  <li>
    <p>Aligned Ediff faces with other <code>modus-themes-diffs</code> styles.  Before we
would differentiate a “focus state”, though that is now considered
surplus to requirements.  The notion of a “focus state” only make
sense in Magit which applies variegated colour-coding to diff hunks
based on their state.  Whereas non-active Ediff changes are grayed
out, so there is no need for further colour-coding nuances.  The most
noticeable change is with:</p>

    <pre><code>(setq modus-themes-diffs 'bg-only)
</code></pre>

    <p>As noted in the commit message of 64c74ae (from 2021-09-04):</p>

    <pre><code>If users think this change is for the worse, we can always define a
helper function like this:

    (defun modus-themes--ediff-style (bgonly default)
      "Diff style for Ediff.
    BGONLY and DEFAULT depend on the value of `modus-themes-diffs'.
    The former is more subtle."
      (if (eq modus-themes-diffs 'bg-only)
          (list bgonly)
        (list default)))

And apply it thus:

    `(ediff-current-diff-A ((,class :inherit ,@(modus-themes--ediff-style
                                                'modus-themes-diff-removed
                                                'modus-themes-diff-focus-removed))))
</code></pre>

    <p>No feedback was received towards that end in about a month, so we
consider the change to be acceptable, without prejudice to the
possibility of future updates.</p>
  </li>
  <li>
    <p>Unified the styles of <code>org-agenda-calendar-sexp</code>, <code>org-agenda-diary</code>,
and <code>org-agenda-calendar-event</code>.  This is not a user-facing change but
an internal refactoring to avoid repetition.  It also makes things
easier for the implementation of the <code>modus-themes-org-agenda</code> (as
mentioned above).</p>
  </li>
  <li>
    <p>Ensured that the <code>bookmark-menu-bookmark</code> face inherits from the
<code>bold</code> face.  By default it hardcodes the bold weight, whereas we
instruct it to inherit the <code>bold</code> face.  A user can thus change the
<code>:weight</code> of that face to whatever they want, like semibold,
extrabold, etc.  We do this throughout the themes for bold and
italics—consider it a “hidden feature” of sorts.  Check the manual
for more on the matter:</p>

    <pre><code>(info "(modus-themes) Configure bold and italic faces (DIY)")
</code></pre>
  </li>
  <li>
    <p>Provided support for tab-bar groups (Emacs28).  Specifically the faces
<code>tab-bar-tab-group-current</code> and <code>tab-bar-tab-group-inactive</code>.</p>

    <p>Thanks to Adam Porter (alphapapa) for the feedback in issue 8 over at
the Github mirror: <a href="https://github.com/protesilaos/modus-themes/issues/8">https://github.com/protesilaos/modus-themes/issues/8</a>.</p>
  </li>
  <li>
    <p>Decoupled the <code>stripes</code> face from that of <code>hl-line-face</code>.  This is
because the stripes are not meant to change depending on the value of
the user option <code>modus-themes-hl-line</code>.</p>
  </li>
  <li>
    <p>Revised the red shade of “flagged” entries in mu4e and notmuch.  Those
are now consistent with Gnus.  The shade of red that was used before
was closer to the orange side of the spectrum whereas the current has
hints of blue (a cherry colour) and thus combines better with the cyan
and blue that prevail in those interfaces.  These are fine margins,
though the effect is noticeable regardless.</p>
  </li>
  <li>
    <p>Configured the new <code>ansi-color</code> faces (Emacs28) which are used by
shells and terminals (among others).  Thanks to Manuel Uberti for
reporting the changes to upstream Emacs in issue 236:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/236">https://gitlab.com/protesilaos/modus-themes/-/issues/236</a>.</p>
  </li>
  <li>
    <p>Expanded support for EMMS faces, pertaining to its browser views.
Thanks to Feng Shu (tumashu) for bringing those to my attention in
issue 11 over at the Github mirror:
<a href="https://github.com/protesilaos/modus-themes/issues/11">https://github.com/protesilaos/modus-themes/issues/11</a>.</p>
  </li>
  <li>
    <p>Styled the new <code>tab-line-tab-modified</code> face (Emacs28).  It should now
use a faint red colour to denote changes to the underlying file.
Thanks to Adam Porter (alphapapa) for bringing it to my attention in
issue 12 over at the Github mirror:
<a href="https://github.com/protesilaos/modus-themes/issues/12">https://github.com/protesilaos/modus-themes/issues/12</a>.</p>
  </li>
  <li>
    <p>Configured the single face that the <code>cursor-flash</code> package has to
offer.  Thanks to Manuel Uberti for the feedback in issue 231:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/231">https://gitlab.com/protesilaos/modus-themes/-/issues/231</a>.</p>
  </li>
  <li>
    <p>Included <code>elpher</code> in the list of supported packages by means of
covering the heading faces it implements.</p>
  </li>
  <li>
    <p>Recalibrated certain dedicated colours for inactive tabs and tweaked
tab faces to (i) marginally improve the default aesthetic and (ii)
harmonise it with the style of <code>modus-themes-tabs-accented</code>.</p>
  </li>
  <li>
    <p>Removed the foreground attribute from all markup faces that are meant
to denote emphasis in italics.  That is because such faces are
typically composed with others, so we do not wish to inadvertently
override any other colour that would otherwise have taken effect.</p>
  </li>
  <li>
    <p>Wrote the faces for upstream Org that improve the contextuality of
various agenda views (included in version 9.5).  This was done in
close collaboration with Gustavo Barros who offered detailed feedback
in issue 208 (which also led to the creation and eventual expansion of
the <code>modus-themes-org-agenda</code> user option):
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/208">https://gitlab.com/protesilaos/modus-themes/-/issues/208</a>.</p>

    <p>Four new faces improve certain styles and offer more flexibility for
some Org agenda views: <code>org-agenda-date-weekend-today</code>,
<code>org-imminent-deadline</code>, <code>org-agenda-structure-secondary</code>,
<code>org-agenda-structure-filter</code>.  They inherit from existing faces in
order to remain backward-compatible.</p>

    <p>Quoting from <a href="https://list.orgmode.org/87lf7q7gpq.fsf@protesilaos.com/">https://list.orgmode.org/87lf7q7gpq.fsf@protesilaos.com/</a>:</p>

    <pre><code>+ The 'org-imminent-deadline' is useful to disambiguate generic
  warnings from deadlines.  For example, a warning could be
  rendered in a yellow colored text and have a bold weight,
  whereas a deadline might be red and styled with italics.

+ The 'org-agenda-structure-filter' applies to all tag/term
  filters in agenda views that search for keywords or patterns.
  It is designed to inherit from 'org-agenda-structure' in
  addition to the 'org-warning' face that was present before (and
  removes the generic 'warning' face from one place).  This offers
  the benefit of consistency, as, say, an increase in font height
  or a change in font family in 'org-agenda-structure' will
  propagate to the filter as well.  The whole header line thus
  looks part of a singular design.

+ The 'org-agenda-structure-secondary' complements the above for
  those same views where a description follows the header.  For
  instance, the tags view provides information to "Press N r" to
  filter by a numbered tag.  Themes/users may prefer to
  disambiguate this line from the header above it, such as by
  using a less intense color or by reducing its height relative to
  the 'org-agenda-structure'.

+ The 'org-agenda-date-weekend-today' provides the option to
  differentiate the current date on a weekend from the current
  date on weekdays.
</code></pre>
  </li>
</ul>

<p>Other patches I have made to, inter alia, emacs.git and org.git with
regard to faces are documented in previous change log entries.</p>

<h3>Documentation</h3>

<ul>
  <li>
    <p>Removed references to old versions of the themes from before their
refactoring in version 1.0.0.  Those old packages no longer exist.
Users must install the <code>modus-themes</code> and then load either of
<code>modus-operandi</code> or <code>modus-vivendi</code>.</p>
  </li>
  <li>
    <p>Included various extensions of the Vertico package in the list of
indirectly supported packages.  Those define faces which either
inherit from basic ones that we already support or use colours that
are consistent with our accessibility target.</p>
  </li>
  <li>
    <p>Referenced <code>side-hustle</code>, <code>tide</code>, <code>bufler</code> as an indirectly supported
packages for the same reasons.</p>
  </li>
  <li>
    <p>Simplified time-stamp local variables that are used in modus-themes.el
to show the time the file was edited.  We apply <code>time-stamp-pattern</code>
instead of setting multiple time-stamp variables.  Thanks to Stephen
Gildea for the patch, which was sent to me via email (yes, you can
always do that).</p>
  </li>
  <li>
    <p>Updated the manual’s “acknowledgements” section to name all new
contributors to code/ideas/feedback.</p>
  </li>
  <li>
    <p>Furnished information on how to configure the <code>highlight-parentheses</code>
package and extend its faces for use with the themes.  The entry
provides a complete Elisp implementation.</p>
  </li>
  <li>
    <p>Improved the code samples for the prism.el setup that users may wish
to set up by themselves.  The new lists of colours work better when
Prism’s colouration is limited to a small set of hues.</p>
  </li>
  <li>
    <p>Deleted trailing whitespace in the manual which had adverse effects
when trying to compile the modus-themes.org over at emacs.git.  Thanks
to Philip Kaludercic for the patch in merge request 49:
<a href="https://gitlab.com/protesilaos/modus-themes/-/merge_requests/49">https://gitlab.com/protesilaos/modus-themes/-/merge_requests/49</a>.</p>
  </li>
</ul>

<p>Thanks again to everyone involved.  Looking forward to see the Modus
themes, version 1.6.0, as part of the next stable release of Emacs.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Live stream: Emacs and the Unix philosophy</title>
      <description>A talk about how GNU Emacs fits into the Unix philosophy.</description>
      <pubDate>Wed, 22 Sep 2021 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2021-09-22-live-stream-emacs-unix/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2021-09-22-live-stream-emacs-unix/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=FmOYj0SyKfg">https://www.youtube.com/watch?v=FmOYj0SyKfg</a></p>
         
         <p>This was a live stream that got recorded.  It started on 2021-09-26
13:00 +0300 and lasted for about two hours.</p>

<p>I talked about the persistent question of how Emacs conforms with the
Unix philosophy, what it means for a set of views to constitute a
philosophy, whether those tenets are generalisable, and what lessons may
be learnt from them for our day-to-day computing.</p>

<p>After the presentation was concluded, I joined the live chat for further
comments on a variety of issues.</p>

<p>The text of my talk is copied below.  It is written in Org notation:</p>

<pre><code class="language-org">#+TITLE: Live: Emacs and the Unix philosophy
#+AUTHOR: Protesilaos Stavrou (https://protesilaos.com)
#+DATE: 2021-09-26

* How I approach the Emacs VS Unix problématique

Hello everyone!  My name is Protesilaos, also known as "Prot".  In this
live stream, which is being recorded as well, I will talk to you about
the Unix philosophy and how Emacs conforms with it while addressing its
main usability flaw.  The show notes are available on my website:
https://protesilaos.com/codelog/2021-09-22-live-stream-emacs-unix/

My approach to today's topic is informed by my experience as someone who
had used a combination of a tilling window manager, Tmux, Vim, various
ncurses-based programs (e.g. Mutt), and command-line utilities for years
before consolidating around GNU Emacs.  My perspective is further
informed by my background as a social scientist and, ultimately, a
philosopher.  Not as a programmer, though these days I do code a lot for
recreational or educational purposes.

In this presentation I will make arguments against dogmatism; against
misunderstandings in what Unix stands for and how it must work in the
real world.  I will also critically assess the vaunted notions of
minimalism and so-called "bloat" as they pertain to software and discuss
what the appropriate attitude should be when thinking about this and
concomitant issues.  The key word is "attitude": the disposition we
ought to have in order to avoid becoming dogmatic.

This is my second video on the topic.  I did one a couple of years ago,
shortly after I switched to Emacs.  I have also published an article:

+ Emacs mindset and Unix philosophy:
  https://protesilaos.com/codelog/2019-08-09-vlog-emacs-unix/
+ Comment on Unix versus Emacs:
  https://protesilaos.com/codelog/2020-12-28-comment-unix-vs-emacs/

The reason I am doing this again is because I keep getting questions
about my experience with Emacs; questions which typically reveal
deep-seated assumptions that are either outright untrue or ill
considered.

In short, much of this talk will be about theoretical issues.  While I
understand that coding is a technical endeavour, I still believe there
are important insights to be drawn from theoretical work; insights which
will eventually find their application in everyday scenaria.  Besides,
we cannot afford to assume the Unix philosophy as a technical constant
when it clearly is formulated as a /philosophy/.

Finally, note that I will participate in the live chat after I conclude
this presentation.  If you have any questions related to today's topic
or any other subject I cover on my website (https://protesilaos.com),
please let me know.

* Unix minimalism is not a dogma

The Unix philosophy consists of teachings that are based on decades of
experience with systems programming.  Those are encapsulated in the KISS
principle of engineering: Keep It Simple Stupid (or variants).

Unix values specialised tools that can interface with each other to
contribute to emergent workflows.  Its brand of minimalism rests on the
practical consideration of maintainability: both with regard to fixing
bugs and conserving programmer time.  The Unix philosophy prioritises
modularity and composability over monolith-like implementations.  Simple
designs can adapt to evolving circumstances while those that make all
sorts of assumptions and have lots of explicit or implicit dependencies
are unsustainable over the long-term.

Unix programmers did not invent all the concepts associated with their
philosophy.  Humanity had discovered them through aeons of continuous
experimentation and practical reasonableness.  And what better teacher
than the vastness of life all around us?  Natural systems consist of
subsystems, just like our body, forests, oceans, and so on.  In nature
we find division of labour or else the separation of concerns,
specialisation and compartmentalisation, composition of localised
patterns into emergent phenomena...  Everything.

This is not to discount the contributions of Unix, but rather to couch
them in terms of the wider milieu in which we operate.  By framing it
this way, we are better prepared to let go of views that are ultimately
detrimental to our life.  Such as the dogmatic belief that the Unix
philosophy is impeccable and must not be criticised.

Dogma is the misrepresentation of a context-dependent insight as a
universal truth.  In practical terms: when you find yourself not
listening to a counterpoint, consider whether you are giving the other
side a fair chance.  If not, you are most likely being dogmatic.

The Unix philosophy is not the undisputed source of truth.  As with
every corpus of thought, what we learn from Unix remains open to
interpretation.  This means that its followers must assume a sceptical
disposition.  They have to remain open-minded about cases where the
principles of their tradition should not be followed to the letter.  The
practitioner has to exercise judgement and use their discretion to find
the right answer for the task at hand.  Dogma is the enemy of every
school of thought.

Consider the difference between the disciple and the grandmaster.  The
student knows how to faithfully abide by all the precepts of their
tradition.  Whereas the grandmaster not only applies the rules but
understands their underpinnings and thus knows when to suspend their
application and why.  In other words, the student is prone to dogmatism
because of their enthusiasm coupled with their lack of perspective.

* Emacs conforms with the Unix philosophy

In analytical terms, Emacs has two facets to its being:

+ The Lisp interpreter :: We must think of it as the equivalent of a
  POSIX shell like =#!/bin/sh= or whatever environment we use to execute
  scripts.  With Emacs we run or "evaluate" Emacs Lisp code (Elisp).
  That is all we can do with it.
+ The interactive environment :: This is the counterpart of command-line
  shells like =bash=, with the difference being that its event loop, which
  is its interactivity, is more pronounced.  Simply put, Emacs is like a
  shell with superpowers, which looks a text editor upon first sight.
  And this is possible because it is built on top of the interpreter.

Those two aspects of Emacs are woven together into the same application,
making it a /computing environment/ rather than yet another text editor or
IDE.  Still, the analytical distinction is important in light of the
Unix philosophy.  As I already noted, Unix is all about sharp and
specialised tools that can be combined with one another: modularity and
composability.  Emacs is such a tool through its Lisp interpreter.

Just as it is perfectly fine to have a shell interpreter with which to
run arbitrary scripts, it is acceptable to have a Lisp machine for the
purposes of evaluating Lisp.  Similarly, it is customary to run an
interactive shell inside of a terminal emulator.  By the same token, it
is perfectly reasonable to use Emacs' own interactive environment to
interface with the Lisp interpreter.

Emacs should not be compared to Desktop Environments like GNOME or KDE,
or to tilling window managers such as i3, BSPWM, etc.  The reason is
that those are wrappers of otherwise disparate programs.  They basically
bundle different processes inside of a main session, where the joint
presence of distinct applications is a mere coincidence.

In contradistinction, Emacs only runs Elisp and what happens inside of
Emacs participates in the same environment.  This is best understood by
means of an example: if I want to change the font size in my current
BSPWM session, I have to edit the configuration file of my terminal
emulator, my settings daemon for GTK apps, Firefox, and so on.  In other
words, those applications do not know that they are all subprocesses of
the BSPWM session.  Whereas in Emacs, if I change the font size, the
effect is propagated across the entire Emacs environment.

This means that not only does Emacs conform with the Unix philosophy,
but it also has the potential to address its main flaw.  By following
Unix precepts we often find ourselves in scenaria where there is no
integration between the programs we use.  While Emacs ensures that we
get a singular experience /without hacks/: the same commands, the same
fonts and colours, the same paradigms of interaction, and so on.  This
makes Emacs an /integrated computing environment/.

* The integration that Emacs offers is not "bloat"

Which brings us to the dubious notion of bloat in software.  You will
find self-professed proponents of the Unix philosophy dismissing the
value proposition of Emacs on the premise that it is just doing too much
and thus does not abide by the tenets of the Unix faith.  This stems
from the misunderstanding of treating Emacs as a text editor.  Which
naturally raises questions, such as "why should Emacs ever be my Git
front-end, when I already have the command-line?" or "why use Emacs'
windows when Tmux is specialised in multiplexing?".

This is why I stressed that Emacs is a Lisp interpreter that only does
one thing: evaluate Lisp.  And so it is capable of all those wonderful
workflows like editing code, handling your agenda, doing presentations
with plain text like this one, and so on.  If you cavalierly talk about
bloat in Emacs, you are effectively making the argument that =#!/bin/sh=
is at fault because of what shell scripts the user may be running.

Then we have another problem with those who criticise Emacs from a
position of, dare I say, ignorance or based on rumours and hearsay.  And
that is that they themselves do not follow the simulacrum of the Unix
philosophy that is their dogma.  What I mean by that is that you will
often find them using Vim as their text editor.  Last time I checked,
Vim can do multiplexing, it has a concept of workspaces or tabs, it can
spawn a terminal with the =:term= command, and so on.  If you think that
Emacs violates the Unix tradition because it too can do the things that
Vim does, then why do you use Vim?  Why aren't you doing everything with
=ed= or perhaps =sed=?  Or, at the very least, why are you not switching to
=vi=, which is closer to what you claim to stand for.

Maybe then the problem is that you have misunderstood Unix altogether
and are being dogmatic.  Take a pause and think how your totalising
claims are detrimental to your own computing experience: if you follow
them to the letter, you will be missing out on quality-of-life advances
in software.  For what?  Plus you will be tacitly holding that the Unix
tradition is flawless, which is nonsense.

Make no mistake: Vim, Tmux, Mutt, Newsboat, tilling window managers are
all excellent programs in their own right.  But what about their
combination?  What about the /gestalt/?  They lack integration.  To
configure Vim you use Vimscript, Tmux has something like a shell syntax,
Mutt and Newsboat use something else, your window manager may
communicate with shell commands or might require editing a C header
file, and so on.  It is a bit of everything.  And their joint operation
is a mere coincidence, as I already explained: they do not share a
common basis.  Whereas Emacs only knows how to interpret Elisp and all
you do inside of it is an extension of that basic principle, to the
effect that you get what every GNU/Linux power user actually wants: a
singular computing experience that minimises the distance between their
mind and what the machine is doing.  What better minimalism than that?

* Understanding minimalism in context

Let's now consider minimalism as such.  I define minimalism as the
attitude of achieving minimum viable sufficiency for a given task.

To test whether something is minimalist, we must know what it is
designed to do.  Design, however, has two sides to it.  The first is
what the designer thinks is the telos.  The second is what the user
considers as the end goal of the design.

As an example, imagine a sword.  The smith who forged it fathomed a
telos where the sword is fit as a weapon or, at the very least, that it
has a cutting edge.  Now suppose that some collector buys this item and
installs it on their wall for decorative purposes, perhaps to show their
wealth and social status.  To understand the utility and end goal of
this sword, we have to account for the context or, as I say, for the
constitution of the case.  And that is because nothing has a standalone
presence: it always exists in a given context which contributes to its
actuality.

[ Read (among others): On role and actuality
  (https://protesilaos.com/books/2021-04-15-role-actuality/) ]

The same goes for minimalism, whether it is about software or not.  When
we assess the minimum viable sufficiency for a given task, we have to
consider the foresight of the designer or developer but also try to
anticipate the expectations of users.  In other words, there is no
innate minimalism; minimalism that is intrinsic to an otherwise
decontextualised thing.  We must always look at the context.

Allow me to tell you a personal experience with markdown editors from
the days I first switched to GNU/Linux in mid-2016.  I wanted something
that could centre text on the screen like how I am doing it in this
presentation.  It should also have spell checking for English and Greek.
And it should let me configure the colours on display and the size of
the fonts.  So I found several self-styled minimalist apps which would
lack at least one of those basic features.  Now you may think that
changing colours is "bloat", but to me it is a key usability feature,
especially when the designer has not considered applying good colour
contrast for legibility, else accessibility (by the way, I am the author
of the =modus-themes= which are also built into Emacs version 28---they
are designed for the highest legibility standard).

When software calls itself minimalist, it sometimes means that it
actually is incomplete and has not reached the state of minimum viable
sufficiency for the tasks it seeks out to accomplish.  And, by the by, I
will let you connect the dots when marketing folks peddle "minimalism".

* You don't have to switch to Emacs, though you might want to

In conclusion, I encourage you to exercise judgement when thinking about
how some philosophy influences your day-to-day experience.  Do not let
yourself fall into the trap of dogmatism and become a victim of your own
misunderstandings.  In practical terms, always give the other side of
the argument the benefit of the doubt, always keep an open mind, and
always maintain a dubitative and inquisitive disposition.

Emacs is all about integration.  And I already gave some examples, but
let me add another one here.  In Emacs, we have commands to introspect
the environment.  So I can invoke a command which tells me what a key
combination does (=describe-key=).  Or I can call another command which
informs me to which keys is a certain function bound to (=where-is=).
Whereas in my otherwise Unix-y tilling window manager, I have no
built-in way to introspect what the hotkey daemon (=sxhkd=) does when I
type in a certain key chord.  Similarly, my terminal emulator has no
such capabilities, nor do the programs that run inside of it like Vim
and Mutt.  Finding what you want is part of the reason you are using a
computer, so that you do not have to memorise everything.

Basic functionality does not really need that degree of homogeneity.
For instance, =grep= and =sed= get the job done perfectly well, whether
independently or in tandem.  The importance of integration becomes
evident when you operate at a higher level of emergence, where things
must work in concert for optimal results.

To me the Unix philosophy is very important.  It is what inspires me to
separate my programs based on their scope and, more generally, to avoid
duplication of effort.  It also guides me to pursue minimalist solutions
which are fit for their purpose.  I also am, however, a pragmatist who
understands that the Unix tradition is not a dogma.  We can find cases
where improvements can be made to it, such as with the integration of
applications.  When we have a layer of interconnectedness, such as the
one provided by Emacs, we get more consistent results for emergent
workflows, which ultimately lead to a superior end-user experience.

So, should you switch to Emacs?  The answer is "it depends".  If you
need a singular experience that allows you to draw linkages between your
various workflows, then I would say "yes".  Otherwise it really is up to
you.  Whatever you do, however, do it from a position of knowledge, with
a clear purpose, and remain committed to it.  Do not follow trends or
pernicious memes without applying common sense.  Emacs has a learning
curve, but so do all the disparate programs that are glued together in
an ad-hoc fashion in some GNU/Linux power user's setup.  You have to
work for the good things.

That's all for today's presentation, folks.  Now I will check the chat
and comment on any questions or remarks.  Thank you!
</code></pre>

<hr />

<p>The video thumbnail is a tweak of the Levitating, Meditating,
Flute-playing Gnu under the terms of the GNU General Public License:
<a href="https://www.gnu.org/graphics/meditate.html">https://www.gnu.org/graphics/meditate.html</a>.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Primer on Emacs bookmarks</title>
      <description>Bookmarks are compartments that store arbitrary data about files/contexts that we can access with Emacs.</description>
      <pubDate>Wed, 08 Sep 2021 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2021-09-08-emacs-bookmarks-intro/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2021-09-08-emacs-bookmarks-intro/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=7eWAfmABHMs">https://www.youtube.com/watch?v=7eWAfmABHMs</a></p>
         
         <p>In this video I offer an introduction to the built-in bookmarking
framework of Emacs.  Bookmarks are compartments that store arbitrary
data about files/contexts that we can retrieve on demand.  They can
potentially work with practically every major-mode inside of Emacs and
can interface with other core features such as TRAMP to, e.g., restore
an Eshell buffer over a particular file access protocol.</p>

<p>The video also briefly covers my custom extensions for the bookmarks’
list view as well as my handler function for making EWW compliant with
the standard <code>bookmark.el</code> library instead of its own bookmarking
facility.</p>

<p>All configurations and custom code are published on this website as part
of my dotemacs: <a href="https://protesilaos.com/dotemacs">https://protesilaos.com/dotemacs</a>.  The link includes
references to the Git sources.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Emacs as a ‘second brain’ and mindfulness</title>
      <description>A presentation on the sheer power of Emacs to improve your productivity as a 'second brain', but also a reminder to care about the 'first brain'.</description>
      <pubDate>Tue, 31 Aug 2021 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2021-08-31-emacs-second-brain-mindfulness/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2021-08-31-emacs-second-brain-mindfulness/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=bFJO8ScRmj0">https://www.youtube.com/watch?v=bFJO8ScRmj0</a></p>
         
         <p>In this recorded live stream, I offered a presentation that was divided
in two parts:</p>

<ul>
  <li>
    <p>In the first, I talked in general about how Emacs can boost one’s
productivity through its sheer power, extensibility, and the
interconnectedness of its environment.</p>
  </li>
  <li>
    <p>While in the second I elaborated on the need to be mindful of our
disposition towards knowledge and learning so that we give ourselves a
chance to grow.</p>
  </li>
</ul>

<p>This ultimately is about how we go about maintaining an exomind with the
help of Emacs while being mindful of the quality of what goes into it.</p>

<p>Below is the text of the presentation (in Org format):</p>

<pre><code class="language-org">#+TITLE: Live: Emacs note-taking and the mindful attitude
#+AUTHOR: Protesilaos Stavrou (https://protesilaos.com)
#+DATE: 2021-08-31

* Overview of how I plan to do live streams

Hello everyone!  My name is Protesilaos, also known as "Prot".

This is my first ever live stream.  I have never done one before nor
participated in any because my old computer could not handle it.  Now
that I have slightly better hardware, it is time to experiment with this
format.

[ I talked about my laptop woes in the last video:
  https://protesilaos.com/codelog/2021-08-29-emacs-community-new-pc/. ]

If there is anyone in the chat, feel welcome to send your questions and
I will reply to them once I conclude the presentation.  I am keeping the
chat here on the side though, so I might also answer some questions
while switching between chapters.

Today's topic and those of any live stream in the foreseeable future
will be about Emacs.  Though the connection may sometimes be tangential,
as I will be elaborating on broader themes as well.

What I will talk to you about today is the process of approaching a new
subject of sophistication or intellectual interest.  And I will link it
to Emacs' capacity to take notes with efficiency and, generally, help us
capture and then retrieve our thoughts.

If you wish to follow live streams that are exclusively about Emacs or
related technological topics, you can follow (A-Z):

+ Andrew Tropin :: https://www.youtube.com/channel/UCuj_loxODrOPxSsXDfJmpng
+ System Crafters (David Wilson) :: https://www.youtube.com/channel/UCAiiOTio8Yu69c3XnR7nQBQ
+ Xah Lee :: https://www.youtube.com/channel/UCXEJNKH9I4xsoyUNN3IL96A

There is also Sacha Chua, but I am not sure how often there are streams
there: https://www.youtube.com/channel/UClT2UAbC6j7TqOWurVhkuHQ.  Maybe
there is Twitch, but I am not familiar with it.

Perhaps there are other live streamers as well, but I am new to this, so
apologies if I have missed any.  Will include them next time.

Other useful Emacs-related videos:

+ Emacs Elements (Raoul Comninos) :: https://www.youtube.com/channel/UCe5excZqMeG1CIW-YhMTCEQ
+ Mike Zamansky :: https://www.youtube.com/channel/UCxkMDXQ5qzYOgXPRnOBrp1w

[ In my dotemacs, I maintain a section about other people's work.  The
  aforementioned and others are included: https://protesilaos.com/dotemacs. ]
* Taking notes in general

We document our ideas all the time, be it with pen and paper or by using
our software of choice.  It helps us clarify our thoughts and elucidate
concepts that would otherwise be hard to grasp.  We may also retrieve
information we have stored for later use.

When it comes to software, Emacs is a powerhouse for taking notes and
staying organised.  Apart from all its text-editing capabilities, its
ability to search recursively through files and edit the results
directly, its superb keyboard macros, and so on, the Emacs milieu has
the highly acclaimed Org mode.

At its core, Org is a lightweight markup language similar in spirit to
Markdown.  What makes Org special though is the ecosystem of Emacs Lisp
that has grown organically around it.  Users have been writing and
sharing code which let's you do practically everything with Org and the
'magic' of Emacs Lisp (Elisp).  For example:

1. Devise your own "Getting Things Done" workflow.
2. Organise your agenda, by scheduling tasks, adding appointment
   notifications, determining what should be tracked as a habit, etc.
3. Write a journal (org-journal).
4. Maintain a personal knowledge base using the zettelkasten method or
   some variant thereof (org-roam, zetteldeft).
5. Publish a website entirely with Org or, at least, by exporting
   specific documents to HTML (among numerous other formats).
6. Do literate programming.
7. Learn something new with flashcards and spaced repetition
   (org-drill).
8. Draw linkages between various contexts, such as by connecting a
   particular email message to a to-do item.

It seems that the possibilities are only limited by one's imagination.
Of course, all of the above can be achieved without using Org, provided
one is willing to experiment with alternatives and some custom code,
perhaps for educational or recreational purposes.

The point is that Emacs is all about choice.  It does not enforce a
specific workflow, nor does it come with stringent requirements of how
data should be stored and organised.  In other words, there isn't a
canonical way of using Emacs: that is always up to the user.

This is all possible because Emacs is programmable and extensible.  You
just write some ELisp and it can evaluate it live.  Though chances are
that there already exist packages which provide you with everything you
need to accomplish your goals.  In fact, you might never have to write
any code yourself and still be very effective with your Emacs usage.

* Emacs can help you develop a second brain

By using Emacs and Org with all of its accoutrements we can have the
basic components we need to set up our very own exomind or second brain.
This is a state where the distance between our mind and what the
software renders possible is reduced and where we can both add and
extract information in a near-frictionless fashion.  The second brain is
a higher state of efficiency.

What exactly goes into one's exomind will depend on their particular
requirements and how much time and effort they are willing to invest in
integrating their computing experience inside of Emacs.  I think it is
worth bringing everything into Emacs because of the innate
interconnectedness of its environment.

Some common tasks that can be done with Emacs:

1. Read RSS/Atom feeds (e.g. Elfeed).
2. Handle email correspondance (Gnus, Notmuch, Mu4e...)
3. Browse the Internet in a text-centric browser (EWW, Elpher).
4. Perform context-sensitive actions on the thing-at-point (Embark).
5. Seamlessly open your PGP/GPG-encrypted files (many built-in tools).
6. Bulk rename your files as if they were regular text, using ordinary
   text editing, keyboard macros, multiple cursors, and the like
   (Dired/Wdired).
7. Gain easy access to your ~pass~ store, where all your passwords are
   stored (pass, password-store).
8. Jump to any heading or "point of interest" in a file using ordinary
   search or more advanced patterns (built-in Imenu and extensions like
   Consult, and several completion frameworks such as Vertico).
9. Play back your music collection (Bongo, EMMS).

For all those and many others, you are always working in the same
environment, where it is trivial to either go from one place to the next
or to connect different packages in emergent workflows.  For example, to
have Elfeed interface with Bongo so that you can add the feed entry of
some music channel you are following directly to your playlist queue.

This is where Org comes in to play.  Specifically ~org-capture~ and
~org-store-link~.  These two commands can be used to quickly store any
kind of structured note and to create a direct link to the context it
was taken from.  A typical example is to read an important email and
capture it as a task that should appear in the Org agenda.

All those can be pieced together into a bigger system to reach that
higher state of productivity; that second brain.  But there is a catch!
Unlike the first brain, the second one does not think things through.
Its output will be as good or bad as your input.  And so there arises a
general problem of the state of mind one must have while documenting
their ideas about some newfound knowledge or piece of information.

* Remaining open to new ideas

As I said in the introduction, we want to be mindful of our attitude
when we are engaging with a new subject of sophistication or
intellectual pursuit.  Because even the most efficient text-editing
setup will not be able to affect our mindset, our dispotition towards
learning.

Maybe you have done this before or are aware of others who have done it:
you start reading a book and as you go through its pages you take
notes.  Maybe you will draw an underline under the text as you go
through it, or add some paper note there.  If the medium is digital, you
will be doing that with Emacs or something along those lines.

The point is that you are taking notes while still trying to parse new
information.  And that can prove problematic.  Sometimes the book, or
the resource more broadly, provides profound insights that require some
time to be fully understood and internalised.  You may have to read and
re-read the text before you are in a position to assess its content.

What happens then, is that if you write notes upon first encounter with
some new material, your input essentially codifies your previous
self---the one who was not yet aware of the book's teachings.  In other
words, those notes are not as useful as you would like to believe,
because they unconsiously embed your prior opinions.

When you engage with a new source that you consider worthy of your time,
at least based on first impressions, you want to give it some room to
grow or some time to sink in.

It is like how fermentation occurs over time.  Take wine production, for
example.  You start with grape juice that you store in a vessel, a
barrel perhaps.  After a few days, the liquid starts developing alcohol.
If you take out a portion of it, what you are getting is some unfinished
product.  Either some bad grape juice or something akin to the cheapest
plonk you can get on the market.  It is not good.  To truly appreciate
it, you have to let the fermentation process run its course.

Incoming ideas are just like that.  If you wrestle with them right away
and take a snapshot of your thoughts at the moment, you are effectively
consuming the unfinished article.  Whereas what you want is to refrain
from passing judgement upon first contact and allow the ideas the time
they need to come together.  This means that you may have to think about
them many times over.

No second brain will do that for you.  No second brain will prevent you
from storing notes that capture your unrefined or immature views.  No
second brain can tell you whether your inconsiderately captured notes
condition your current thought processes.  It is up to the first brain
to be mindful of the potential pitfalls.

* Avoid the dogma of self-identification through mindfulness

To take notes effectively with the intent of growing out of our mould,
we have to rely on our first brain, not the one that Emacs or some other
program/method may provide us with.  When we take notes, or generally
when we encounter something new, we essentially face a dilemma of either
(i) clinging on to our position or (ii) remaining open to the
possibility of refashioning ourselves.

If you hold firm in your views, such as when you read a new book and
comment on it in parallel, you are effectively implying that what you
already knew before reading the book is all you ever needed to know.
Put differently, you are developing a certain brand of dogmatism, of
insistance on the narrative you have about who you are and what it is
that you are doing.  Let me call this the "dogma of self-identification"
in which we do not recognise, tacitly or otherwise, the possibility of
not knowing something and where we claim to be capable of more than what
we actually are.

This is a trap that anyone who wants to flourish as a person should
actively try to avoid.  When we engage with new material, we want to be
mindful of our condition.  We must admit that we are not omniscient,
that we are fallible.  And we have to unequivocally tell ourselves how
our sense of self is a work-in-progress that remains open to influences
of all sorts.

There is no scope for pretense here.  No need to fake being tough or
smart or whatnot.  The open mind, the inquisitive spirit, has no trouble
acknowledging its inadequacies because it understands that it can only
improve by surfacing them, scrutinising them, and working towards
circumventing them.

And so, when we take notes---when we learn---our goal must be to always
keep open a window into the unknown.  Take as much time as you need to
think things through.  Give ideas the space they need to grow and become
fecund.  Then, just like the farmer who respects the land, reap the
fruits in a spirit of sustainability, in a way that allows ideas to grow
again perhaps by means of exposure to yet newer concepts.

What matters then is the attitude we have before implementing the
methodology.  The second brain may be powerful and extremely useful.
But it cannot think for itself and it cannot support the first brain in
rectifying its errors; errors which stem from a position of dogma.

Through such a mindful attitude we can expand our awareness of things
simply by being more considerate, more careful, more deliberate.  It is
not the volume or the efficiency.  It is not about productivity per se,
measured in some dubious unit of output.  This is about how we enrich
the quality of what goes into our mind and what eventually gets codified
into some note-taking system.

* Closing thoughts

As I mentioned in the introduction, I am new to the live-streaming
world.  Perhaps this format is the wrong one, but I just had to start
with something and see how it goes.

If there are any questions in the chat, I will answer them now.  They
can be related to what I just covered, or maybe to something else.  I
will try my best to be helpful.

In short:

+ Emacs can boost one's productivity through its sheer power,
  extensibility, and the interconnectedness of its environment.

+ The second brain is a good idea.  But it is not omnipotent.  You still
  have to put some serious effort into what you are doing.

  - This is true for Emacs in general and for every other field that
    involves some degree of sophistication.
  
+ We grow when we learn to let go.  And we are at our best when we are
  prepared to let go of our most cherished beliefs, such as our sense of
  self once taken as a snapshot.

+ Dogmatism, even one which is latent in what we do, is an impediment to
  our intellectual growth.  Without being mindful of our condition, we
  are forever trapped in a web of predispositions where we pretend to
  know more than we do.

As you could tell, part of this is tangentially about Emacs and even
about taking notes.  The emphasis is on our disposition, the attitude we
ought to maintain.  The rest follows from there and falls right in
place.

That's all.  Thank you for your attention!  Now let's check the chat for
any feedback, otherwise I am concluding this show.
</code></pre>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>The Emacs community bought me a new PC</title>
      <description>Video announcement on my current status with the computer: the Emacs community donated money for a new desktop computer.</description>
      <pubDate>Sun, 29 Aug 2021 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2021-08-29-emacs-community-new-pc/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2021-08-29-emacs-community-new-pc/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=y14Hw6twxgc">https://www.youtube.com/watch?v=y14Hw6twxgc</a></p>
         
         <p>My laptop broke a few weeks ago and I had no other personal computer.
The Emacs community helped me with donations and I am back in action.</p>

<p>In this video I provide an overview of what happened and what I am
currently up to.</p>

<p>Below is the text of my presentation, though note that I did not follow
it too closely:</p>

<pre><code class="language-org">#+TITLE: The Emacs community bought me a computer
#+AUTHOR: Protesilaos Stavrou (https://protesilaos.com)
#+DATE: 2021-08-29

Hello everyone!  My name is Protesilaos, also known as "Prot".

As you can tell from the title of this video, this is a status update on
my current condition: *the Emacs community bought me a new computer.* I
both humbled and elated by the fact.

What follows is a summary of events and an overview of my next steps.

* The laptop's battery malfunctioned

On August 5 my laptop's battery stopped receiving power.  It was
behaving erratically for a couple of days prior, as it would abruptly
not send power to the computer, shutting down, and then make the special
sound it does that it was recharging again.  All this while being
plugged to the wall and with capacity to spare.

On the 5th it stopped recharging and the laptop has not worked since.
At the time I posted a short announcement on my website: there is a
dedicated section about "News", which is separate from my other
writings.  Here it is:

#+begin_quote
Laptop battery out; will be back ASAP

2021-08-05

My laptop’s battery is no longer recharging. I double-checked: it has
probably malfunctioned. I need what remains of it to make some final
backups. I’ll have no regular access to a computer afterwards. Need to
check for replacements and if they are worth it. Will reply to your
emails as soon as I can.

https://protesilaos.com/news/2021-08-05-laptop-battery/
#+end_quote

My only access to a computer was at the one available in my local
community.  This is a mountainous region.  Not many options.

Anyhow, I was expecting to remain out of action for several weeks due to
budget constraints.  Though after eleven days since I posted the
announcement, I noticed many emails from Paypal informing me that I had
received donations.  Checked my account and there were EUR 430!  That
was more than I had ever received before.

I could not check all the emails at the time, because I am subscribed to
several mailing lists and without Emacs+Notmuch it was too difficult to
find what I needed.  So I did not have a clear picture of what triggered
those donations.  Nothing like that had never happened before.

On August 16 I posted another announcement informing people that I got
donations and would be able to buy new equipment (by the way, writing a
blog post on Gitlab is much worse than doing it inside of Emacs).  I
explained that it would probably be better to invest in a mini tower
than pay for exorbitant shipping charges for a battery.

* New desktop computer

Shortly after I posted the second announcement, I contacted a friend who
knows more about computer hardware than I do.  I basically know nothing.
He helped me piece together a mini tower.  Some parts are new.  Others
are second-hand.  I am very happy with the outcome, as this is more
powerful than the laptop I had before (Emacs launches faster, I can load
a heavy website with javascript, etc.).

I also got this camera and a small microphone that I have here on my
side.  Hopefully the video and audio quality are better than before, but
don't expect anything fancy.

Anyhow, while I was waiting for the computer to be assembled, the
donations kept flowing in, but I did not know about them at the time.
When I eventually set up the new machine (on the night of August 26 and
the morning after) and finally got back to my email, I started reading
through the notifications from Paypal and the other emails I received.

The sum had tripled at about EUR 1400!  Many donations included a
message.  Almost all were related to Emacs.  Some people were thanking
me for my contributions in general.  Others referred to my Modus themes.
And others still mentioned the videos I do.

I don't know whether I should post the names of the people who
contributed, as this is private information and I have no permission to
divulge it.  Safe to say, there are many names on that list that I
already know.  We have exchanged emails before or collaborated on some
Emacs-related project.  Also, some of those names are very well known in
the Emacs community.

*I wish to thank everyone for their support.* I was not expecting it and
it has definitely made a noticeable improvement in my daily life.

I am still working through my backlog.  You will get a reply in the
coming days.

* Note on recent code updates and latest philosophy post

I have been busy setting things up.  I already had hand-written notes of
all sorts that I have already digitised and published.  Bash scripts,
Elisp snippets, and an 8k word publication on philosophical themes.

Some highlights:

+ I am back to using BSPWM (a tiling window manager).  Those of you who
  may only know me from my Emacs stuff, I used to have my bespoke
  computing environment, which included BSPWM+Tmux+Vim+CLI.  I still
  mostly using nothing but Emacs, though it is better to control the
  other windows with the keyboard.

+ I now publish the derived =*.el= file of my dotemacs.  This is for
  people who do not need to read through a massive document that
  contains more than 70k words.

+ Those are available in my dotfiles' repo.  My dotemacs is also posted
  in HTML on my website: https://protesilaos.com/dotemacs (includes
  link to the dotfiles).

+ I am back to maintaining my Git projects.  There has been an update to
  my Tempus themes, which are not Emacs-related.  Templates for the
  Alacritty terminal emulator are now available, as well as a dedicated
  =tempus-themes-alacritty= repo.

  - The shell scripts for maintaining the numerous Tempus themes have
    also been updated.

+ And now some philosophy.  I started writing this before my laptop
  failed, but I think the topic relates to the help I received from the
  Emacs community.  I will let you check the actual text on your own.
  It is written in a dialogue style, based on real experiences.  The
  title is /Why you are not important/ and relates to egocentrism,
  escapism, and related concepts.  Instead of my text, let me read you
  this, which many of you already know about.

#+begin_quote
Notmuch is not much of an email program.  It doesn't receive messages
(no POP or IMAP support).  It doesn't send messages (no mail composer,
no network code at all).  And for what it does do (email search) that
work is provided by an external library, Xapian.  So if Notmuch provides
no user interface and Xapian does all the heavy lifting, then what's
left here?  Not much.

https://notmuchmail.org/
#+end_quote
</code></pre>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Miscellaneous custom Emacs commands</title>
      <description>A collection of various custom commands from my bespoke Emacs setup.</description>
      <pubDate>Sat, 24 Jul 2021 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2021-07-24-emacs-misc-custom-commands/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2021-07-24-emacs-misc-custom-commands/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=b5D7QsEgzxw">https://www.youtube.com/watch?v=b5D7QsEgzxw</a></p>
         
         <p>In this video I showcase some custom commands that I have extracted from
my Emacs configuration: <a href="https://protesilaos.com/dotemacs">https://protesilaos.com/dotemacs</a>.  I use them
regularly to optimise various aspects of my workflow and I have learnt
some Elisp by developing them.</p>

<p>I did a video like this <a href="https://protesilaos.com/codelog/2020-08-03-emacs-custom-functions-galore/">about a year
ago</a>
(2020-08-03).  What I shared back then has since been improved upon.
You can find everything in the various <code>.el</code> files that form part of my
setup.</p>

<p>Below is the code I presented in the video.</p>

<pre><code class="language-elisp">;;; Odds and ends from my dotemacs (.emacs) 

;; All those are from my Emacs setup.  The literate configuration is on
;; my website: &lt;https://protesilaos.com/dotemacs&gt;.  Otherwise check the
;; Git source: &lt;https://gitlab.com/protesilaos/dotfiles&gt;.

;;;; Excerpt from prot-comment.el 

;; helper code from prot-common.el, which is `require'd by
;; prot-comment.el
(defvar prot-common--line-regexp-alist
  '((empty . "[\s\t]*$")
    (indent . "^[\s\t]+")
    (non-empty . "^.+$")
    (list . "^\\([\s\t#*+]+\\|[0-9]+[^\s]?[).]+\\)")
    (heading . "^[=-]+"))
  "Alist of regexp types used by `prot-common-line-regexp-p'.")

(defun prot-common-line-regexp-p (type &amp;optional n)
  "Test for TYPE on line.
TYPE is the car of a cons cell in
`prot-common--line-regexp-alist'.  It matches a regular
expression.

With optional N, search in the Nth line from point."
  (save-excursion
    (goto-char (point-at-bol))
    (and (not (bobp))
         (or (beginning-of-line n) t)
         (save-match-data
           (looking-at
            (alist-get type prot-common--line-regexp-alist))))))

;; and what follows is from prot-comment.el
(defcustom prot-comment-comment-keywords
  '("TODO" "NOTE" "XXX" "REVIEW" "FIXME")
  "List of strings with comment keywords."
  :type '(repeat string)
  :group 'prot-comment)

(defcustom prot-comment-timestamp-format-concise "%F"
  "Specifier for date in `prot-comment-timestamp-keyword'.
Refer to the doc string of `format-time-string' for the available
options."
  :type 'string
  :group 'prot-comment)

(defcustom prot-comment-timestamp-format-verbose "%F %T %z"
  "Like `prot-comment-timestamp-format-concise', but longer."
  :type 'string
  :group 'prot-comment)

(defvar prot-comment--keyword-hist '()
  "Input history of selected comment keywords.")

(defun prot-comment--keyword-prompt (keywords)
  "Prompt for candidate among KEYWORDS."
  (let ((def (car prot-comment--keyword-hist)))
    (completing-read
     (format "Select keyword [%s]: " def)
     keywords nil nil nil 'prot-comment--keyword-hist def)))

;;;###autoload
(defun prot-comment-timestamp-keyword (keyword &amp;optional verbose)
  "Add timestamped comment with KEYWORD.

When called interactively, the list of possible keywords is that
of `prot-comment-comment-keywords', though it is possible to
input arbitrary text.

If point is at the beginning of the line or if line is empty (no
characters at all or just indentation), the comment is started
there in accordance with `comment-style'.  Any existing text
after the point will be pushed to a new line and will not be
turned into a comment.

If point is anywhere else on the line, the comment is indented
with `comment-indent'.

The comment is always formatted as 'DELIMITER KEYWORD DATE:',
with the date format being controlled by the variable
`prot-comment-timestamp-format-concise'.

With optional VERBOSE argument (such as a prefix argument
`\\[universal-argument]'), use an alternative date format, as
specified by `prot-comment-timestamp-format-verbose'."
  (interactive
   (list
    (prot-comment--keyword-prompt prot-comment-comment-keywords)
    current-prefix-arg))
  (let* ((date (if verbose
                   prot-comment-timestamp-format-verbose
                 prot-comment-timestamp-format-concise))
         (string (format "%s %s: " keyword (format-time-string date)))
         (beg (point)))
    (cond
     ((or (eq beg (point-at-bol))
          (prot-common-line-regexp-p 'empty))
      (let* ((maybe-newline (unless (prot-common-line-regexp-p 'empty 1) "\n")))
        ;; NOTE 2021-07-24: we use this `insert' instead of
        ;; `comment-region' because of a yet-to-be-determined bug that
        ;; traps `undo' to the two states between the insertion of the
        ;; string and its transformation into a comment.
        (insert
         (concat comment-start
                 ;; NOTE 2021-07-24: See function `comment-add' for
                 ;; why we need this.
                 (make-string
                  (comment-add nil)
                  (string-to-char comment-start))
                 comment-padding
                 string
                 comment-end))
        (indent-region beg (point))
        (when maybe-newline
          (save-excursion (insert maybe-newline)))))
     (t
      (comment-indent t)
      (insert (concat " " string))))))

;;;; Excerpt from prot-diff.el 

;;;###autoload
(defun prot-diff-buffer-dwim (&amp;optional arg)
  "Diff buffer with its file's last saved state, or run `vc-diff'.
With optional prefix ARG (\\[universal-argument]) enable
highlighting of word-wise changes (local to the current buffer)."
  (interactive "P")
  (let ((buf))
    (if (buffer-modified-p)
        (progn
          (diff-buffer-with-file (current-buffer))
          (setq buf "*Diff*"))
      (vc-diff)
      (setq buf "*vc-diff*"))
    (when arg
      (with-current-buffer (get-buffer buf)
        (unless diff-refine
          (setq-local diff-refine 'font-lock))))))

(defvar-local prot-diff--refine-diff-state 0
  "Current state of `prot-diff-refine-dwim'.")

;;;###autoload
(defun prot-diff-refine-cycle ()
  "Produce buffer-local, 'refined' or word-wise diffs in Diff mode.

Upon first invocation, refine the diff hunk at point or, when
none exists, the one closest to it.  On second call, operate on
the entire buffer.  And on the third time, remove all word-wise
fontification."
  (interactive)
  (let ((point (point)))
    (pcase prot-diff--refine-diff-state
      (0
       (diff-refine-hunk)
       (setq prot-diff--refine-diff-state 1))
      (1
       (setq-local diff-refine 'font-lock)
       (font-lock-flush)
       (goto-char point)
       (setq prot-diff--refine-diff-state 2))
      (_
       (revert-buffer)
       (goto-char point)
       (recenter)
       (setq prot-diff--refine-diff-state 0)))))

;;;; Excerpt from prot-simple.el 

;;;;; Narrow DWIM 

;; this is the helper code from prot-common.el
;;;###autoload
(defun prot-common-window-bounds ()
  "Determine start and end points in the window."
  (list (window-start) (window-end)))

;;;###autoload
(defun prot-simple-narrow-visible-window ()
  "Narrow buffer to wisible window area.
Also check `prot-simple-narrow-dwim'."
  (interactive)
  (let* ((bounds (prot-common-window-bounds))
         (window-area (- (cadr bounds) (car bounds)))
         (buffer-area (- (point-max) (point-min))))
    (if (/= buffer-area window-area)
        (narrow-to-region (car bounds) (cadr bounds))
      (user-error "Buffer fits in the window; won't narrow"))))

;;;###autoload
(defun prot-simple-narrow-dwim ()
  "Do-what-I-mean narrowing.
If region is active, narrow the buffer to the region's
boundaries.

If no region is active, narrow to the visible portion of the
window.

If narrowing is in effect, widen the view."
  (interactive)
  (unless mark-ring                  ; needed when entering a new buffer
    (push-mark (point) t nil))
  (cond
   ((and (use-region-p)
         (null (buffer-narrowed-p)))
    (let ((beg (region-beginning))
          (end (region-end)))
      (narrow-to-region beg end)))
   ((null (buffer-narrowed-p))
    (prot-simple-narrow-visible-window))
   (t
    (widen)
    (recenter))))

;;;;; Insert date at point 

(defcustom prot-simple-date-specifier "%F"
  "Date specifier for `format-time-string'.
Used by `prot-simple-inset-date'."
  :type 'string
  :group 'prot-simple)

(defcustom prot-simple-time-specifier "%R %z"
  "Time specifier for `format-time-string'.
Used by `prot-simple-inset-date'."
  :type 'string
  :group 'prot-simple)

;;;###autoload
(defun prot-simple-insert-date (&amp;optional arg)
  "Insert the current date as `prot-simple-date-specifier'.

With optional prefix ARG (\\[universal-argument]) also append the
current time understood as `prot-simple-time-specifier'.

When region is active, delete the highlighted text and replace it
with the specified date."
  (interactive "P")
  (let* ((date prot-simple-date-specifier)
         (time prot-simple-time-specifier)
         (format (if arg (format "%s %s" date time) date)))
    (when (use-region-p)
      (delete-region (region-beginning) (region-end)))
    (insert (format-time-string format))))

;;;;; Escape URL/Email 

(autoload 'ffap-url-at-point "ffap")
(defvar ffap-string-at-point-region)

;;;###autoload
(defun prot-simple-escape-url ()
  "Wrap URL in angled brackets."
  (interactive)
  (when-let ((url (ffap-url-at-point)))
    (let* ((reg ffap-string-at-point-region)
           (beg (car reg))
           (end (cadr reg))
           (string (if (string-match-p "^mailto:" url)
                       (substring url 7)
                     url)))
      (delete-region beg end)
      (insert (format "&lt;%s&gt;" string)))))

;;;;; Rename buffer and file 

;; A variant of this is present in the crux.el package by Bozhidar
;; Batsov.
;;;###autoload
(defun prot-simple-rename-file-and-buffer (name)
  "Apply NAME to current file and rename its buffer.
Do not try to make a new directory or anything fancy."
  (interactive
   (list (read-string "Rename current file: " (buffer-file-name))))
  (let ((file (buffer-file-name)))
    (if (vc-registered file)
        (vc-rename-file file name)
      (rename-file file name))
    (set-visited-file-name name t t)))

;;;; Excerpt from prot-search.el 

;;;;; occur 

;; I copy this from `browse-url-button-regexp' simply because there are
;; contexts where we do not need that dependency.
(defvar prot-common-url-regexp
  (concat
   "\\b\\(\\(www\\.\\|\\(s?https?\\|ftp\\|file\\|gopher\\|"
   "nntp\\|news\\|telnet\\|wais\\|mailto\\|info\\):\\)"
   "\\(//[-a-z0-9_.]+:[0-9]*\\)?"
   (let ((chars "-a-z0-9_=#$@~%&amp;*+\\/[:word:]")
	     (punct "!?:;.,"))
     (concat
      "\\(?:"
      ;; Match paired parentheses, e.g. in Wikipedia URLs:
      ;; http://thread.gmane.org/47B4E3B2.3050402@gmail.com
      "[" chars punct "]+" "(" "[" chars punct "]+" ")"
      "\\(?:" "[" chars punct "]+" "[" chars "]" "\\)?"
      "\\|"
      "[" chars punct "]+" "[" chars "]"
      "\\)"))
   "\\)")
  "Regular expression that matches URLs.
Copy of variable `browse-url-button-regexp'.")

(autoload 'goto-address-mode "goto-addr")

;;;###autoload
(defun prot-search-occur-urls ()
  "Produce buttonised list of all URLs in the current buffer."
  (interactive)
  (let ((buf-name (format "*links in &lt;%s&gt;*" (buffer-name))))
    (add-hook 'occur-hook #'goto-address-mode)
    (occur-1 prot-common-url-regexp "\\&amp;" (list (current-buffer)) buf-name)
    (remove-hook 'occur-hook #'goto-address-mode)))
  
;;;###autoload
(defun prot-search-occur-browse-url ()
  "Point browser at a URL in the buffer using completion.
Which web browser to use depends on the value of the variable
`browse-url-browser-function'.

Also see `prot-search-occur-urls'."
  (interactive)
  (let ((matches nil))
    (save-excursion
      (goto-char (point-min))
      (while (search-forward-regexp prot-common-url-regexp nil t)
        (push (match-string-no-properties 0) matches)))
    (funcall browse-url-browser-function
             (completing-read "Browse URL: " matches nil t))))

;;;;; grep 

(defvar prot-search--grep-hist '()
  "Input history of grep searches.")

;;;###autoload
(defun prot-search-grep (regexp &amp;optional recursive)
  "Run grep for REGEXP.

Search in the current directory using `lgrep'.  With optional
prefix argument (\\[universal-argument]) for RECURSIVE, run a
search starting from the current directory with `rgrep'."
  (interactive
   (list
    (read-from-minibuffer (concat (if current-prefix-arg
                                      (propertize "Recursive" 'face 'warning)
                                    "Local")
                                  " grep for PATTERN: ")
                          nil nil nil 'prot-search--grep-hist)
    current-prefix-arg))
  (unless grep-command
    (grep-compute-defaults))
  (if recursive
      (rgrep regexp "*" default-directory)
    (lgrep regexp "*" default-directory)
    (add-to-history 'prot-search--grep-hist regexp)))

;;;; Honourable mentions (in no particular order): 

;; 1. prot-fonts.el: lets me specify comprehensive sets of font
;;    specifications which I can activate on demand.
;;
;; 2. prot-diary.el: I did a recent video demo about diary+calendar and
;;    how I use them to keep track of time-sensitive events.
;;
;; 3. prot-eww.el: Lots of extras for browsing the web with EWW and now
;;    with Elpher (I did a video some months ago, but will have to cover
;;    the up-and-coming features once the time is right).
;;
;; 4. prot-notmuch.el: There is a recent video about how I use notmuch,
;;    but it does not include the various extras found in that file,
;;    including tagging, custom widgets...
</code></pre>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>My custom extras for Dired (Emacs)</title>
      <description>Video demonstration of the extensions I have for the Emacs file manager (Dired, or else 'directory editor').</description>
      <pubDate>Wed, 21 Jul 2021 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2021-07-21-emacs-dired-custom-extras/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2021-07-21-emacs-dired-custom-extras/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=gRQ05rq03j4">https://www.youtube.com/watch?v=gRQ05rq03j4</a></p>
         
         <p>In this video I demonstrate the custom extensions that I have written
from Emacs’ file manager program: <code>dired</code>.  Dired is very powerful
out-of-the-box and those extras build on what is already available.  In
short: (i) a general purpose command to insert the contents of
subdirectories in the current buffer, (ii) a more convenient tool to
limit the buffer to items that match (or not) a given regular
expression, (iii) commands to navigate subdirectory headings including
an <code>imenu</code> index, (iv) other utilities to determine the external program
for a certain file type.</p>

<p>I document everything at length in my dotemacs and also share the exact
configurations I use daily: <a href="https://protesilaos.com/dotemacs">https://protesilaos.com/dotemacs</a>.</p>

<p>Everything is part of my dotfiles’ repository (and the source code
contains informative documentation strings):
<a href="https://gitlab.com/protesilaos/dotfiles">https://gitlab.com/protesilaos/dotfiles</a>.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Modus themes 1.5.0 for GNU Emacs</title>
      <description>Information about the latest version of my highly accessible themes for GNU Emacs.</description>
      <pubDate>Thu, 15 Jul 2021 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2021-07-15-modus-themes-1-5-0/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2021-07-15-modus-themes-1-5-0/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Just published version <code>1.5.0</code> of <a href="https://protesilaos.com/modus-themes">the Modus
themes</a>.  The detailed release
notes are reproduced below.</p>

<p>For any questions pertaining to this publication, feel welcome to
<a href="https://protesilaos.com/contact/">contact me</a>.</p>

<p>A patch to update the files that are shipped with Emacs28 will be sent
upstream later today (I need a break after taking several hours to write
this log).  The modus-themes package in GNU ELPA fetches its contents
from emacs.git, so expect an update shortly thereafter.</p>

<hr />

<h2>Modus themes version 1.5.0</h2>

<p>By Protesilaos Stavrou <a href="mailto:info@protesilaos.com">info@protesilaos.com</a> on 2021-07-15</p>

<p>This entry outlines the set of changes made to the project since the
release of version 1.4.0 on 2021-05-25.  There have been over 130
commits since then.</p>

<p>Every colour-related modification referenced herein is always
implemented in accordance with the primary accessibility objective of
the themes for a minimum contrast ratio of 7:1 between background and
foreground values in their given combination (the WCAG AAA standard).
Such edits also account for colour-coding that is optimised for the
needs of users with red-green colour deficiency (deuteranopia or
variants).</p>

<p>Here is the URL of the manual: <a href="https://protesilaos.com/modus-themes">https://protesilaos.com/modus-themes</a>.
Or read it from Emacs by evaluating this form:</p>

<pre><code>(info "(modus-themes) Top")
</code></pre>

<p>The themes are built into Emacs version 28 (current development target),
and are available on GNU ELPA as well as other archives.</p>

<h3>Customisation options</h3>

<h4>Overview of new style of sets of properties</h4>

<p>Several variables now accept a list of symbols as a value.  Those
represent properties, which can be combined with each other to realise
the possible styles.  The idea was to simplify their specification in
order to make them easier to both maintain and extend.  Thanks to Philip
Kaludercic for introducing this concept in issue 210:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/210">https://gitlab.com/protesilaos/modus-themes/-/issues/210</a>.</p>

<p>The variables are:</p>

<ul>
  <li>
    <p><code>modus-themes-prompts</code> by Philip Kaludercic in merge request 43:
<a href="https://gitlab.com/protesilaos/modus-themes/-/merge_requests/43">https://gitlab.com/protesilaos/modus-themes/-/merge_requests/43</a></p>
  </li>
  <li>
    <p><code>modus-themes-mode-line</code> by Philip Kaludercic in merge request 40:
<a href="https://gitlab.com/protesilaos/modus-themes/-/merge_requests/40">https://gitlab.com/protesilaos/modus-themes/-/merge_requests/40</a>.</p>
  </li>
  <li>
    <p><code>modus-themes-lang-checkers</code> by Philip Kaludercic in merge request 46:
<a href="https://gitlab.com/protesilaos/modus-themes/-/merge_requests/46">https://gitlab.com/protesilaos/modus-themes/-/merge_requests/46</a></p>
  </li>
  <li><code>modus-themes-org-agenda</code></li>
  <li><code>modus-themes-links</code></li>
  <li><code>modus-themes-headings</code></li>
  <li><code>modus-themes-hl-line</code></li>
  <li><code>modus-themes-paren-match</code></li>
  <li><code>modus-themes-region</code></li>
  <li><code>modus-themes-syntax</code></li>
</ul>

<p>Take <code>modus-themes-syntax</code> as an example.  Up until version 1.4.0, it
would only accept a symbol, signifying a predefined style.  So we had
the possible value <code>faint</code> and another <code>faint-yellow-comments</code>.  To make
a third variant of the “faint” aesthetic, such as by combining it with
the “alt syntax” and/or “green strings”, we would need to write new
presets in the form of <code>faint-green-strings</code>, <code>faint-alt-syntax</code>,
<code>faint-alt-syntax-green-strings</code>, <code>faint-green-strings-yellow-comments</code>,
<code>faint-alt-syntax-green-strings-yellow-comments</code>.  That would have been
inefficient, hence why it was not done.</p>

<p>With the new approach of defining a list of properties, those
combinations are all possible.  Such as:</p>

<pre><code>(setq modus-themes-syntax '(faint alt-syntax))

(setq modus-themes-syntax '(yellow-comments alt-syntax green-strings))
</code></pre>

<p>The order in which the properties are set is not significant.</p>

<p>The doc string of each of the aforementioned variables, or the
corresponding entry in the manual, provides guidance on how to configure
things.  The old forms will continue to work for the time being, though
they are considered deprecated and will stop being supported at a future
date.</p>

<h4>Changes in stylistic variants for variables with sets of properties</h4>

<ul>
  <li>
    <p>The meaning of the “alt syntax” style in <code>modus-themes-syntax</code> has
been redefined.  In the past, it used to have green-coloured strings
and doc strings.  Those are now red.  Some other changes have been
implemented to make the overall looks more consistent.  Users who
liked the old style can retain it by passing this list of properties:</p>

    <pre><code>(alt-syntax green-strings)
</code></pre>

    <p>New styles for the “faint” aesthetic are possible, here shown as lists
of properties:</p>

    <pre><code>(faint green-strings)
(faint alt-syntax)
(faint alt-syntax green-strings)
</code></pre>

    <p>To each of those the <code>yellow-comments</code> property can be added as well.</p>

    <p>Consult the doc string or the manual for the technicalities and code
samples.</p>
  </li>
  <li>
    <p>The <code>modus-themes-hl-line</code> no longer has styles that include only an
underline.  Those proved to be problematic under certain circumstances
and were thus removed.</p>

    <p>Minor changes have been implemented to make the following combination
of properties more consistent, by colourising the underline:</p>

    <pre><code>(accented intense underline)
</code></pre>
  </li>
  <li>
    <p>The <code>modus-themes-paren-match</code> now has styles that include an
<code>underline</code> property.  Those extend the old options, such as:</p>

    <pre><code>(bold intense underline)
</code></pre>
  </li>
  <li>
    <p>The <code>modus-themes-headings</code> have an improved set of styles for the “no
text color” aesthetic.  Those involve the <code>monochrome</code> property, which
can now yield results that include a background (whereas before it was
just colourless text for the headings, optionally without a bold
weight).  As this is an alist, here is an example (always check the
docs for fully fledged code samples):</p>

    <pre><code>(setq modus-themes-headings
      '((1 . (background overline))
        (2 . (overline background rainbow))
        (t . (monochrome no-bold background))))
</code></pre>

    <p>To allow a heading level N to retain its original style, a <code>t</code> value
can be passed.  In the previous version of the themes, it was possible
to use <code>nil</code> for the same purpose, though that is no longer valid.  In
those cases, the fallback value of the alist will be used instead,
such as what is noted above:</p>

    <pre><code>(t . (monochrome no-bold background))
</code></pre>
  </li>
  <li>
    <p>The <code>modus-themes-links</code> provide several new possible styles, due to
an expanded set of properties that includes, among others, <code>bold</code>,
<code>italic</code>, and <code>background</code>.  The documentation covers the details.</p>
  </li>
  <li>
    <p>The <code>modus-themes-lang-checkers</code> can now attain a style that uses a
prominently coloured background in addition to what was available
before as a subtle background and the other variants.</p>
  </li>
</ul>

<h4>New variables</h4>

<ul>
  <li>
    <p>The <code>modus-themes-org-agenda</code> provides the means to refashion the
entirety of the Org agenda buffer.  The value it accepts is an alist,
with some keys expecting a symbol and others a list of properties.
The minutia are covered in its doc string.  A possible configuration
can look like this:</p>

    <pre><code>(setq modus-themes-org-agenda
      '((header-block . (variable-pitch scale-title))
        (header-date . (grayscale workaholic bold-today))
        (scheduled . uniform)
        (habit . traffic-light)))
</code></pre>

    <p><code>modus-themes-org-agenda</code> supersedes the old variable that was specific
to the Org habit graph: <code>modus-themes-org-habit</code>.  There now is a
<code>habit</code> key which accepts the same values as before, plus a new style
that is optimised for users with red-green colour deficiency:
<code>traffic-light-deuteranopia</code>.  Please consult the doc string of
<code>modus-themes-org-agenda</code> or the relevant entry to the manual.</p>

    <p>Thanks to Gustavo Barros for contributing to the creation of this
variable as well as to all other changes in the relevant faces that
were done in the interest of usability.  A full report about
<code>modus-themes-org-agenda</code> with screen shots is available here:
<a href="https://protesilaos.com/codelog/2021-06-02-modus-themes-org-agenda/">https://protesilaos.com/codelog/2021-06-02-modus-themes-org-agenda/</a>.</p>

    <p>A patch has been sent to upstream Org, with its review pending, which
improves upon some of the areas we had identified:
<a href="https://lists.gnu.org/archive/html/emacs-orgmode/2021-06/msg00092.html">https://lists.gnu.org/archive/html/emacs-orgmode/2021-06/msg00092.html</a>.</p>
  </li>
  <li>
    <p>The <code>modus-themes-inhibit-reload</code> controls a new behaviour of
automatically reloading the active theme when an option is set via the
Custom interfaces or with <code>customize-set-variable</code>.  To opt-in to this
feature, set the variable to a <code>nil</code> value.</p>

    <p>Thanks to Philip Kaludercic for implementing this in merge request 40:
<a href="https://gitlab.com/protesilaos/modus-themes/-/merge_requests/40">https://gitlab.com/protesilaos/modus-themes/-/merge_requests/40</a>.</p>

    <p>In the development phase of this option, a bug was identified
pertaining to recursion, as reported by Gustavo Barros in issue 213:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/213">https://gitlab.com/protesilaos/modus-themes/-/issues/213</a>.  Changes
have been made to remove that possibility, as found in merge request
45: <a href="https://gitlab.com/protesilaos/modus-themes/-/merge_requests/45">https://gitlab.com/protesilaos/modus-themes/-/merge_requests/45</a>.</p>

    <p>A thread was started on the emacs-devel mailing list to inquire upon
the technicalities of this option, but it did not gain any traction:
<a href="https://lists.gnu.org/archive/html/emacs-devel/2021-06/msg00828.html">https://lists.gnu.org/archive/html/emacs-devel/2021-06/msg00828.html</a>.</p>

    <p>As such, we have decided to take our chances by pressing on with this
feature.  Users who are interested in it are encouraged to give it a
try and report any possible complications.  Issue 213 remains open.</p>
  </li>
  <li>
    <p>The <code>modus-themes-italic-constructs</code> is the new name of the variable
<code>modus-themes-slanted-constructs</code>.  The term “slant” was considered
too vague or technical and some users could have missed the meaning of
this option.</p>
  </li>
  <li>
    <p>The <code>modus-themes-scale-5</code> is renamed to <code>modus-themes-scale-title</code> to
better convey its utility.</p>
  </li>
</ul>

<h3>Changes to the manual</h3>

<ul>
  <li>
    <p>Rewrote or introduced the documentation for all the customisation
options mentioned above.  Also updated relevant code samples, such as
in the manual’s introduction to the customisation options.  Evaluate
this form for an annotated code overview:</p>

    <pre><code>(info "(modus-themes) Customization Options")
</code></pre>
  </li>
  <li>
    <p>Rephrased a reference to “gamma ray values” as “gamma values”.  Thanks
to Anders Johansson for the contribution in merge request 42:
<a href="https://gitlab.com/protesilaos/modus-themes/-/merge_requests/42">https://gitlab.com/protesilaos/modus-themes/-/merge_requests/42</a>.</p>
  </li>
  <li>
    <p>Removed the Org macro that would insert the build date in the manual’s
introduction.  This was required to make the file reproducible,
otherwise it would keep changing each time a new version of Emacs was
built.  Refer to Emacs bug#48661 by Glenn Morris:
<a href="https://debbugs.gnu.org/cgi/bugreport.cgi?bug=48661">https://debbugs.gnu.org/cgi/bugreport.cgi?bug=48661</a>.</p>
  </li>
  <li>
    <p>Included note on tweaking the key hints that the Avy package produces.
This is in response to issue 215 by Rudolf Adamkovič:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/215">https://gitlab.com/protesilaos/modus-themes/-/issues/215</a>.  Thanks to
Nicolas De Jaeghere for providing the text.</p>
  </li>
  <li>
    <p>Wrote a note on how to control the underlines that are generated in
compilation-mode buffers and related.  It is about configuring the
variable <code>compilation-message-face</code>.</p>
  </li>
  <li>
    <p>Documented how to configure the colours that are applied to the names
of the days in the <code>M-x calendar</code> interface.  The relevant variable is
<code>calendar-weekend-days</code>.</p>
  </li>
  <li>
    <p>Elaborated on a “do it yourself” (DIY) guide on how to benefit from
the hidden feature of the themes about how they handle the bold weight
and the italic slant.  In short, we do not hardcode values and thus
make it easy for users to specify the particularities of what it means
for a face to have a <code>bold</code> or <code>italic</code> attribute.</p>
  </li>
</ul>

<h3>Faces and face groups</h3>

<h4>New entries</h4>

<p>Newly supported packages:</p>

<ul>
  <li>
    <p><code>ledger-mode</code>.  Thanks to Pengji Zhang for the feedback in issue 202:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/202">https://gitlab.com/protesilaos/modus-themes/-/issues/202</a>.</p>
  </li>
  <li>
    <p><code>gotest</code>.  Thanks to Jerry Zhang for the feedback in issue 226:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/226">https://gitlab.com/protesilaos/modus-themes/-/issues/226</a>.</p>
  </li>
  <li>
    <p><code>css-mode</code></p>
  </li>
</ul>

<p>New faces for already supported groups:</p>

<ul>
  <li>
    <p><code>shr-h1</code>, <code>shr-h2</code>, <code>shr-h3</code>, <code>shr-h4</code>, <code>shr-h5</code>, <code>shr-h6</code> of the
shr.el library (simple HTML renderer, as experienced in, for example,
EWW).  Those are available for Emacs28, with a patch by me:
<a href="http://debbugs.gnu.org/cgi/bugreport.cgi?bug=49433">http://debbugs.gnu.org/cgi/bugreport.cgi?bug=49433</a></p>
  </li>
  <li>
    <p><code>apropos-button</code> as a generic face that fontifies faces in apropos
buffers.  Available for Emacs28, with a patch by me:
<a href="https://debbugs.gnu.org/cgi/bugreport.cgi?bug=49162">https://debbugs.gnu.org/cgi/bugreport.cgi?bug=49162</a>.</p>
  </li>
  <li>
    <p><code>selectrum-mouse-highlight</code>.  This makes the mouse hover effect for
selectrum look the same as in most other contexts.  Thanks to okamsn
for the feedback in issue 203:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/203">https://gitlab.com/protesilaos/modus-themes/-/issues/203</a>.</p>
  </li>
</ul>

<h4>Review of existing entries</h4>

<ul>
  <li>
    <p>Added an <code>:extend</code> property to <code>next-error</code> face.  This face is used
for pulse effects.  It is good to have them extend to the edge of the
window, so that they are easier to spot.  Thanks to Gustavo Barros for
the feedback in issue 200, which is about pulse.el:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/200">https://gitlab.com/protesilaos/modus-themes/-/issues/200</a>.</p>
  </li>
  <li>
    <p>Tweaked the various Apropos faces.  The idea was to remove the colour
from the pseudo headings so that we would not get an exaggerated
result of too much variety in the buffer (e.g. that of <code>M-x apropos</code>).
The individual buttons retain their style as links, meaning that they
are governed by the variable <code>modus-themes-links</code>.</p>
  </li>
  <li>
    <p>Revised <code>whitespace-line</code> face to make it look like a warning, as it
ought to be.  Thanks to Pengji Zhang for the feedback in issue 204:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/204">https://gitlab.com/protesilaos/modus-themes/-/issues/204</a>.</p>
  </li>
  <li>
    <p>Reworked the colour-coding of the Hydra and Transient packages.  These
are meant to tone down some excesses with the standard red and to
adapt other colours to it.  Thanks to Gustavo Barros for providing
suggestions and helping me tweak those in issue 206:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/206">https://gitlab.com/protesilaos/modus-themes/-/issues/206</a>.</p>
  </li>
  <li>
    <p>Recoloured <code>transient-argument</code> to improve its uniqueness in its
context and to better comply with the expectation of hydra-style
colour coding, as noted right above.</p>
  </li>
  <li>
    <p>Made the <code>org-agenda-done</code> face conform with the customisation option
<code>modus-themes-success-deuteranopia</code>.  This means that it will be
coloured in blue instead of green when the option is set to a non-nil
value.</p>
  </li>
  <li>
    <p>Grayed out the foreground of the Org block delimiter lines on the
premise that any extra colouration was not needed, given the presence
of a gray background and the overall markup of the block.</p>
  </li>
  <li>
    <p>Toned down the colouration of the <code>org-code</code> face, so that it is
consistent with <code>org-verbatim</code> as well as the colours used in opening
and closing lines of blocks.  Thanks to Gustavo Barros for suggesting
this change in issue 206, though it went through a couple of reviews:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/206">https://gitlab.com/protesilaos/modus-themes/-/issues/206</a>.</p>
  </li>
  <li>
    <p>Simplified the inheritance of the <code>fixed-pitch</code> face, which is used
for internal purposes to ensure alignment of elements in buffers that
must cope with mixed font configurations, such as an org-mode file
with <code>M-x variable-pitch-font</code> enabled.</p>

    <p>[ Recall that the option <code>modus-themes-no-mixed-fonts</code> can disable
  this feature.  Also note that the <code>mixed-fonts</code> package, or
  equivalent, is not needed while using the Modus themes (though there
  is nothing wrong with having them together). ]</p>
  </li>
  <li>
    <p>Reduced the overall intensity of <code>org-mode-line-clock-overrun</code>.
Thanks to Gustavo Barros for the feedback in issue 208:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/208">https://gitlab.com/protesilaos/modus-themes/-/issues/208</a>.</p>
  </li>
  <li>
    <p>Simplified or otherwise tweaked several Org agenda faces to render
possible the new <code>modus-themes-org-agenda</code> variable, as documented
above.  Thanks to Gustavo Barros for the feedback in issue 208:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/208">https://gitlab.com/protesilaos/modus-themes/-/issues/208</a>.</p>
  </li>
  <li>
    <p>Increased ever so slightly the foreground colour of the <code>highlight</code>
face.  This can help improve the perception of highlights, such as
upon hovering over a link with the mouse.  Thanks to Rudolf Adamkovič
for reporting the potential problem in issue 216:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/216">https://gitlab.com/protesilaos/modus-themes/-/issues/216</a>.</p>
  </li>
  <li>
    <p>Prevented the override of the <code>diff-context</code> face when users assign a
<code>bg-only</code> value to the <code>modus-themes-diffs</code> variable.  This makes it
consistent with the intent of this style, which is to work with a
non-nil value for <code>diff-font-lock-syntax</code> (basically to allow the
usual colour highlights of the underlying code syntax in diff
buffers).</p>
  </li>
  <li>
    <p>Ensured consistency of all prompt-related faces by introducing a new
face, <code>modus-themes-prompt</code>, that is inherited by all others (all
prompt styles are controlled by the variable <code>modus-themes-prompts</code>).
This was originally implemented with the <code>comint-highlight-prompt</code>
face, though that could potentially lead to undefined faces if the
comint library was not loaded.  Whereas the <code>modus-themes-prompt</code>
guarantees that we pass a known face at all times.  Thanks to Philip
Kaludercic for bringing this potential bug to my attention in a
comment to merge request 43:
<a href="https://gitlab.com/protesilaos/modus-themes/-/merge_requests/43#note_615224855">https://gitlab.com/protesilaos/modus-themes/-/merge_requests/43#note_615224855</a>.</p>
  </li>
  <li>
    <p>Removed the background colour from the <code>widget-inactive</code> face.  It
would create problems in some cases, such as in Custom buffers for
multiple choice options.</p>
  </li>
  <li>
    <p>Refined <code>calendar-weekend-header</code> and <code>calendar-weekday-header</code> to
emulate the design of physical calendars and remain truthful to the
expectations set by the default configuration of the calendar.el
library.  Weekends now use a faint red, while weekdays are rendered in
the same subtle gray they had before.  The underlying principle is to
make weekends convey a subtle warning to the effect that “this is not
a day for work” (notwithstanding precarious economic realities).  As
noted above, there is an entry in the manual on how to make all days
look the same, be it gray or faint red.  Evaluate this form:</p>

    <pre><code>(info "(modus-themes) Note on calendarel weekday and weekend colors")
</code></pre>
  </li>
</ul>

<h3>Request for feedback on a potential version 2.0.0 of the Modus themes</h3>

<p>While we maintain a cautious stance towards preserving the default
styles, there are some cases where we might be forced to introduce
backward-incompatible changes.</p>

<p>Three such cases that can benefit from user feedback are:</p>

<ul>
  <li>
    <p>Issue 196 on <code>modus-themes-no-mixed-fonts</code>
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/196">https://gitlab.com/protesilaos/modus-themes/-/issues/196</a>.</p>
  </li>
  <li>
    <p>Issue 198 on <code>modus-themes-hl-line</code>
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/198">https://gitlab.com/protesilaos/modus-themes/-/issues/198</a></p>

    <p>[ Note that <code>modus-themes-hl-line</code> now accepts a list of properties as
  described in the opening sections of this entry. ]</p>
  </li>
  <li>
    <p>Issue 218 on <code>modus-themes-diffs</code>
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/218">https://gitlab.com/protesilaos/modus-themes/-/issues/218</a>.</p>
  </li>
</ul>

<h3>Miscellaneous</h3>

<ul>
  <li>
    <p>Recalibrated the value of the colour <code>bg-hl-line-intense</code> in the
palette <code>modus-themes-vivendi-colors</code>.  The change should be
practically indecipherable, though it slightly improves things in
certain contexts.</p>
  </li>
  <li>
    <p>Refined the intensity of the three main yellow colours in
<code>modus-themes-vivendi-colors</code>.</p>
  </li>
  <li>
    <p>Introduced a new <code>modus-themes-faces</code> group so that those are
decoupled from the customisation options in the various Custom
buffers.  Thanks to Philip Kaludercic for the patch in merge request
39: <a href="https://gitlab.com/protesilaos/modus-themes/-/merge_requests/39">https://gitlab.com/protesilaos/modus-themes/-/merge_requests/39</a>.</p>
  </li>
  <li>
    <p>Updated the manual’s “Acknowledgements” section to include all new
users who contributed to the project.</p>
  </li>
</ul>

<p>Thanks again to everyone involved!</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Introducing the variable modus-themes-org-agenda</title>
      <description>Description of the new customisation option for the Modus themes for GNU Emacs.</description>
      <pubDate>Wed, 02 Jun 2021 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2021-06-02-modus-themes-org-agenda/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2021-06-02-modus-themes-org-agenda/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Starting with commit <code>29b5e57e</code> to the <code>main</code> branch of <a href="https://protesilaos.com/modus-themes">the Modus
themes</a>, users have the option to
customise the presentation of the Org agenda.  This will become widely
available through upstream Emacs and GNU ELPA in version <code>1.5.0</code> of the
themes (tentative release frame in early July).  The new variable is
<code>modus-themes-org-agenda</code>, which accepts an alist where each combination
corresponds to specific parts of the agenda buffers.  Those parts are
parameterised to be styled independent of each other.</p>

<p>First an overview of the user-facing code and then some screen shots:</p>

<pre><code class="language-elisp">(setq modus-themes-org-agenda
      '((header-block . (variable-pitch scale-title))
        (header-date . (grayscale bold-today))
        (scheduled . uniform)
        (habit . traffic-light-deuteranopia)))
</code></pre>

<p>Those associations correspond in the given order to:</p>

<ul>
  <li>
    <p>The block headers that describe each agenda view.  For example, when
you do <code>M-x org-agenda</code> followed by <code>n</code> you get a header at the top
that describes the days’ view and one further below which pertains to
all pending tasks.</p>
  </li>
  <li>
    <p>The date headers in the day views.</p>
  </li>
  <li>
    <p>Items with a scheduled timestamp assigned to them.  Remember that
“scheduled” refers to the day/time a task should be started: it is not
a deadline (read <a href="https://bzg.fr/en/on-using-to-do-lists-efficiently/">On using to-do lists
efficiently</a>
(2021-04-26) by Bastien Guerry, the Org maintainer).</p>
  </li>
  <li>
    <p>The <code>org-habit</code> graph for those who use it to track their consistency
over recurring tasks (e.g. daily exercise).</p>
  </li>
</ul>

<p>The <code>header-block</code> and <code>header-date</code> keys accept lists of values which
combine their effects.  For instance, <code>header-date</code> can use a
<code>workaholic</code> value to apply uniform colouration to weekdays and weekends
and combine it with <code>grayscale</code> so that the colours are black/white
instead of the default shades of cyan.  Those lists can be one item
long, such as <code>(header-date . (grayscale))</code>.  For more items, the order
is not significant, so <code>(header-date . (workaholic grayscale))</code> and
<code>(header-date . (grayscale workaholic))</code> yield the same results.</p>

<p>The <code>scheduled</code> and <code>habit</code> keys accept a symbol, as shown in the sample
alist above.</p>

<h2>Default looks</h2>

<p>This is an agenda buffer without any customisations whatsoever.  We use
colour to differentiate the various constructs, but try not to overdo it
as users’ agendas can be rich with entries and too much colour can be a
hindrance to productivity.</p>

<p><a href="https://protesilaos.com/assets/images/attachments/2021-06-02-modus-operandi-org-agenda-default.png"><img alt="Modus Operandi default" src="https://protesilaos.com/assets/images/attachments/2021-06-02-modus-operandi-org-agenda-default.png" /></a></p>

<p><a href="https://protesilaos.com/assets/images/attachments/2021-06-02-modus-vivendi-org-agenda-default.png"><img alt="Modus Vivendi default" src="https://protesilaos.com/assets/images/attachments/2021-06-02-modus-vivendi-org-agenda-default.png" /></a></p>

<h2>Tweaked looks</h2>

<p>Here is the same agenda view with the following styles (remember to read
either the doc string or the manual’s entry on the matter):</p>

<pre><code class="language-elisp">(setq modus-themes-org-agenda
      '((header-block . (variable-pitch scale-title))
        (header-date . (grayscale bold-today))
        (scheduled . uniform)
        (habit . simplified)))
</code></pre>

<p><a href="https://protesilaos.com/assets/images/attachments/2021-06-02-modus-operandi-org-agenda-tweaked.png"><img alt="Modus Operandi tweaked" src="https://protesilaos.com/assets/images/attachments/2021-06-02-modus-operandi-org-agenda-tweaked.png" /></a></p>

<p><a href="https://protesilaos.com/assets/images/attachments/2021-06-02-modus-vivendi-org-agenda-tweaked.png"><img alt="Modus Vivendi tweaked" src="https://protesilaos.com/assets/images/attachments/2021-06-02-modus-vivendi-org-agenda-tweaked.png" /></a></p>

<h2>Deuteranopia styles</h2>

<p>As I have noted before, such as in <a href="https://protesilaos.com/codelog/2021-05-19-modus-themes-status-update/">my latest status
report</a>
on the Modus themes’ progress, we provide the tools to empower users
with red-green colour deficiency (deuteranopia).  This practically means
to avoid unconditional colour-coding that relies on a distinction
between red and green, by substituting green with blue.  To that end,
the themes provide <code>modus-themes-success-deuteranopia</code> (e.g. for Org
“DONE” tasks or Isearch matches) and <code>modus-themes-diffs</code> which has
relevant styles with a red-blue design.</p>

<p>For <code>modus-themes-org-agenda</code>, the only place where we need to introduce
such an alternative is for the <code>org-habit</code> graph.  We do so by tweaking
the <code>traffic-light</code> style/workflow as <code>traffic-light-deuteranopia</code>: it
uses red, yellow, and blue to present its indicators.</p>

<p>With those configurations we get the following samples:</p>

<pre><code class="language-elisp">(setq modus-themes-success-deuteranopia t)

(setq modus-themes-org-agenda
      '((header-block . (variable-pitch scale-title))
        (header-date . (grayscale bold-today))
        (scheduled . uniform)
        (habit . traffic-light-deuteranopia)))
</code></pre>

<p><a href="https://protesilaos.com/assets/images/attachments/2021-06-02-modus-operandi-org-agenda-deuteranopia.png"><img alt="Modus Operandi deuteranopia" src="https://protesilaos.com/assets/images/attachments/2021-06-02-modus-operandi-org-agenda-deuteranopia.png" /></a></p>

<p><a href="https://protesilaos.com/assets/images/attachments/2021-06-02-modus-vivendi-org-agenda-deuteranopia.png"><img alt="Modus Vivendi deuteranopia" src="https://protesilaos.com/assets/images/attachments/2021-06-02-modus-vivendi-org-agenda-deuteranopia.png" /></a></p>

<h2>Attention to detail</h2>

<p>To develop this variable, I benefited from the insights, commentary,
suggestions, and testing of Gustavo Barros <a href="https://gitlab.com/protesilaos/modus-themes/-/issues/208">in issue
208</a> (the
discussion has over 200 comments as of this writing).  Gustavo put
forward the idea of reviewing the old defaults, which eventually led us
to the realisation that only a new customisation option would suffice;
an option in the form of an alist to offer us maximum flexibility.</p>

<p>Internally, the design of <code>modus-themes-org-agenda</code> draws from the
in-progress patch of Philip Kaludercic on the redesign of compound
values for the numerous customisation options the themes provide,
starting with <code>modus-themes-mode-line</code> (refer to the discussion in
<a href="https://gitlab.com/protesilaos/modus-themes/-/merge_requests/40">merge request
40</a>).</p>

<p>Through the discussion with Gustavo, we also identified areas where Org
itself can be improved.  Those will be formalised as patches and sent to
the maintainers.  Their basic idea is to implement faces that are
optimised for their context in the agenda buffers.  I shall work on
those as soon as I am done with this report and will write about them in
those web pages after they are accepted by upstream.</p>

<p>In short, we pay attention to detail and want the best possible result
for all users.  Thanks again to Gustavo for the fruitful collaboration
thus far and thanks in advance to Philip for the forthcoming patches!</p>

<hr />

<p><strong>NOTE:</strong> The <code>modus-themes-org-agenda</code> supersedes the now-deprecated
<code>modus-themes-org-habit</code>.  Users of the old variable can get the exact
same styles by controlling the <code>habit</code> key inside of the new alist, with
possible values still being the same as before, plus the
deuteranopia-optimised addition, namely: <code>nil</code> (default), <code>simplified</code>,
<code>traffic-light</code>, <code>traffic-light-deuteranopia</code>.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Modus themes 1.4.0 for GNU Emacs</title>
      <description>Information about the latest version of my highly accessible themes for GNU Emacs.</description>
      <pubDate>Tue, 25 May 2021 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2021-05-25-modus-themes-1-4-0/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2021-05-25-modus-themes-1-4-0/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Published version <code>1.4.0</code> of <a href="https://protesilaos.com/modus-themes">the Modus
themes</a>.  The detailed release
notes are provided below.  For a general overview of the project watch
<a href="https://protesilaos.com/codelog/2021-05-19-modus-themes-status-update/">the status update of
2021-05-19</a>.
For any questions pertaining to this publication feel welcome to
<a href="https://protesilaos.com/contact/">contact me</a>.</p>

<p>A patch to update the version of the themes that are shipped with Emacs
will be prepared right after this announcement is published.  GNU ELPA
syncs from emacs.git, so expect an update shortly thereafter.</p>

<hr />

<h2>Modus themes version 1.4.0</h2>

<p>By Protesilaos Stavrou <a href="mailto:info@protesilaos.com">info@protesilaos.com</a> on 2021-05-25</p>

<p>This entry records the changes made to the project since the release of
version 1.3.0 on 2021-04-17.  There have been around 100 commits in the
meantime, as is the norm.</p>

<p>If you are coming from older versions, please consult the change log
entry for version 1.0.0 with regard to the breaking changes that were
introduced.</p>

<p>Every colour-related modification is always done in accordance with the
overarching accessibility objective of the themes for a minimum contrast
ratio of 7:1 between background and foreground values in their given
combination (the WCAG AAA standard).</p>

<p>URL of the official manual: <a href="https://protesilaos.com/modus-themes">https://protesilaos.com/modus-themes</a>.  Or
read it with Emacs’ Info reader by evaluating this form:</p>

<pre><code>(info "(modus-themes) Top")
</code></pre>

<p>Remember that the themes are built into Emacs version 28 (current
development target), and are available on GNU ELPA, as well as other
archives.</p>

<h2>Customisations variables</h2>

<ul>
  <li>
    <p>Redefined the style of <code>fg-only</code> that <code>modus-themes-diffs</code> accepts, so
that it no longer uses a red-green colour coding, but applies a
red-blue distinction instead.  The symbol <code>fg-only</code> is a deprecated
alias for the more descriptive <code>fg-only-deuteranopia</code>.</p>

    <p>This is done because green text on a light background is one of the
worst combinations for the purposes of legibility, as it does not
stand out in its context and thus forces undesirable compromises.
Whereas red and blue work well in this case, while making the style
accessible to users with red-green colour deficiency (deuteranopia).
To avoid inconsistencies between Modus Operandi and Modus Vivendi, we
replace green with blue in both themes.  A full report is available in
issue 183 which was created on April 21, 2021:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/183">https://gitlab.com/protesilaos/modus-themes/-/issues/183</a>.</p>
  </li>
  <li>
    <p>Introduced the boolean <code>modus-themes-success-deuteranopia</code> which
replaces all instances of green with blue in contexts where a
red-green colour coding is in effect (e.g. Org TODO vs DONE keywords,
isearch current match…).</p>
  </li>
  <li>
    <p>Implemented <code>modus-themes-mail-citations</code> to control the colouration
of cited text in email-related buffers, such as Gnus or message.el.
It accepts values nil, <code>faint</code>, and <code>monochrome</code>.  By default (the nil
value) the text of citations cycles through blue, green, red, yellow
depending on the level of depth.</p>
  </li>
  <li>
    <p>Expanded the set of options for <code>modus-themes-mode-line</code> to encompass
the values <code>borderless-accented</code>, <code>borderless-accented-3d</code>, and
<code>borderless-accented-moody</code>.  Those are variations of existing styles.
The complete list:</p>

    <ul>
      <li>nil (default)</li>
      <li>3d</li>
      <li>moody</li>
      <li>borderless</li>
      <li>borderless-3d</li>
      <li>borderless-moody</li>
      <li>accented</li>
      <li>accented-3d</li>
      <li>accented-moody</li>
      <li>borderless-accented</li>
      <li>borderless-accented-3d</li>
      <li>borderless-accented-moody</li>
    </ul>
  </li>
  <li>
    <p>Renamed the non-nil values that <code>modus-themes-org-blocks</code> accepts from
<code>grayscale</code>, <code>rainbow</code> to <code>gray-background</code> and <code>tinted-background</code>,
respectively.  The new symbols better describe their effect on Org
source blocks, namely, that they affect the background of the block
rather than the foreground.  The old symbols will still work but are
considered deprecated aliases of the newer ones.</p>
  </li>
  <li>
    <p>Altered the intensity of the <code>modus-themes-hl-line</code> option
<code>accented-background</code> to a more noticeable shade of cyan/teal.  The
old style was too subtle to have the desired effect.  The value
<code>underline-accented</code> is not affected by this change, as it still uses
the same subtle background it did before in combination with a more
pronounced underline colour.</p>
  </li>
  <li>
    <p>Deleted all deprecation warnings that concerned the transition from
version 0.13.0 of the themes to 1.0.0.  Those had been in effect for
several months, spanning four tagged releases.</p>
  </li>
</ul>

<h2>Faces or face groups</h2>

<ul>
  <li>
    <p>Reconsidered the use of colour in all email-related citation faces to
avoid exaggerations and reduce complexity.  Colour values have been
tweaked to tone down their overall intensity, while the number of
colours has been reduced to four.  Gnus and Mu4e have faces for more
levels of citation depth, though those will simply repeat the
four-colour cycle.</p>
  </li>
  <li>
    <p>Made the <code>message-mml</code> face look consistent with the rest of the
buffer while composing an email by changing its foreground colour from
a yellow to a cyan variant.</p>
  </li>
  <li>
    <p>Refined several faces in the Notmuch group in the interest of harmony:</p>

    <ul>
      <li>
        <p>Individual message headers in <code>notmuch-show-mode</code> use bold text in
addition to their existing subtle background to better stand out in
their context. The face is <code>notmuch-message-summary-face</code>.</p>
      </li>
      <li>
        <p>Tags are no longer set unconditionally to a bold typographic weight.
They become such for unread threads in <code>notmuch-search-mode</code>
buffers, as well as for headers of <code>notmuch-show-mode</code>.</p>
      </li>
      <li>
        <p>Removal and addition of tags is now denoted by a strike-through and
an underline effect, respectively, whereas before they both used
underlines with the only difference being their colour.</p>
      </li>
      <li>
        <p>The subject line in <code>notmuch-search-mode</code> buffers uses the main
foreground instead of a dimmed one.  The field of matching authors
has a tweaked foreground to keep the tabular view easy to read.</p>
      </li>
      <li>
        <p>All cryptography-related faces are simplified to not show a coloured
background but only use a foreground colour instead.</p>
      </li>
    </ul>
  </li>
  <li>
    <p>Removed direct support for <code>counsel-notmuch</code> as it already inherits
from the relevant notmuch faces.  The package is thus considered
indirectly supported.</p>
  </li>
  <li>
    <p>Refrained from setting a background to the <code>csv-separator-face</code> as it
would inevitably colourise the negative space in the tabular view
created by <code>csv-align-mode</code>.  A red text colour is used instead, even
though this is not common practice: it is easier to spot for small,
single characters, such as a comma or a semicolon that is meant to
have a special meaning.  Thanks to Kevin Fleming for reporting the
problem and for offering feedback on the choice of colour in issue
194: <a href="https://gitlab.com/protesilaos/modus-themes/-/issues/194">https://gitlab.com/protesilaos/modus-themes/-/issues/194</a>.</p>
  </li>
  <li>
    <p>Distinguished between ordinary links and widget buttons by removing
the underline from the latter (the <code>widget-button</code> face) and altering
the shade of its foreground colour.  Such widgets are used in Emacs’
Custom interfaces and can also be found in the default Notmuch “hello”
buffer that runs <code>notmuch-hello-mode</code>.</p>
  </li>
  <li>
    <p>Tweaked the Ediff current faces to be consistent with <code>diff-mode</code> and
related.  In practice, this only applies when <code>modus-themes-diffs</code> is
set to a value of <code>fg-only-deuteranopia</code>, as it adds a dim background
to the current diff hunk.  All other styles of <code>modus-themes-diffs</code>
look the same as before while using Ediff.</p>
  </li>
  <li>
    <p>Simplified the faces of <code>corfu</code> to match the current state of the
upstream project.  Thanks to Daniel Mendler (its developer) for
reporting this in issue 184:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/184">https://gitlab.com/protesilaos/modus-themes/-/issues/184</a>.</p>
  </li>
  <li>
    <p>Refined all Eshell faces so that the output of <code>ls</code> is consistent with
the overall aesthetic of the themes.  Also made <code>eshell-prompt</code>
inherit from <code>comint-highlight-prompt</code> to look the same as other such
prompts (all are configurable by <code>modus-themes-prompts</code>).</p>
  </li>
  <li>
    <p>Revised <code>eshell-prompt-extras</code> and <code>eshell-git-prompt</code> to use colours
and typographic weight that better match the style of the various
configurations they offer.</p>
  </li>
  <li>
    <p>Simplified <code>eshell-syntax-highlighting</code> to inherit from the standard
Eshell faces, where appropriate.</p>
  </li>
  <li>
    <p>Adjusted the colour of <code>centaur-tabs-active-bar-face</code> and removed the
bespoke <code>fg-tab-accent</code> colour from <code>modus-themes-operandi-colors</code> and
<code>modus-themes-vivendi-colors</code> that was only used by it (and which
should have never been introduced to begin with).</p>
  </li>
  <li>
    <p>Updated the <code>tab-bar-groups</code> faces to match changes upstream.  Thanks
to Fritz Grabo (its developer) for the patch in merge request 35:
<a href="https://gitlab.com/protesilaos/modus-themes/-/merge_requests/35">https://gitlab.com/protesilaos/modus-themes/-/merge_requests/35</a>.</p>
  </li>
  <li>
    <p>Changed the Ibuffer title and group faces to better differentiate
between group titles and special or non-file-visiting buffers.  Thanks
to Nicolas De Jaeghere for the patch in merge request 37:
<a href="https://gitlab.com/protesilaos/modus-themes/-/merge_requests/37">https://gitlab.com/protesilaos/modus-themes/-/merge_requests/37</a>.</p>
  </li>
  <li>
    <p>Ensured that all faces that denote a “success” state, or which are
expected to be coloured in green in a red-green binary, can use an
appropriate blue colour (or colour combination that involves blue)
instead when <code>modus-themes-success-deuteranopia</code> is set to a non-nil
value.</p>
  </li>
  <li>
    <p>Added support for the new <code>bookmark-face</code> in Emacs version 28.  This
means that the built-in bookmark.el library is directly supported by
the themes.  This face can be disabled by setting <code>bookmark-fontify</code>
to nil.  Thanks to Mark Barton for reporting the presence of this new
face and for providing feedback on its style in issue 189:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/189">https://gitlab.com/protesilaos/modus-themes/-/issues/189</a>.</p>
  </li>
  <li>
    <p>Aligned <code>hes-mode</code> (<code>highlight-escape-sequences</code>) with the standard
font-lock faces for regexp grouping.  This means that it conforms with
changes to the <code>modus-themes-syntax</code> variable.</p>
  </li>
  <li>
    <p>Reconfigured the <code>org-quote</code> face to adapt its style depending on the
value of <code>modus-themes-org-blocks</code>.  The default is a subtle blue/cold
foreground colour against the main background.  When a value of
<code>gray-background</code> is assigned to <code>modus-themes-org-blocks</code>, the text’s
colour becomes that of the main foreground in order to maintain a good
level of legibility.  Thanks to Rudolf Adamkovič for the feedback in
issue 190: <a href="https://gitlab.com/protesilaos/modus-themes/-/issues/190">https://gitlab.com/protesilaos/modus-themes/-/issues/190</a>.</p>
  </li>
  <li>
    <p>Refashioned the <code>show-paren-match-expression</code> face to make it apply a
bespoke background colour and not override the expression’s foreground
colours.  This face is used by <code>show-paren-mode</code> when the
customisation variable <code>show-paren-style</code> is set to the <code>expression</code>
value.  Thanks to Rudolf Adamkovič for the feedback in issue 191:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/191">https://gitlab.com/protesilaos/modus-themes/-/issues/191</a>.</p>
  </li>
  <li>
    <p>Made headings level 8 use a fine shade of magenta by default instead
of gray (notwithstanding user changes to <code>modus-themes-headings</code>).
This should have a negligible difference in Org or Outline buffers,
but is more noticeable when editing Elisp in Emacs28 while also using
<code>outline-minor-mode</code> and with <code>outline-minor-mode-highlight</code> set to
<code>override</code>.  That is because several top-level forms use that heading
level with those configurations.</p>
  </li>
</ul>

<h2>Documentation (the manual)</h2>

<ul>
  <li>
    <p>Incorporated a sample configuration block with all customisation
variables and with comment annotations of their available options, in
an attempt to make it easier for users to discover what the themes
provide.</p>
  </li>
  <li>
    <p>Replaced all instances of “modeline” with “mode line” for consistency
with the Emacs style.  Thanks to Rudolf Adamkovič for the patch that
started this process in merge request 33:
<a href="https://gitlab.com/protesilaos/modus-themes/-/merge_requests/33">https://gitlab.com/protesilaos/modus-themes/-/merge_requests/33</a>.</p>
  </li>
  <li>
    <p>Wrote note on setting mode line faces that indicate the state of
<code>god-mode</code>.  Thanks to Rudolf Adamkovič for the feedback in issue 187:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/187">https://gitlab.com/protesilaos/modus-themes/-/issues/187</a>.  Also
thanks to Rudolf for updating the applicable hook in merge request 34:
<a href="https://gitlab.com/protesilaos/modus-themes/-/merge_requests/34">https://gitlab.com/protesilaos/modus-themes/-/merge_requests/34</a>.</p>
  </li>
  <li>
    <p>Listed <code>org-mode</code> variables that affect fontification in blocks:
<code>org-src-fontify-natively</code>, <code>org-fontify-whole-block-delimiter-line</code>,
and <code>org-fontify-quote-and-verse-blocks</code>.  This complements the
already documented variables <code>org-fontify-whole-heading-line</code> and
<code>org-fontify-done-headline</code> that pertain to headings.</p>
  </li>
  <li>
    <p>Included note on fontifying inline Latex expressions in Org buffers.
Thanks to Rudolf Adamkovič for the feedback in issue 190:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/190">https://gitlab.com/protesilaos/modus-themes/-/issues/190</a>.</p>
  </li>
  <li>
    <p>Elaborated on the use of <code>face-remap-add-relative</code> by means of sample
code that cycles through arbitrary colours for the <code>region</code> face.
This is filed under the “Do It Yourself” (DIY) section.</p>
  </li>
  <li>
    <p>Provided a DIY method for adapting the fontification of Org source
block delimiter lines to the value of <code>modus-themes-org-blocks</code>.</p>
  </li>
  <li>
    <p>Expanded the DIY entry on overriding the saturation of the active
theme’s colours with a method that combines the programmatic approach
with manual overrides.  The user can thus specify the colour values
they want to override and let the rest be handled by Elisp.</p>
  </li>
  <li>
    <p>Introduced a section with answers to Frequently Asked Questions (FAQ)
about the design of the themes as well as recommendations on how to
ensure optimal reading conditions or start thinking about them.  The
questions are:</p>

    <ul>
      <li>Is the contrast ratio about adjacent colors?</li>
      <li>What does it mean to avoid exaggerations?</li>
      <li>Why are colors mostly variants of blue, magenta, cyan?</li>
      <li>What is the best setup for legibility?</li>
    </ul>
  </li>
</ul>

<h2>Miscellaneous</h2>

<ul>
  <li>
    <p>Removed superfluous code from internal functions and adapted their
indentation to make them easier to read.</p>
  </li>
  <li>
    <p>Recalibrated some values in <code>modus-themes-vivendi-colors</code> to ensure
consistency in luminance with other colours that are used in their
context.  Those are subtle changes that can only be discerned in
side-by-side comparisons of the before and after states.  Thanks to
André Alexandre Gomes for the feedback in issue 193:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/193">https://gitlab.com/protesilaos/modus-themes/-/issues/193</a>.</p>
  </li>
  <li>
    <p>Changed the saturation and hueness of the bespoke <code>fg-comment-yellow</code>
in <code>modus-themes-operandi-colors</code> and <code>modus-themes-vivendi-colors</code> to
better contrast with its context, while still keeping its luminance
consistent with its role as a colour for comments in code.  This is
used when <code>modus-themes-syntax</code> is configured appropriately (read its
doc string or consult the manual).</p>
  </li>
  <li>
    <p>Attempted to add explicit support for the faces of the built-in
pulse.el library, but ultimately opted against them as the doc string
of <code>pulse-highlight-face</code> advises against customising it, even though
it is not clear from the source code in emacs.git what the problem
could be.  We shall reconsider this case for the next release cycle.
Thanks to Gustavo Barros for the feedback on several aspects of this
topic in issues 185 and 200:</p>

    <ul>
      <li><a href="https://gitlab.com/protesilaos/modus-themes/-/issues/185">https://gitlab.com/protesilaos/modus-themes/-/issues/185</a></li>
      <li><a href="https://gitlab.com/protesilaos/modus-themes/-/issues/200">https://gitlab.com/protesilaos/modus-themes/-/issues/200</a></li>
    </ul>
  </li>
  <li>
    <p>Took the feedback of John Haman in issue 199 as a reminder to complete
the set of possible values for the <code>modus-themes-mode-line</code> variable:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/199">https://gitlab.com/protesilaos/modus-themes/-/issues/199</a>.</p>
  </li>
</ul>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Status update on the Modus themes for Emacs (2021-05-19)</title>
      <description>Video presentation on the state of my highly accessible themes for Emacs (which are also built into Emacs28).</description>
      <pubDate>Wed, 19 May 2021 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2021-05-19-modus-themes-status-update/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2021-05-19-modus-themes-status-update/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=e-ApnxQeeTY">https://www.youtube.com/watch?v=e-ApnxQeeTY</a></p>
         
         <p>In this video presentation I provide an overview of the current state of
my Modus themes: this is a pair of highly accessible themes that are
also built into Emacs28 (the current development target).  You can find
the text of the presentation below.  It is in <code>org-mode</code> notation.  And
here is the themes’ manual: <a href="https://protesilaos.com/modus-themes">https://protesilaos.com/modus-themes</a>.</p>

<hr />

<pre><code class="language-org">#+TITLE: Status update on the Modus themes
#+AUTHOR: Protesilaos Stavrou (https://protesilaos.com)
#+DATE: 2021-05-19

In this presentation I want to update you on the status of the Modus
themes, my highly accessible themes for Emacs.

I will be releasing a new version within the next few days (=1.4.0=), so I
think this is a good opportunity to inform you about what has changed
over the course of the last few months, specifically since August 2020
when I last talked about this subject (version =0.12.0= of the themes).

* Overview of the project

Some quick facts, in case you are not aware of the project:

1. The Modus themes consist of a light and a dark variant:
   ~modus-operandi~ and ~modus-vivendi~.

2. They conform with the WCAG AAA standard for colour contrast (the
   highest legibility standard).  This means that the minimum contrast
   ratio is &gt;= 7:1 between background and foreground.

3. Their overall design is also good for red-green colour deficiency
   (deuteranopia).  It practically means that they avoid cases where it
   is difficult to tell the difference between two constructs because
   those happen to use red and green for colour coding. (more on this
   later)

4. They are built into Emacs since August 2020, which means that they
   are part of Emacs28 (the current development target).  My last video
   about the themes was an announcement of this fact and an opportunity
   to express my gratitude to everyone who had contributed code,
   reported issues, or helped with packaging (the manual has an
   "Acknowledgements" section).

5. There have been over 1700 commits in less than two years since the
   project became public (first commit to the old =master= branch in
   2019-07-09, new commits to the current =main= branch since 2020-11-11).
   I started the Modus themes as soon as I switched to Emacs.

6. Over 300 Emacs packages or face groups are explicitly supported. More
   are covered indirectly, as they inherit styles from some supported
   group.  In practice, the themes should work in virtually every
   scenario and I am always prepared to adapt to changes in the Emacs
   ecosystem.

7. There are 30 customisation variables.  Some are boolean types or
   numbers, though most offer a variety of options.  Every variable's
   doc string provides information on what it does.

8. The project comes with a fully fledged manual.  In source form it is
   available as an =.org= document, though packages get it as an =.info=
   file, which is what Emacs Info reader parses.  The manual covers
   everything that the themes provide and offers guidance on how users
   can enact various reforms on their end.  It is over 23.000 words
   long, without trying to be verbose.

* The switch to =1.0.0=

In December 2020, there was a major refactoring of the project.  The two
themes are now derived from a single source and share customisation
options.  They are also packaged together as =modus-themes=.

Whereas up to version =0.13.0= they were designed as standalone files and
were packaged separately: =modus-operandi-theme=, =modus-vivendi-theme=.
Those old packages have long been removed from MELPA and have already
been deprecated in GNU ELPA, to the effect that they pull in the new
=modus-themes= package when you try to install them.

I will coordinate with Stefan Monnier, the de facto GNU ELPA maintainer,
to decide on the best timing for removing the old packages altogether.
It will probably happen within the next few weeks.

Note that the GNU ELPA package is synced with emacs.git so users of
earlier version can effectively get what is already built into Emacs28.

[ Recall that GNU ELPA is the official package archive of Emacs: users
  do not need to set it up. ]

The refactoring was an ideal opportunity to change the name of the
primary branch from =master= to =main= to be better aligned with the
expectations and sensitivities of users.  So if you were tracking the
git repo, please make sure to update your package accordingly (contact
me if you need help).

* Optimising for red-green colour deficiency (deuteranopia)

As already noted, the themes are good for users with red-green colour
deficiency.  This is because most applied colours in the themes are
situated in the cyan-blue-magenta side of the spectrum or are part of
the gray scale.  That is for technical reasons pertaining to relative
luminance, though it takes aesthetic judgement to determine exact
colours values and combinations in each context.

There are, however, a couple of cases where the themes are not good for
deuteranopia out-of-the-box.  Those are diffs (e.g. Magit) and keywords
that denote success, such as Org's TODO and DONE tags.  Both use a
red-green colour coding system by default.

For those cases, there are customisation options to switch to a red-blue
system instead.  Briefly:

#+begin_src emacs-lisp
(setq modus-themes-diffs 'deuteranopia)
;; OR
(setq modus-themes-diffs 'fg-only-deuteranopia)

(setq modus-themes-success-deuteranopia t)
#+end_src

A sample diff hunk with =(setq modus-themes-diffs 'fg-only-deuteranopia)=:

#+begin_src diff
--- a/emacs/.emacs.d/prot-lisp/prot-notmuch.el
+++ b/emacs/.emacs.d/prot-lisp/prot-notmuch.el
@@ -219,7 +219,8 @@ ;;;; Mode line unread indicator
 ;; does not rely on notmuch as it uses find instead.  The following
 ;; approach is specific to my setup and is what I prefer now.
 
-(defcustom prot-notmuch-mode-line-search-args "tag:unread and tag:inbox"
+(defcustom prot-notmuch-mode-line-search-args
+  "--output:files tag:unread and tag:inbox"
   "Arguments to pass to 'notmuch search' for counting new mail."
   :type 'string
   :group 'prot-notmuch)
#+end_src
* Customisations and the manual

Customisations can help with accessibility.  This is true, for example,
with the red-green colour deficiency I just described.  They can also
make the theme more pleasant for a user, thus indirectly contributing to
their productivity (if something is annoying, it is distracting).

Here are all the user-facing variables, except the ones for overriding
colours:

#+begin_src emacs-lisp
(setq modus-themes-slanted-constructs t
      modus-themes-bold-constructs t
      modus-themes-no-mixed-fonts nil
      modus-themes-subtle-line-numbers t
      modus-themes-success-deuteranopia t
      modus-themes-fringes nil
      modus-themes-lang-checkers nil
      modus-themes-mode-line 'accented-3d
      modus-themes-syntax nil
      modus-themes-hl-line 'underline-accented
      modus-themes-paren-match 'intense
      modus-themes-links 'neutral-underline
      modus-themes-prompts 'subtle-gray
      modus-themes-completions nil
      modus-themes-mail-citations 'desaturated
      modus-themes-region 'bg-only-no-extend
      modus-themes-diffs 'fg-only-deuteranopia
      modus-themes-org-blocks nil
      modus-themes-org-habit nil
      modus-themes-headings '((1 . section)
                              (2 . line-no-bold)
                              (3 . rainbow-section)
                              (t . rainbow-no-bold))
      modus-themes-variable-pitch-ui nil
      modus-themes-variable-pitch-headings nil
      modus-themes-scale-headings nil
      modus-themes-scale-1 1.1
      modus-themes-scale-2 1.15
      modus-themes-scale-3 1.21
      modus-themes-scale-4 1.27
      modus-themes-scale-5 1.33)
#+end_src

Let's switch away from this presentation so I can show you the manual.

* Next version and future plans

I will release version =1.4.0= some time within the next ten days or so.
It depends on whether there is some last minute issue I need to address.
And I also need to find time to write the release notes for the new
version.  Each change log entry is detailed (i.e. several thousand
words) and you can always find them all together in the CHANGELOG.

For the future of the project, I plan to continue with =1.X= releases for
a few more months until I am 100% confident that everything is polished
and works as expected.  I think this is already true, but I prefer to
err on the side of caution.

Once we reach that state I will switch to version =2.0.0= which will mark
the culmination of those two years work into an official super stable
release.  I might have more to share by that time, though don't expect
anything groundbreaking.
</code></pre>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Demo of the Emacs front-end to Notmuch (email)</title>
      <description>Video demonstration of the Emacs interface or mail client that is built on top of the Notmuch mail searcher/indexer.</description>
      <pubDate>Sat, 15 May 2021 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2021-05-15-emacs-notmuch/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2021-05-15-emacs-notmuch/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=g7iF11qamh8">https://www.youtube.com/watch?v=g7iF11qamh8</a></p>
         
         <p>In this video I showcase the Emacs front-end to the <code>notmuch</code> program.
Notmuch is a tool that indexes and searches through a local maildir
directory, while its Emacs interface is a powerful tool for handling
email correspondence, mailing lists, etc.</p>

<p>Notmuch only indexes and searches mail.  To actually fetch and send mail
you need other programs.  I document everything at length in my dotemacs
and I also share my exact configurations for all those tools:
<a href="https://protesilaos.com/dotemacs">https://protesilaos.com/dotemacs</a>.</p>

<p>Everything is part of my dotfiles’ repository:
<a href="https://gitlab.com/protesilaos/dotfiles">https://gitlab.com/protesilaos/dotfiles</a>.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Modus themes 1.3.0 for GNU Emacs</title>
      <description>Information about the latest version of my highly accessible themes for GNU Emacs.</description>
      <pubDate>Sat, 17 Apr 2021 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2021-04-17-modus-themes-1-3-0/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2021-04-17-modus-themes-1-3-0/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Just published version <code>1.3.0</code> of <a href="https://protesilaos.com/modus-themes">the Modus themes</a>.
The detailed release notes are reproduced below.  For any questions
pertaining to this publication feel welcome to <a href="https://protesilaos.com/contact/">contact me</a>.</p>

<p>My immediate task now is to prepare patches for upstream Emacs
(Emacs28).  GNU ELPA syncs directly from emacs.git, so expect an update
shortly thereafter.</p>

<hr />

<h2>Modus themes version 1.3.0</h2>

<p>By Protesilaos Stavrou <a href="mailto:info@protesilaos.com">info@protesilaos.com</a> on 2021-04-17</p>

<p>This entry records the changes introduced to the project since the
publication of version 1.2.0 (2021-03-04).  There have been around 100
commits in the meantime, as is the norm with all releases hitherto.</p>

<p>Every colour-related modification documented herein conforms with the
overarching accessibility objective of the themes for a minimum contrast
ratio of 7:1 between background and foreground values in their given
combination (the WCAG AAA standard).</p>

<p>As the official manual is referenced several times throughout this log,
make sure to store its URL: <a href="https://protesilaos.com/modus-themes">https://protesilaos.com/modus-themes</a>.  Or
read it from Emacs’ Info reader by evaluating this form:</p>

<pre><code>(info "(modus-themes) Top")
</code></pre>

<p>If you are coming from older versions, please consult the change log
entry for version 1.0.0 with regard to the breaking changes that were
introduced.</p>

<p>Remember that the themes are built into Emacs28, and are available on
GNU ELPA, as well as other archives.</p>

<h2>Customisation options</h2>

<ul>
  <li>
    <p>The old <code>modus-themes-intense-hl-line</code> boolean variable has been
replaced by <code>modus-themes-hl-line</code>, which provides several options for
how to style the current line of <code>hl-line-mode</code>.  To retain the old
effect, one must do this:</p>

    <pre><code>;; Replacement for (setq modus-themes-intense-hl-line t)
(setq modus-themes-hl-line 'intense-background)
</code></pre>

    <p>The list of possible values:</p>

    <ol>
      <li>nil (default)</li>
      <li>intense-background</li>
      <li>accented-background</li>
      <li>underline-neutral</li>
      <li>underline-accented</li>
      <li>underline-only-neutral</li>
      <li>underline-only-accented</li>
    </ol>

    <p>The doc string of <code>modus-themes-hl-line</code> as well as the manual
describe the specifics.  Thanks to Manuel Uberti for the feedback in
commit b020592:
<a href="https://gitlab.com/protesilaos/modus-themes/-/commit/b020592e1a96d6e00d7d03faf9c293ec6081d49c">https://gitlab.com/protesilaos/modus-themes/-/commit/b020592e1a96d6e00d7d03faf9c293ec6081d49c</a>.</p>
  </li>
  <li>
    <p>The <code>modus-themes-mode-line</code> variable now accepts three new “accented”
styles that complement the existing set:</p>

    <ol>
      <li>nil (default)</li>
      <li>3d</li>
      <li>moody</li>
      <li>borderless</li>
      <li>borderless-3d</li>
      <li>borderless-moody</li>
      <li>accented</li>
      <li>accented-3d</li>
      <li>accented-moody</li>
    </ol>
  </li>
  <li>
    <p>The <code>modus-themes-region</code> is extended with two new options of an
“accent” background:</p>

    <ol>
      <li>nil (default)</li>
      <li>no-extend</li>
      <li>bg-only</li>
      <li>bg-only-no-extend</li>
      <li>accent</li>
      <li>accent-no-extend</li>
    </ol>
  </li>
  <li>
    <p>The default value of <code>modus-themes-headings</code> for per-level styles can
now be set to nil.  This fixes an inconsistency between the fallback
value, which accepted nil, and the per-level styles which did not.
Thanks to Mauro Aranda for reporting this in issue 163:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/163">https://gitlab.com/protesilaos/modus-themes/-/issues/163</a>.</p>

    <p>Please read the manual for the specifics of this variable, as it is an
alist that accepts several possible combinations.</p>
  </li>
</ul>

<h2>Updates to the manual</h2>

<ul>
  <li>
    <p>Rewrote the sections that cover the aforementioned customisation
options.</p>

    <ul>
      <li>For <code>modus-themes-mode-line</code>, we had to revise the recommendation
for setting <code>face-near-same-color-threshold</code> to 45000.  That value
is appropriate for the <code>moody</code> and <code>borderless-moody</code> options.
Whereas for <code>accented-moody</code> the number should be raised to 70000.
Thanks to Nicolas De Jaeghere for providing this piece of
information:
<a href="https://gitlab.com/protesilaos/modus-themes/-/commit/ab6ba698269f012ec880b690282264649bfb3b0d#note_551342198">https://gitlab.com/protesilaos/modus-themes/-/commit/ab6ba698269f012ec880b690282264649bfb3b0d#note_551342198</a></li>
    </ul>
  </li>
  <li>
    <p>Rephrased the GNU Free Documentation License quote to match the style
of other manuals that are also built into Emacs.</p>
  </li>
  <li>
    <p>Documented <code>org-mode</code> variables that affect the looks of various
fontification styles.</p>
  </li>
  <li>
    <p>Simplified the <code>kbd</code> macro that is declared in modus-themes.org to
allow GNU ELPA’s build system to parse the file for Emacs 26.</p>
  </li>
  <li>
    <p>Documented existing support for <code>tab-bar-mode</code> and <code>tab-line-mode</code>.</p>
  </li>
  <li>
    <p>Wrote a note on how to configure the <code>dimmer.el</code> library by Neil
Okamoto, in order to guarantee consistent results with the themes.
The key is to use the RGB colour space instead of CIELAB.</p>
  </li>
  <li>
    <p>Included note on shr.el fonts and how those are used by EWW and
Elfeed.</p>
  </li>
  <li>
    <p>Added a “Do-It-Yourself” (DIY) section on how to remap buffer-local
faces.</p>
  </li>
  <li>
    <p>Detailed a DIY method to make the buffer-local backdrop of a pdf-tools
page use a distinct colour than the default white for Modus Operandi.
Extended the same principle to Modus Vivendi and described how to
adapt to theme changes (such as via <code>modus-themes-toggle</code>).  Thanks to
Utkarsh Singh for providing feedback on this topic in issue 175:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/175">https://gitlab.com/protesilaos/modus-themes/-/issues/175</a>.</p>
  </li>
  <li>
    <p>Elaborated on DIY techniques to programmatically override the
saturation of all colours specified by the active Modus theme.  Thanks
to user pRot0ta1p for the feedback in issue 166:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/166">https://gitlab.com/protesilaos/modus-themes/-/issues/166</a>.</p>
  </li>
</ul>

<h2>Support for packages</h2>

<p>These are added to the already comprehensive list of explicitly
supported packages:</p>

<ul>
  <li>corfu</li>
  <li>
    <p>embark</p>
  </li>
  <li>
    <p>pandoc-mode.  Thanks to Farasha Euker for the feedback in issue 171:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/171">https://gitlab.com/protesilaos/modus-themes/-/issues/171</a>.</p>
  </li>
  <li>tab-bar-groups</li>
  <li>telega</li>
  <li>vertico</li>
</ul>

<p>Also added support for the <code>help-key-binding</code> face which is part of
Emacs 28.</p>

<h2>Changes to already supported faces or face groups</h2>

<ul>
  <li>
    <p>Renamed all internal faces that the themes defined from
“modus-theme-<em>” to “modus-themes-</em>”.</p>
  </li>
  <li>
    <p>Refashioned all Ediff faces in the process of a major review of this
tools’ overall design.  The manifold changes are:</p>

    <ul>
      <li>
        <p>All inactive diffs respect the underlying fontification
(e.g. programming syntax highlighting).  Before they would override
it with a gray foreground.</p>
      </li>
      <li>
        <p>All inactive diffs have been toned down, as their background is a
finer shade of gray than the prominent one that was used before.</p>
      </li>
      <li>
        <p>There no longer is a visual distinction between even and odd
inactive diffs (by means of different shades of gray).  We are of
the opinion that such subtleties, whose utility is marginal at best,
have no place in themes that are designed for accessibility.</p>
      </li>
      <li>
        <p>All bespoke gray colour combinations that were only intended for
those inactive diffs have thus been removed from each theme’s
palette.</p>
      </li>
      <li>
        <p>Active diffs follow the same style as diff-mode, to ensure
theme-wide consistency (all diff styles are controlled by the
variable <code>modus-themes-diffs</code>).</p>
      </li>
    </ul>

    <p>This topic was discussed at length (with screenshots) in issue 169:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/169">https://gitlab.com/protesilaos/modus-themes/-/issues/169</a>.  Thanks to
peniblec and Nicolas De Jaeghere for their feedback.</p>
  </li>
  <li>
    <p>Made <code>smerge-markers</code> and <code>vdiff-closed-fold-face</code> look like the
headings in <code>diff-mode</code> in the interest of consistency, especially
while configuring the <code>modus-themes-diffs</code> variable.</p>
  </li>
  <li>
    <p>Ensured consistency between all faces that pertain to key bindings in
contexts where the hint to the key is active, in that pressing the key
performs the action (e.g. Magit’s transient buffers, which-key,…).
The <code>help-key-binding</code> for Emacs 28 is not included in this group,
because it applies in cases where the keys are not active, such as in
Help buffers.</p>
  </li>
  <li>
    <p>Refined <code>epa-validity-disabled</code> and <code>epa-validity-high</code> faces.  The
former no longer uses a background, as that was considered an
exaggeration.  While the latter is cast in a cyan hue instead of green
for greater clarity (this relates to the general push to optimise for
red-green colour deficiency, which means to only use green where it is
absolutely necessary and, in such cases, to provide for a blue-ish
alternative, as with the <code>deuteranopia</code> value that can be assigned to
<code>modus-themes-diffs</code>).</p>
  </li>
  <li>
    <p>Reworked <code>ace-window</code>, <code>avy</code>, and <code>magit-blame</code> faces to ensure that
their overlays do not inherit the face properties of underlying text,
such as a different font family or height.  Thanks to Nicolas De
Jaeghere for the multiple merge requests and the concomitant feedback:</p>

    <ul>
      <li><a href="https://gitlab.com/protesilaos/modus-themes/-/merge_requests/27">https://gitlab.com/protesilaos/modus-themes/-/merge_requests/27</a>.</li>
      <li><a href="https://gitlab.com/protesilaos/modus-themes/-/merge_requests/29">https://gitlab.com/protesilaos/modus-themes/-/merge_requests/29</a>.</li>
      <li><a href="https://gitlab.com/protesilaos/modus-themes/-/merge_requests/30">https://gitlab.com/protesilaos/modus-themes/-/merge_requests/30</a>.</li>
      <li><a href="https://gitlab.com/protesilaos/modus-themes/-/merge_requests/31">https://gitlab.com/protesilaos/modus-themes/-/merge_requests/31</a>.</li>
      <li><a href="https://gitlab.com/protesilaos/modus-themes/-/merge_requests/32">https://gitlab.com/protesilaos/modus-themes/-/merge_requests/32</a>.</li>
    </ul>

    <p>Also thanks to Damien Cassou for reporting an intermediate problem
with <code>avy</code> in issue 177; a problem that was eventually addressed by
Nicolas De Jaeghere in merge request 31 (cited above):
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/177">https://gitlab.com/protesilaos/modus-themes/-/issues/177</a>.</p>
  </li>
  <li>
    <p>Optimised the colour combinations used by <code>avy</code> to improve the
distinction between consecutive characters.</p>
  </li>
  <li>
    <p>Reduced the brightness of EWW certificate faces, as they would attract
disproportionate attention to themselves.</p>
  </li>
  <li>
    <p>Reworked all EWW text field and button faces to look more like what
they are supposed to.</p>
  </li>
  <li>
    <p>Removed the slant and distinct foreground from the <code>org-quote</code> face,
as they would interfere with emphasis within the quote block.  Thanks
to Farasha Euker for the feedback in issue 171:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/171">https://gitlab.com/protesilaos/modus-themes/-/issues/171</a>.</p>
  </li>
  <li>
    <p>Reduced the intensity in colouration of <code>org-code</code> and <code>org-macro</code> in
order to avoid exaggerations and prevent their compounding effect in
technical documents that include a high concentration of those faces.
They still retain their overall character and continue to look like
variants of <code>org-verbatim</code>.</p>
  </li>
  <li>
    <p>Extended support for Selectrum’s new <code>selectrum-quick-keys-highlight</code>
and <code>selectrum-quick-keys-match</code>.</p>
  </li>
  <li>
    <p>Adjusted a few bongo faces for improved consistency and a more
pleasant result overall.  Quote from commit 07224cda08:</p>

    <pre><code>Refine bongo faces for consistency

The previous design was meant to keep the track fields distinct
from each other.  However the use of yellow was not good
aesthetically: it does not fit with the rest of the theme.

Upon further experimentation, I realised that the album field
(yellow) is only present when the artist and title fields are also
available: first is the title, then the artist, and finally the
album.  This is true even with `bongo-join-inserted-tracks` set to
a non-nil value.  So changing the face from yellow to a neutral
value is safe.

The other two faces are adapted to look better in the new context.
</code></pre>
  </li>
  <li>
    <p>Made more command prompt faces respond to changes in the variable
<code>modus-themes-prompts</code>.  This concerns faces from the groups cider,
circe, erc, indium, rcirc.</p>
  </li>
  <li>
    <p>Refashioned typescript faces, making them more prominent by default,
while also exposing them to the value of <code>modus-themes-syntax</code>.</p>
  </li>
  <li>
    <p>Revised the style of <code>info-colors-ref-item-command</code>.  This makes
commands look the same as functions, which is technically correct.  It
also predicates the exact style on the value of the variable
<code>modus-themes-syntax</code>.</p>
  </li>
  <li>
    <p>Made all enh-ruby-mode faces adapt to <code>modus-themes-syntax</code>.  Same for
julia.</p>
  </li>
  <li>
    <p>Reconfigured all ztree faces for stylistic consistency.  The
<code>ztreep-diff-model-add-face</code> now responds to the <code>deuteranopia</code> value
that can be passed to <code>modus-themes-diffs</code>.</p>
  </li>
  <li>
    <p>Appended the <code>:extend t</code> attribute to <code>gnus-summary-cancelled</code> and
<code>gnus-summary-selected</code>.  These are only noticeable on Emacs 28
following commit 88409b21c2 in emacs.git.</p>
  </li>
  <li>
    <p>Tweaked all faces of <code>highlight-changes-mode</code> to better deliver on the
intent of that mode.</p>
  </li>
  <li>
    <p>Opted to unconditionally render all <code>dired-async</code> faces in a bold
typographic weight, instead of basing them on a non-nil value for
<code>modus-themes-bold-constructs</code>.  Also changed <code>dired-async-message</code> to
a blue foreground, which further improves the themes’ performance for
red-green colour deficiency.</p>
  </li>
  <li>
    <p>Adjusted the colours of some <code>notmuch-crypto-*</code> faces to better convey
their meaning.</p>
  </li>
  <li>
    <p>Removed remaining conditional logic for underline styles in some
spell- and linter- related faces to ensure that all such cases are
controlled by the variable <code>modus-themes-lang-checkers</code> (building on
work that had been done in the past).</p>
  </li>
  <li>
    <p>Stopped changing <code>keycast-key</code> to match the modeline style, as that
diluted the meaning of the variable <code>modus-themes-mode-line</code>.</p>
  </li>
  <li>
    <p>Tweaked calendar and diary faces for stylistic effect, except for the
<code>diary</code> face which has been converted from a green to a blue variant
for the purposes of coping with cases of red-green colour deficiency.</p>
  </li>
</ul>

<h2>Miscellaneous</h2>

<ul>
  <li>
    <p>Clarified the changes in the backward-incompatible transition from
version 0.13.0 of the themes to &gt;= 1.0.0.  Thanks to Damien Cassou for
reporting the absence of easy-to-find information in issue 174:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/174">https://gitlab.com/protesilaos/modus-themes/-/issues/174</a>.</p>
  </li>
  <li>
    <p>There were three point releases after 1.2.0 which refined certain
aspects of the themes’ packaging so that they could work both as
built-in themes for Emacs as well as in package format via the likes
of GNU ELPA.  Those issues were eventually resolved by Basil
L. Contovounesios:</p>

    <ul>
      <li>Issue 162: <a href="https://gitlab.com/protesilaos/modus-themes/-/issues/162">https://gitlab.com/protesilaos/modus-themes/-/issues/162</a>.</li>
      <li>Emacs bug#45068: <a href="https://debbugs.gnu.org/cgi/bugreport.cgi?bug=45068#218">https://debbugs.gnu.org/cgi/bugreport.cgi?bug=45068#218</a>.</li>
    </ul>
  </li>
  <li>
    <p>Rewrote the <code>modus-themes-headings</code> variable’s declaration to improve
its presentation in Custom interfaces.  Thanks to Mauro Aranda for
submitting the patch for commit 1c60927ebd.</p>
  </li>
  <li>
    <p>Applied the <code>:format</code> keyword to all <code>defcustom</code> forms, based on the
aforementioned patch.  This should make all options look better in the
various Custom interfaces.  Thanks to Mauro Aranda for the feedback in
issue 163: <a href="https://gitlab.com/protesilaos/modus-themes/-/issues/163">https://gitlab.com/protesilaos/modus-themes/-/issues/163</a>.</p>
  </li>
  <li>
    <p>Refined the colour values <code>bg-alt</code> and <code>bg-dim</code> in <code>modus-vivendi</code> to
improve their instantiation on Textual User Interfaces.  In
particular, recalibrated the blue channel of light so that when the
TUI cannot render the colour directly, it defaults to a gray value
instead of a dark blue.</p>
  </li>
  <li>
    <p>Added a “Last-Modified” meta header to modus-themes.el, with gets
updated automatically and uses a timestamp.  This helps users who
track the themes’ git repo directly.  Thanks to Togan Muftuoglu for
the feedback in issue 168:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/168">https://gitlab.com/protesilaos/modus-themes/-/issues/168</a>.</p>
  </li>
  <li>
    <p>Expanded the palette of each theme with accent values that are
reserved for use in the tab-bar.  Those are used by the newly
supported <code>tab-bar-groups</code> package.</p>
  </li>
  <li>
    <p>Recalibrated a few colour combinations to improve their resulting
legibility.  The changes should not be noticeable to the untrained
eye.  Interested parties can consult commit 349ea4a943.</p>
  </li>
  <li>
    <p>Tweaked the hueness of the <code>yellow-active</code> colour of <code>modus-operandi</code>.</p>
  </li>
</ul>

<p>Thanks once again to everyone involved!</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Moral lessons from free software and GNU Emacs</title>
      <description>Video blog on the five lessons I learnt in my life as a computer user, including when I switched to free software and GNU Emacs.</description>
      <pubDate>Fri, 16 Apr 2021 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2021-04-16-emacs-moral-lessons/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2021-04-16-emacs-moral-lessons/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=gwT5PoXrLVs">https://www.youtube.com/watch?v=gwT5PoXrLVs</a></p>
         
         <p>In this video blog I talk about my background with computers.  This
experience helped me learn five important lessons that apply to life in
general and free software in particular, especially GNU Emacs.</p>

<p>Below you can find the text of the presentation in <code>org-mode</code> notation
(this is plain text, in case you do not know).  I just noticed a few
typos and an error in the “forgo […] a loss” statements, but I hope
you get what I wanted to say (“to accept a loss…”).</p>

<hr />

<pre><code>#+TITLE: Vlog: Moral lessons from switching to Emacs
#+AUTHOR: Protesilaos Stavrou (https://protesilaos.com/)

In this video blog I want to share with you a topic that comes up from
time to time in my private email exchanges.  And that is my background
in computers and, basically, how I became an Emacs user.

I want to share with you my story, though I also wish to draw some
lessons from it and generalise them into insights that might be useful
for other people.

I think that as with life in general, our experience with computers goes
through various phases in which we become better at adapting to or
coping with evolving states of affairs, once we gain some familiarity
with the case-specific surroundings or parameters.

Each person is different and there is no one way of learning things.  I
feel though that hearing another person's experiences can broaden our
horizon, the same way we can read a book and get the essence of its
author's years of labour to accumulate the requisite knowledge.

* The first lesson from the early years of adulthood

I did not have a computer growing up.  I first started using one in the
university where I had to submit all my assignments in doc or pdf format
(circa 2006).  At the time I would visit the university's computer lab
to type in my work which I had prepared a manuscript for.

Even my typing skills back then were rudimentary and extremely clumsy.
I was using the index finger on both of my hands to hit the keys and had
to always look down to make sure I was typing the right thing.

This was true for all my years at the university, where I was enrolled
in the humanities.  I did, nonetheless, set up a blog in 2011 which
later evolved into my current website, though I had no technical
understanding of things back then: I just had essays which I thought
were worth publishing.

Then I got a job at the European Parliament and moved to Brussels,
Belgium (2012).  There I would have to use the computer at the office
every single day for most of my tasks.  I would have to write analyses,
edit or prepare amendments to legislation, deal with emails... You get
the idea.

At some point I was working on a colleague's laptop because I did not
have one myself.  The task involved switching between two apps to copy
and paste text back and forth.  By "copy and paste", I mean to right
click, find the "copy" action, then move the mouse and right click again
for "paste".  It was a tedious process and I was still not competent as
a computer user.  So the colleague asked me why I was not using Alt+Tab.
My reaction was to ask what kind of app that is and how to enable it...

That day I learnt how to use a keyboard shortcut.  It was a revelation!
Soon thereafter I followed it up with Ctrl+c, Ctrl+v, Ctrl+z, Ctrl+a.

The first lesson from this experience is that when you have no access to
learning resources, when you are not exposed to a superior paradigm, you
are always trapped in a cycle of self deprecation and perceived
powerlessness.  Humans are good at rationalising their own condition, so
we can come up with plausible explanations such as that "my dexterity is
not good enough", or "it actually helps me write better, as it is more
deliberate", and the like.

Knowledge or a means of learning is key to emancipate yourself from your
own inadequacies.  Never make excuses that hinder your potential to
learn something new.  Always keep an open mind.

* The second lesson before the transition to free software

I was eventually granted a laptop at my work.  It was a Macbook Pro of
some sort, though I still have no idea what its model was.  It did not
matter.  What I cared about was that it was the first time in my life
where I had my own computer---I could use it from home and start
learning more about it in my free time!

So I started personalising my computer experience over time.  This meant
that I would buy various apps that were supposed to help me with
boosting my productivity.  That is when the next set of post-hoc
rationalisations started developing.  I was deluding myself into
thinking that "oh, my efficiency was not good enough, but thankfully
this app has fixed the problem".  It did not.  It could not.

And this is something that relates to Emacs as well.  There is no
magical way to boost your productivity by changing the software you use,
while keeping your mindset constant.  To become productive you have to
identify the patterns in your method or workflow that hamper your
output.  Apps are tools that you use.  And, despite its extensibility,
Emacs can neither read your mind, nor reprogram it.  It all starts with
your mentality and with how you conduct yourself.

I had thus wasted a fair bit of money on shiny apps that claimed to fix
my perceived problems.  I would speculate, in retrospect, that the
absence of tools for self learning that is prevalent in the proprietary
app ecosystem conditions users, perhaps inadvertently, into not
questioning things and conforming with the status quo.

We are all different and this means that what works for one may not
apply to another.  Thus, a user who is not offered genuine alternatives,
a method that helps them decide for themselves, is eventually led to
rationalise their condition as a fault of their own.  This happened to
me.  I bought apps for productivity but did not really change anything
in my life.  Instead I thought that the real reason for not being
productive was with my awkwardness as a computer user, or something
along those lines.

The second lesson I learnt the hard way is that you must always assess
someone on their own merits.  Do not judge people for trying and failing
to meet some other person's standards.  And, extended to computers, do
not fall into the trap of T.I.N.A., which is an acronym for "There Is No
Alternative".  There always are alternatives---always---provided you
change your mindset and stop internalising your induced victimhood as
some supposedly intrinsic quality of yours.  It is not your fault.

* The third lesson after switching to GNU/Linux

I still had that Macbook laptop in 2016 when I finally decided to switch
to free software.  I had read a bit about Linux and how it was
Unix-like, though I did not understand what that meant.  It was too far
removed from my knowledge at the time.  Instead, what helped me get
started was the GNU Image Manipulation Program; a good tool, which goes
by an unfortunate acronym.  Alas!

Anyhow, I installed the GNU IMP on my laptop because I wanted to do some
basic image editing and was not willing to spend money on yet another
shiny app from the store.  The program was good enough for my needs, so
I thought I would check their website in case they were making some
other programs as well.  At the time I was still thinking that "free
software" meant free of charge.  But I soon learnt about the moral
qualities of free software, about liberty and being in control of your
own computer, which means to be in control of a large part of your life.

So I decided to nuke the Mac and replace it with Linux Mint.  This
happened in the summer of 2016.  After a weeks, I decided to distro hop
and went with Arch Linux.  I still had no idea what I was doing.  I just
read the wiki and it somehow worked!

Moving to free software changed my life for the better because it put me
in a course of escaping from /heteronomy/: rule by another.  I wanted
/autonomy/: rule by one self.  My time buying apps for the Mac was one of
heteronomy not only because I did not control the software, but mostly
due to the mentality that is associated with using tools that you do not
understand: you are always dependent on someone else, you are trapped in
that cycle of powerlessness and victimhood that I alluded to earlier.

The third lesson is that autonomy comes at a cost.  It presupposes
responsibility, and that is predicated on discipline.  If you do not
want to be responsible, if you prefer to be spoon-fed what life has to
offer, then you remain in a state of heteronomy with its fake comforts.
This is not about the Mac per se.  It is about understanding your
system.

Here I must stress that discipline is not the same as conformity with
the established order.  No!  Discipline is a virtue.  It is about
overcoming your pernicious rationalisations; those that keep you trapped
in a state of perceived helplessness.  It is about deciding to be in
charge of yourself and being prepared to deal with the challenges from a
position of control.  Discipline is about adding structure to a
theretofore chaotic life.

Never mistake conformism or obedience with virtue.

* The fourth lesson that brought me to GNU Emacs

I had not fully understood the third lesson of autonomy even after I had
switched to GNU/Linux because I retained one very bad habit from the old
days: I was not reading the wealth of documentation on offer.  Instead I
would search the Web for some quick and easy fix, copy-paste it, and
move on to the next task.

This mentality held back my potential.  I was still behaving
heteronomously and I was still rationalising it as "oh, this is too
difficult for me---I was just a student of liberal arts!".  That is
nonsense.  It is a mindset that sets you up for failure.

What made me change habits was the realisation that there is no "cheat
code" or "secret life hack" to gaining expertise in any given field.
You have to earn it.  And this means you have to put some serious effort
into it.

I understand how people feel for finding themselves in such a
predicament.  I was just like that until not too long ago.  Just look
around you: the zeitgeist, the general spirit of our times, is to do
things quickly.  The most common example is some formulaic video
tutorial that promises to make you a pro in five minutes: "here are 10
tricks to be happy!".

We can discern the same pattern in the Emacs space.  You must have
noticed this type of post where someone claims to want to switch to
Emacs but they do not wish to lose any of their productivity.  That only
shows that they do not understand what they want.  They have been led to
believe in this narrative of the quick fix, the secret life hack, the
one magic thing that provides a shortcut to wisdom, and so on.  There is
none of that.  It is all a lie.  You are chasing chimeras.  As for Emacs
in particular, you simply cannot be an Emacs tourist---it does not work
that way.

To learn your way with free software, and to gain expertise in general,
you must commit to it with an open mind.  This means that you must have
already prepared yourself mentally, which implies that you are willing
to forgo some short-term loss in productivity in pursuit of a longer
term transition to a more autonomous modus vivendi.

So the fourth lesson I learnt is to be modest, patient, persistent, and
courageous.  In the free software space this set of virtues boils down
to a simple yet critical instruction: *read the documentation* and be
methodical about it.  Don't entertain unrealistic expectations of doing
it in 5 minutes.  Take your time.  Read, read, read!  And proceed slowly
from the basics to the more advanced issues.

* The fifth lesson after switching to GNU Emacs

I became an Emacs user in the summer of 2019 while I had bought my first
computer in 2018, which is the Thinkpad X220 that I am now using.  I
started from scratch, read the manual, and gradually worked my way to
where I currently am.  I am not a programmer, though that is not an
excuse: it is just a matter of fact as well as a statement of intent to
continue to improve.  But I do not want to talk to you about my
Emacs-related projects.  Those are chronicled in all the videos I have
published, as well as the relevant information I post on my website.

Instead, I want to focus on a general theme which I think hints again at
heteronomy: which is the self-description of the geek or the nerd.  Now
I understand that those terms are given a positive spin, though I am
still not happy with them.  My problem with them comes from the
dichotomy they assume where on the one side you have "normies" and on
the other you get the geeks/nerds.  My experience as a computer user
tells me that there is no such binary there is a spectrum of possible
combinations and permutations in between the extremes.  Plus, I am not
convinced that "normal" means what we want.

"Normal" signifies the norm, the common pattern.  Though it can also
hint at normativity in the form of an exhortation: this is how people
should behave.  I object to such false morality because in the computer
it translates into "people should remain trapped in arrangements they do
not control and in which they are utterly powerless to enact reform".  I
transcended those fake constraints and I believe that everyone can do
the same if only we show them the way.

Furthermore, I object to the characterisation of the free software
expert as some sort of a weirdo, even if you put a positive spin to it.
Remember that we are talking about liberty, about autonomy and a life
that is characterised by an ethos of discipline.  This is not weird: it
is about realising your potential.  It is about tearing apart that
cobweb of induced helplessness and rationalisations that keeps you
subservient to forces outside your control as an individual and as a
member of a wider community.

There is a song of an old Greek rock band which says: "what are we even
doing here in the others' night?" (Τρύπες: Τι γυρεύουμε εμείς μέσα στη
νύχτα των άλλων).  Which I think is a great metaphor for this fifth
lesson: do not live under some other person's shadow, do not use their
language or their associations to make sense of the world because that
forces you to vindicate the categories they assume as constant.

No, I am not a nerd.  I am an Emacs user as a consequence of the fact
that I want more autonomy.  I am unapologetic about it and fully
prepared to deal with the consequences.

* Emacs is just another tool

In conclusion, I must say that the main takeaway from this video blog is
that you need to check your mentality and you need to get into the
mindset of doing things that give you more control.  This involves
learning by reading, as well as through trial and error.

Couched in those terms, Emacs will not solve the problems in your life.
It will not become your powerhouse of productivity after one weekend's
worth of effort.  You are willing to commit to it for the long term
because you are driven by the spirit of liberty, of controlling your own
setup and being very deliberate about how the whole system is pieced
together.

Now I can almost hear your rationalisations speaking: "but it is hard",
"oh, but I am a dummy" and stuff like that.  You need to stop heeding
those calls.  They are not your friends.  If you set yourself up for
failure, you will always think that you are inadequate, that something
is wrong with you.  And your mind will play along, whispering to you
that you are all those things and that you deserve to remain in that
inert state.

What my journey as a computer user taught me, and what Emacs rendered
crystal clear, is that you will always think that you are an idiot for
as long as you remain heteronomous.  Things will begin changing once you
start making steps towards autonomy.  In my case that took a few years.
It is a gradual process which, I think, has made me a competent computer
user as well as a better person.

To recapitulate:

1. Without knowledge you are trapped in a cycle of self deprecation and
   perceived powerlessness.  Seek knowledge.
2. You must always assess someone on their own merits, instead of some
   other person's standards.  Do not fall into the trap of TINA (There
   Is No Alternative), because there always is an alternative.
3. Autonomy comes at cost.  You must be prepared to forgo some
   short-term comfort in order to prepare yourself for gaining control.
   This presupposes discipline (and discipline is not conformism!).
4. Be modest, patient, persistent, and courageous.  In practical terms,
   understand that there is no shortcut to gaining expertise.  For
   software, this means that you must always read the documentation.
5. Do not live under another person's shadow ("in the night of the
   others"); do not play along with their role games; do not vindicate
   their narratives and provide assent to their presumptions.

With those in mind you will be prepared to use free software in general
and GNU Emacs in particular.  You will upgrade yourself.
</code></pre>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Make the Emacs Diary work as an Outline (outline-minor-mode)</title>
      <description>A simple setup to make the Emacs Diary use foldable headings with outline-minor-mode.</description>
      <pubDate>Thu, 15 Apr 2021 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2021-04-15-emacs-diary-outline-minor-mode/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2021-04-15-emacs-diary-outline-minor-mode/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>If you are new to the topic of the Emacs Diary and the Calendar, please
refer to yesterday’s video introduction:
<a href="https://protesilaos.com/codelog/2021-04-14-emacs-diary-calendar/">https://protesilaos.com/codelog/2021-04-14-emacs-diary-calendar/</a>.</p>

<p>One of the major upsides of the Emacs Diary is that it is a regular file
that you can navigate using whatever tools you like: Isearch and <code>M-x
occur</code>, Swiper or <code>consult-line</code>, and the like.  It also is possible to
extend it so that it uses the foldable headings that are familiar to
users of Org mode; a feature that comes from <code>outline-mode</code>.  We can add
that to any major mode by means of <code>outline-minor-mode</code>.</p>

<p>To make the outline work, we need to specify a pattern of what
constitutes a heading within the file.  This is controlled by the
buffer-local variable <code>outline-regexp</code>.  The best candidate for headings
is the Diary’s own comments.  It feels natural for users of Elisp to set
those to <code>;;</code>, so we have this:</p>

<pre><code class="language-elisp">(setq diary-comment-start ";;")
(setq diary-comment-end "")
</code></pre>

<p>Then we need to write the pattern for the headings.  I prefer that
heading levels start with at least three semicolons and a space, which
lets us still use comments for their intended purpose (the same way it
is in <code>elisp-mode</code>):</p>

<pre><code class="language-elisp">;; The pattern evaluates to ";;+\\{2,\\} [^ \t\n]"
(setq outline-regexp (format "%s+\\{2,\\} [^ \t\n]" diary-comment-start))
</code></pre>

<p>We can test our pattern in a new buffer with <code>M-x re-builder</code> and some
text samples:</p>

<pre><code>;; A regular comment.  This should not be matched.

;;; A heading level 1
;;;; A heading level 2
;;;;; A heading level 3
</code></pre>

<p>Now that we got everything in order, we just need to integrate with with
<code>diary-mode</code>:</p>

<pre><code class="language-elisp">(defun my-diary-extras-setup ()
  "Additional setup for Diary mode buffers."
  (when (derived-mode-p 'diary-mode)
    (setq outline-regexp (format "%s+\\{2,\\} [^ \t\n]" diary-comment-start))))

(add-hook 'diary-mode-hook #'my-diary-extras-setup)
</code></pre>

<p>Next time we access the <code>diary-file</code> and <code>diary-mode</code> gets enabled, we
will get headings function the way we want.  It then is up to you to
specify the key bindings you want to make navigating the outline easier.
For example:</p>

<pre><code class="language-elisp">(with-eval-after-load 'outline
  (let ((map outline-minor-mode-map))
    (define-key map (kbd "C-c C-n") 'outline-next-visible-heading)
    (define-key map (kbd "C-c C-p") 'outline-previous-visible-heading)
    (define-key map (kbd "C-c C-f") 'outline-forward-same-level)
    (define-key map (kbd "C-c C-b") 'outline-backward-same-level)
    (define-key map (kbd "C-c C-u") 'outline-up-heading)
    (define-key map (kbd "C-c C-a") 'outline-show-all)
    (define-key map (kbd "C-c C-v") 'outline-move-subtree-down)
    (define-key map (kbd "C-c M-v") 'outline-move-subtree-up)
    (define-key map (kbd "&lt;C-tab&gt;") 'outline-cycle))) ; This is from Emacs28
</code></pre>

<p>Finally we need to enable <code>outline-minor-mode</code>:</p>

<pre><code class="language-elisp">(add-hook 'diary-mode-hook #'outline-minor-mode)
</code></pre>

<p>Or <code>M-x outline-minor-mode</code>.</p>

<p>With those in place, we have set the foundations to make the Diary
buffer very easy to navigate, all while retaining its overall
simplicity.  I am using Daniel Mendler’s <code>consult</code> library, which
includes the <code>consult-outline</code> command (among many others): it lets you
jump to a heading using minibuffer completion and requires no extra
setup the way the built-in <code>imenu</code> does (though Imenu is also great in
its own right).</p>

<p>Personally, I also change the fontification of the Diary buffer, but
will not bother you with the technicalities.  Please refer to my
dotemacs instead: <a href="https://protesilaos.com/dotemacs">https://protesilaos.com/dotemacs</a> (specifically the
section <a href="https://protesilaos.com/dotemacs/#h:b4040bc0-7a2a-4f17-824d-42de621bd1b9">Calendar and Diary (and
prot-diary.el)</a>).</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Emacs Diary and Calendar for tracking appointments</title>
      <description>Video demo of how I use the suite of tools that is built into Emacs for keeping track of time-sensite events in my life.</description>
      <pubDate>Wed, 14 Apr 2021 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2021-04-14-emacs-diary-calendar/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2021-04-14-emacs-diary-calendar/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=NkhgIB64zgc">https://www.youtube.com/watch?v=NkhgIB64zgc</a></p>
         
         <p>In this video I demonstrate how I use the suite of tools that is built
into Emacs for keeping track of time-sensite events in my life.  Its two
main components are the Diary and the Calendar.</p>

<p>Apart from the present demo, I have also written at length about this
topic and discussed my particular opinions in context.  Refer to my
Emacs configuration file (“dotemacs”) for the relevant documentation and
the accompanying configurations: <a href="https://protesilaos.com/dotemacs">https://protesilaos.com/dotemacs</a>.</p>

<p>The specific item that contains my extensions for both the Diary and the
Calendar is called <code>prot-diary.el</code>.  Everything is part of my dotfiles’
repository: <a href="https://gitlab.com/protesilaos/dotfiles">https://gitlab.com/protesilaos/dotfiles</a>.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>EWW and my extras (text-based Emacs web browser)</title>
      <description>Video demo of how I use EWW to browse the Web. This is a text-based web browser that is built into Emacs.</description>
      <pubDate>Thu, 25 Mar 2021 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2021-03-25-emacs-eww/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2021-03-25-emacs-eww/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=1lyGegcYxTI">https://www.youtube.com/watch?v=1lyGegcYxTI</a></p>
         
         <p>In this video I demonstrate the text-based web browser that is built
into Emacs: <code>eww</code>, or else the “Emacs Web Wowser”.  While it is quite
usable without any customisations, I have written several extensions for
it to make my quotidian usage a bit more pleasant.</p>

<p>Refer to my Emacs configuration file (“dotemacs”) for the implementation
details: <a href="https://protesilaos.com/dotemacs">https://protesilaos.com/dotemacs</a>.  The specific item that
contains those extensions is <code>prot-eww.el</code>.  Everything is part of my
dotfiles’ repository: <a href="https://gitlab.com/protesilaos/dotfiles">https://gitlab.com/protesilaos/dotfiles</a>.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Modus themes: packaging changes for GNU ELPA and MELPA</title>
      <description>Announcement about the update of the 'modus-themes' on GNU ELPA and their impending removal from MELPA.</description>
      <pubDate>Wed, 17 Mar 2021 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2021-03-17-modus-themes-packaging-changes/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2021-03-17-modus-themes-packaging-changes/</guid>
      <content:encoded>
        <![CDATA[
         
         <p class="info"><strong>Update 2021-03-28:</strong> We got feedback from MELPA: the <code>modus-themes</code>
will stay there after all!  The newer parts of the discussion start from
here: <a href="https://github.com/melpa/melpa/issues/7245#issuecomment-808810507">https://github.com/melpa/melpa/issues/7245#issuecomment-808810507</a>.</p>

<p>As you may know, the Modus themes are part of Emacs28 for a few months
now.  Their latest version was synced upstream recently (read the
<a href="https://protesilaos.com/codelog/2021-03-04-modus-themes-1-2-0/">release notes of version
1.2.0</a>).
The upgrade took longer than usual because there was a major refactoring
between versions <code>0.13.0</code> and <code>1.0.0</code>: in short, the themes are no
longer standalone files but are instead derived from a common source,
share customisation options and functions/commands, and are easier to
maintain.</p>

<p>This update sets in motion a series of events that I wish to be
transparent about.  Users updating from older versions to &gt;= <code>1.0.0</code>,
are advised to read the <a href="https://lists.gnu.org/archive/html/emacs-devel/2021-03/msg00300.html">announcement on the emacs-devel mailing
list</a>.
The <a href="https://protesilaos.com/modus-themes-changelog/">web page of the change
log</a> is also available.</p>

<h2>Changes for GNU ELPA</h2>

<ul>
  <li>
    <p>GNU ELPA, the official package archive that comes preconfigured with
Emacs, is instructed to build the new <code>modus-themes</code> package directly
from upstream Emacs.  It is considered a <code>:core</code> package, meaning that
whenever we update the themes in emacs.git we will automatically get a
new version on GNU ELPA.  This is meant as a convenience for users who
are running a stable version of Emacs, such as Emacs27.</p>
  </li>
  <li>
    <p>GNU ELPA also serves as a point of reference and credible source
provider for other package archives such as Guix (see <a href="https://gitlab.com/protesilaos/modus-themes/-/issues/111">issue
111</a> on the
Modus themes’ issue tracker).</p>
  </li>
  <li>
    <p>The old GNU ELPA packages <code>modus-operandi-theme</code>,
<code>modus-vivendi-theme</code> (at version <code>0.12.0</code>) will soon be replaced with
code that automatically pulls in the new <code>modus-themes</code> package.
Then, after a grace period of, say, 6 months, the old packages will be
deleted and only <code>modus-themes</code> will remain.  This has been discussed
in Emacs <a href="https://debbugs.gnu.org/cgi/bugreport.cgi?bug=46964">bug#46964</a>.
I still have not had the time to study how those in-place substitutes
will be implemented, but rest assured that it will be done.</p>
  </li>
  <li>
    <p>The <code>modus-themes</code> in emacs.git and, by extension, in elpa.git are
updated whenever I tag a new release.  This happens every month or so.
The next version is <code>1.3.0</code>, which will be published some time in
mid-April.</p>
  </li>
</ul>

<h2>Removal from MELPA</h2>

<p class="info"><strong>Update 2021-03-28:</strong> We got feedback from MELPA: the <code>modus-themes</code>
will stay there after all!  The newer parts of the discussion start from
here: <a href="https://github.com/melpa/melpa/issues/7245#issuecomment-808810507">https://github.com/melpa/melpa/issues/7245#issuecomment-808810507</a>.</p>

<ul>
  <li>
    <p>MELPA maintainers, who have become aware of the status of the themes
as described above, have asked me to delete the <code>modus-themes</code> package
from their archive (see issues
<a href="https://github.com/melpa/melpa/issues/7245">#7245</a> and
<a href="https://github.com/melpa/melpa/issues/7246">#7246</a>).  The idea is
that too many package variants can be confusing to users.</p>
  </li>
  <li>
    <p>I will comply with the MELPA maintainers’ request to delete the
<code>modus-themes</code> package from their archive.  This will be done with a
pull request against melpa.git either before the end of this week or
the beginning of the next.</p>
  </li>
  <li>
    <p>Existing users should be able to switch to the package provided by GNU
ELPA.  I honestly do not know whether the transition will be seamless
(e.g. if you have <code>(use-package modus-themes ...</code>) or whether it will
require manual intervention.  My apologies for whatever inconvenience.</p>
  </li>
</ul>

<hr />

<p>All of the above combined mean that there will no longer be a package
archive that contains a version of the themes corresponding to the
latest commit on modus-themes.git.  To run the bleeding edge, you must
either use something like <code>quelpa</code> or <code>straight.el</code>, or manually clone
and maintain a local copy of
<a href="https://gitlab.com/protesilaos/modus-themes">modus-themes.git</a>.</p>

<p>This is all for now.  Please <a href="https://protesilaos.com/contact/">contact
me</a> if you have any questions.  I am
also posting this announcement on the Modus themes’ issue tracker, in
case you want to comment there: <a href="https://gitlab.com/protesilaos/modus-themes/-/issues/167">https://gitlab.com/protesilaos/modus-themes/-/issues/167</a>.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Modus themes 1.2.0 for GNU Emacs</title>
      <description>Information about the latest version of my highly accessible themes for GNU Emacs.</description>
      <pubDate>Thu, 04 Mar 2021 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2021-03-04-modus-themes-1-2-0/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2021-03-04-modus-themes-1-2-0/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Just published version <code>1.2.0</code> of <a href="https://protesilaos.com/modus-themes">the Modus themes</a>.
The detailed release notes are reproduced below.  For any questions
pertaining to this publication feel welcome to <a href="https://protesilaos.com/contact/">contact me</a>.</p>

<p>My immediate task now is to prepare patches for upstream Emacs so that
the <code>modus-operandi-theme</code> and <code>modus-vivendi-theme</code> can be updated from
version <code>0.13.0</code> to the current one.</p>

<hr />

<h2>Modus themes version 1.2.0</h2>

<p>By Protesilaos Stavrou <a href="mailto:info@protesilaos.com">info@protesilaos.com</a> on 2021-03-04</p>

<p>This entry records the changes introduced to the project since the
publication of version 1.1.0 (2021-01-24).  There have been close to 100
commits in the meantime.</p>

<p>Every colour-related modification documented herein conforms with the
overarching accessibility objective of the themes for a minimum contrast
ratio of 7:1 between background and foreground values in their given
combination (the WCAG AAA standard).</p>

<p>As the official manual is referenced several times throughout this log,
make sure to store its URL: <a href="https://protesilaos.com/modus-themes">https://protesilaos.com/modus-themes</a>.  Or
read it from Emacs’ Info reader by evaluating this form:</p>

<pre><code>(info "(modus-themes) Top")
</code></pre>

<p>If you are coming from older versions, please consult the change log
entry for version 1.0.0 with regard to the breaking changes that were
introduced.</p>

<h2>Prior notice: Upgrading the themes in Emacs28 and GNU ELPA</h2>

<p>Emacs28, the current development target, now includes a <code>require-theme</code>
function.  It is a prerequisite to upgrading the Modus themes to their
current version.  Prior to the definition of that function, the themes
could not transition from their 0.13.0 version to &gt;=1.0.0.  Special
thanks to Basil L. Contovounesios for making it happen, as well Mauro
Aranda and Eli Zaretskii for their feedback and support.</p>

<p>Expect the Modus themes in upstream Emacs to be updated shortly after
the publication of this document.</p>

<p>GNU ELPA currently ships version 0.12.0 of the two standalone packages
<code>modus-operandi-theme</code> and <code>modus-vivendi-theme</code>.  This will change in
the immediate future, as a new <code>modus-themes</code> package will succeed them.
That new package will be built directly from emacs.git, as it must now
become a <code>:core</code> entity instead of being listed as an <code>:external</code> one.</p>

<p>Again, expect a patch to be applied to elpa.git shortly after this
document goes live.</p>

<h2>Customisation options</h2>

<p>[ All variables and their values are documented in the themes’ manual.
  The default value is always nil. ]</p>

<ul>
  <li>
    <p>The new boolean <code>modus-themes-subtle-line-numbers</code> variable will make
the effect of <code>display-line-numbers-mode</code> more subtle when set to a
non-nil value.  It removes the underlying background of the unfocused
lines while toning down their foreground.</p>
  </li>
  <li>
    <p>The <code>modus-themes-diffs</code> variable now accepts a <code>deuteranopia</code> value.
This optimises for red-green colour deficiency in all modes that show
diffs (diff-mode, ediff, Magit…).  In practice, all instances of
green are replaced with appropriate blue hues.  For more on the
matter, read the report which also includes pictures:
<a href="https://protesilaos.com/codelog/2021-02-25-modus-themes-diffs-deuteranopia/">https://protesilaos.com/codelog/2021-02-25-modus-themes-diffs-deuteranopia/</a>.</p>
  </li>
  <li>
    <p>The <code>modus-themes-syntax</code> variable now reads <code>faint-yellow-comments</code>
as a valid value.  This has the same scope as the existing <code>faint</code>
value with the added effect of assigning a yellow tint to comments: it
tones down the saturation of colours that apply to code syntax
(standard font-lock faces and others inheriting from them).</p>
  </li>
  <li>
    <p>The <code>modus-themes-links</code> variable is expanded to accept the new value
of <code>neutral-underline-only</code>: it removes the foreground from the link
and draws a neutral gray underline below it.</p>
  </li>
</ul>

<h2>Refinements to existing packages or face groups</h2>

<ul>
  <li>
    <p>Refashioned all faces that pertain to emails, including Gnus, Mu4e,
Notmuch, and the standard <code>message.el</code> library.  This concerns the
colours that apply to the message header keys and their values, as
well as quote levels.</p>

    <ul>
      <li>
        <p>Introduced more contrasting hues for headings and made more
considerate use of bold typography.  The new colour combinations are
better suited for the task of delivering a sense of structure;
structure that is at once effective and subtle.</p>
      </li>
      <li>
        <p>Applied less intense colours throughout all quotation levels.</p>
      </li>
      <li>
        <p>Revised the sequencing of hues in quotation levels to allow distinct
levels to stand out more without relying on excessive saturation.</p>
      </li>
      <li>
        <p>Aligned the styling of Notmuch header dates with their counterparts
in other similar contexts, in pursuit of theme-wide consistency.</p>
      </li>
    </ul>
  </li>
  <li>
    <p>Rewrote the faces of EBDB to achieve a better sense of structure.</p>
  </li>
  <li>
    <p>Refined the colour combinations of change-log and log-view buffers to
make it easier to discern distinct elements.</p>
  </li>
  <li>
    <p>Tweaked the colours of certain Elfeed constructs to improve the
overall presentation of its search buffers.</p>
  </li>
  <li>
    <p>Changed the colour combinations of <code>M-x re-builder</code> to amplify the
distinction between the matching regexp groups while still reducing
their overall intensity.</p>
  </li>
  <li>
    <p>Reconfigured the <code>diff-changed</code> face to always extend its background
to the edge of the window.  Such “changed” lines are visible in
<code>diff-mode</code> buffers when the command <code>diff-unified-&gt;context</code> is
invoked.</p>
  </li>
  <li>
    <p>Tweaked the colour combinations of ancillary faces in diff buffers
when the variable <code>modus-themes-diffs</code> is set to the value <code>fg-only</code>.
In particular:</p>

    <ul>
      <li>
        <p>Removed the subtle background from the diff hunk headings and changed
their colour to ensure good visibility—guarantees a sense of
structure.</p>
      </li>
      <li>
        <p>Made the context lines inherit the default foreground colour (pure
black/white), so that it contrasts better with red, green, and
yellow text.</p>
      </li>
      <li>
        <p>Applied an accented foreground to the diff header.  This is to
ensure that it is not mistaken for a diff hunk’s context.</p>
      </li>
    </ul>

    <p>All these guarantee that the foreground-only highlights in line-wise
differences draw more attention to themselves.</p>
  </li>
  <li>
    <p>Aligned all the standard hi-* faces with their default aesthetics.
Those are used by commands such as <code>highlight-symbol-at-point</code>.
Thanks to Philip K. for the valuable feedback in issue 157:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/157">https://gitlab.com/protesilaos/modus-themes/-/issues/157</a>.</p>
  </li>
  <li>
    <p>Removed obsolete Consult faces and added new ones, so as to remain in
sync with the latest developments in that project.  Thanks to Daniel
Mendler (Consult’s maintainer) for reporting the inconsistency in
issue 155: <a href="https://gitlab.com/protesilaos/modus-themes/-/issues/155">https://gitlab.com/protesilaos/modus-themes/-/issues/155</a>.</p>

    <ul>
      <li>
        <p><code>consult-preview-line</code> now retains fontification on the current
line, instead of applying its own foreground.</p>
      </li>
      <li>
        <p><code>consult-narrow-indicator</code> is refashioned to be colour-coded in a
consistent way with <code>consult-async-split</code>, as both denote the
delineation of a given scope.</p>
      </li>
      <li>
        <p><code>consult-imenu-prefix</code> contrasts better with text on its current
line, while it adapts to possible customisations performed on the
Consult front.</p>
      </li>
    </ul>
  </li>
  <li>
    <p>Expanded the coverage of <code>marginalia</code> faces to two include
<code>marginalia-char</code> and <code>marginalia-type</code>.  This is done in the interest
of internal consistency between the elements of this set, as their
defaults were also accessible (they inherit from standard faces that
we already support).</p>
  </li>
  <li>
    <p>Opted to render the Notmuch logo in a neutral gray backdrop.  This was
deemed necessary as the logo is an immutable image file that consists
of black and white strokes.  Black and white are the main background
values of <code>modus-vivendi</code> and <code>modus-operandi</code> respectively, which
could lead to confusion.  The neutral gray ensures that the logo is
visible at all times.  Thanks to Utkarsh Singh for the feedback in
issue 122: <a href="https://gitlab.com/protesilaos/modus-themes/-/issues/122">https://gitlab.com/protesilaos/modus-themes/-/issues/122</a>.</p>
  </li>
  <li>
    <p>Refined the dedicated colour values used for diff hunk headings, as
seen in diff-mode buffers or Magit.  The new colours yield text that
is easier to read by slightly toning down the combined intensity of
background+foreground.</p>
  </li>
  <li>
    <p>Removed the subtle background of <code>diff-header</code> and <code>diff-file-header</code>.
The header’s foreground and textual representation suffice to render
it distinct in its context.</p>
  </li>
  <li>
    <p>Tweaked <code>org-agenda-structure</code> and <code>org-scheduled</code> to enhance the
usability of Org Agenda buffers.</p>

    <ul>
      <li>
        <p>Made <code>org-agenda-structure</code> use the largest possible height that we
expose to users: <code>modus-themes-scale-5</code>.</p>
      </li>
      <li>
        <p>Re-calibrated the hueness of <code>org-scheduled</code> and amplified its
saturation, in order to better convey the meaning of a scheduled
task.</p>
      </li>
    </ul>

    <p>Thanks to Morgan Smith for the valuable feedback in issue 153:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/153">https://gitlab.com/protesilaos/modus-themes/-/issues/153</a>.</p>
  </li>
  <li>
    <p>Tweaked the faces of the <code>bongo</code> package to enhance the
distinctiveness of the constructs they style.</p>
  </li>
  <li>
    <p>Adjusted the overall aesthetic of calendar faces in the interest of
theme-wide consistency.</p>
  </li>
  <li>
    <p>Aligned the visual metaphors of <code>org-code</code> with those of <code>org-macro</code>
and <code>org-verbatim</code>, by ensuring that a subtle background is present
behind the affected text, while the foreground conforms with the norms
of the <code>modus-themes-no-mixed-fonts</code> customisation option.</p>
  </li>
  <li>
    <p>Made quoted text in Info buffers look the same as <code>org-verbatim</code> and
Markdown’s inline code.</p>
  </li>
  <li>
    <p>Instructed the faces of <code>info-colors</code> to inherit from appropriate
font-lock faces.  This guarantees that everything works as intended
with the various values of <code>modus-themes-syntax</code>.</p>
  </li>
  <li>
    <p>Refined the language tag of Markdown fenced blocks so that it does
attract unwarranted attention while delivering on its intended
purpose.</p>
  </li>
  <li>
    <p>Rendered explicit the slant of ace-window hints, guaranteeing that it
does not inherit from the underlying text.  Thanks to Nicolas De
Jaeghere for the patch:
<a href="https://gitlab.com/protesilaos/modus-themes/-/merge_requests/27">https://gitlab.com/protesilaos/modus-themes/-/merge_requests/27</a>.</p>

    <p>[ Some more changes have been discussed, but those require tweaks to
  the upstream package. ]</p>
  </li>
  <li>
    <p>Ensured that the <code>org-tree-slide-header-overlay-face</code> never draws an
overline when the variable <code>modus-themes-headings</code> includes a relevant
setting for heading level 1.  Such as with the following example (all
customisation options are documented in the themes’ manual):</p>

    <p>(setq modus-themes-headings
        ‘((1 . section)
          …))</p>
  </li>
  <li>
    <p>Extended support for the new <code>tab-line-tab-inactive-alternate</code> face as
that occurs in Emacs28 (current development target).  It comes into
effect when the variable <code>tab-line-tab-face-functions</code> includes a
value of <code>tab-line-tab-face-inactive-alternating</code>.</p>
  </li>
</ul>

<h2>Newly supported packages</h2>

<ul>
  <li>
    <p>bbdb :: Thanks to Nicolas De Jaeghere in issue 128:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/128">https://gitlab.com/protesilaos/modus-themes/-/issues/128</a>.</p>
  </li>
  <li>
    <p>mmm-mode :: Thanks to Davor Rotim for the feedback in issue 161:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/161">https://gitlab.com/protesilaos/modus-themes/-/issues/161</a>.</p>
  </li>
  <li>
    <p>quick-peek :: Thanks to Burgess Chang for the feedback in issue 151:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/151">https://gitlab.com/protesilaos/modus-themes/-/issues/151</a></p>
  </li>
  <li>
    <p>selectrum-prescient :: This new package was brought to my attention by
Manuel Uberti.  The intent is to phase out the faces in Selectrum,
namely <code>selectrum-primary-highlight</code>, <code>selectrum-secondary-highlight</code>,
though those will still be supported by the Modus themes for the
foreseeable future.</p>
  </li>
  <li>
    <p>shortdoc</p>
  </li>
  <li>
    <p>spray</p>
  </li>
  <li>
    <p>terraform-mode :: Thanks to Kevin Fleming for the feedback in issue
159: <a href="https://gitlab.com/protesilaos/modus-themes/-/issues/159">https://gitlab.com/protesilaos/modus-themes/-/issues/159</a>.</p>
  </li>
  <li>
    <p>vc-dir (Emacs28)</p>
  </li>
</ul>

<h2>Theme-related contributions to the wider community</h2>

<ul>
  <li>
    <p>Contributed the faces for <code>vc-dir</code> in Emacs28 and applied them to all
VC backends: <a href="https://debbugs.gnu.org/cgi/bugreport.cgi?bug=46358">https://debbugs.gnu.org/cgi/bugreport.cgi?bug=46358</a> and
<a href="https://debbugs.gnu.org/cgi/bugreport.cgi?bug=46745">https://debbugs.gnu.org/cgi/bugreport.cgi?bug=46745</a>.</p>
  </li>
  <li>
    <p>Contributed a new face and some related tweaks to Emacs’
<code>shortdoc.el</code>: <a href="http://debbugs.gnu.org/cgi/bugreport.cgi?bug=46748">http://debbugs.gnu.org/cgi/bugreport.cgi?bug=46748</a>.</p>
  </li>
  <li>
    <p>Added faces to the <code>tab-bar-echo-area.el</code> package:
<a href="https://github.com/fritzgrabo/tab-bar-echo-area/pull/2">https://github.com/fritzgrabo/tab-bar-echo-area/pull/2</a>.</p>
  </li>
  <li>
    <p>Reported issue that led to the review of the header face in
<code>org-tree-slide</code>: <a href="https://github.com/takaxp/org-tree-slide/issues/38">https://github.com/takaxp/org-tree-slide/issues/38</a>.</p>
  </li>
  <li>
    <p>Helped refine the faces of the <code>rlist.el</code> package:
<a href="https://gitlab.com/mmemmew/rlist/-/commit/386f506d0110bebedd3a48ff972adba96e2232eb">https://gitlab.com/mmemmew/rlist/-/commit/386f506d0110bebedd3a48ff972adba96e2232eb</a>.</p>
  </li>
</ul>

<h2>Documentation updates</h2>

<ul>
  <li>
    <p>Wrote about the indirect support for the <code>goggles</code> package.  I had
helped write its faces, as was documented in the changelog for version
1.1.0 of the themes.  Thanks to Manuel Uberti for bringing this to my
attention in issue 158:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/158">https://gitlab.com/protesilaos/modus-themes/-/issues/158</a>.</p>
  </li>
  <li>
    <p>Explained that any changes to <code>custom-theme-load-path</code> and/or
<code>custom-theme-directory</code> should be performed before the themes are
loaded.  Thanks to Adrian Manea for the feedback in issue 156:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/156">https://gitlab.com/protesilaos/modus-themes/-/issues/156</a>.</p>
  </li>
  <li>
    <p>Included the symbol <code>bg-only</code> in the <code>modus-themes-diffs</code> section of
the manual.  Thanks to user “iSeeU” for reporting the omission:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/154">https://gitlab.com/protesilaos/modus-themes/-/issues/154</a>.</p>
  </li>
  <li>
    <p>Expanded the manual’s entry on the semantics of the optional heading
scale used by the themes (the variables <code>modus-themes-scale-[1-5]</code>).
The values 1-4 apply to regular headings, with 4 being the largest on
the scale.  While <code>modus-themes-scale-5</code> is reserved for special
headers, such as Org <code>#+title:</code> or the Org Agenda’s structure.  Recall
that those variables only come into effect if the boolean variable
<code>modus-themes-scale-headings</code> is set to a non-nil value (it is nil by
default).</p>
  </li>
  <li>
    <p>Made several changes to the <code>modus-themes.org</code> file in an effort to
improve the accuracy of the generated Texinfo markup.  Thanks to Glenn
Morris and Richard Stallman for their valuable feedback in
<a href="https://debbugs.gnu.org/cgi/bugreport.cgi?bug=45143">https://debbugs.gnu.org/cgi/bugreport.cgi?bug=45143</a>.</p>
  </li>
  <li>
    <p>Recorded a note in the manual on the intended colouration of
backgrounds applied by <code>mmm-mode</code>.  It explains what the constraints
are from an accessibility standpoint and how users can configure
things locally for more colourful, yet inaccessible, backgrounds.
Thanks to Davor Rotim for the valuable feedback in issue 161:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/161">https://gitlab.com/protesilaos/modus-themes/-/issues/161</a>.</p>
  </li>
  <li>
    <p>Refined the manual’s note on prism.el, simplifying the code samples
and clarifying the commentary.</p>
  </li>
  <li>
    <p>Wrote indices for concepts, variables, functions, which are rendered
in the Info manual.</p>
  </li>
  <li>
    <p>Elaborated on the possibility—and relative merits—of implementing
a theme-agnostic hook for advanced face configurations, as opposed to
relying on <code>modus-themes-after-load-theme-hook</code>.  Thanks to Daniel
Mendler for the valuable feedback in issue 131:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/131">https://gitlab.com/protesilaos/modus-themes/-/issues/131</a>.</p>
  </li>
</ul>

<h2>Miscellaneous</h2>

<ul>
  <li>
    <p>Rewrote the documentation string of the <code>deftheme</code> declaration of
<code>modus-operandi</code> and <code>modus-vivendi</code>.</p>
  </li>
  <li>
    <p>Provided links to the Info nodes that discuss each of the <code>defcustom</code>
declarations.</p>
  </li>
  <li>
    <p>Wrote doc strings for every custom face that the themes define.</p>
  </li>
</ul>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Use ‘M-x query-replace-regexp’ to downcase matches</title>
      <description>Pro tip on evaluating Emacs Lisp forms during a query-replace session.</description>
      <pubDate>Wed, 03 Mar 2021 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2021-03-03-emacs-query-replace-downcase/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2021-03-03-emacs-query-replace-downcase/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Earlier today I wanted to convert a bunch of Org meta data keywords to
lower case notation, with the help of <code>isearch-forward-regexp</code> and
<code>query-replace-regexp</code>.  This included everything from special comments,
like <code>#+TITLE:</code> to property drawers in the form of <code>:PROPERTIES:</code>.
There were 340 such cases in my file and I was reluctant to do so
manually.  Thankfully, Emacs makes such a task fairly simple once you
get past the essentials, because it lets you evaluate arbitrary Elisp
forms for the replacement text.  This includes the possibility of
running some function on a matched regexp group.  In this case that
function was <code>(downcase OBJECT)</code>.</p>

<p>First I needed a regular expression that would capture all targets.
<code>isearch-forward-regexp</code> and its <code>query-replace-regexp</code> counterpart
expect a single backslash for the escape character, so I ended up with
this pattern:</p>

<pre><code>^\(#\|:\)[^ ].*?:
</code></pre>

<p>If I were to test this in the buffer, I could use <code>M-x re-builder</code>,
which however requires double backslashes (same for when you write Elisp
code):</p>

<pre><code>^\\(#\\|:\\)[^ ].*?:
</code></pre>

<ul>
  <li>
    <p>Once I was sure of the regular expression I had to use, I went to the
top of the buffer and invoked <code>isearch-forward-regexp</code> (bound to
<code>C-M-s</code> by default).</p>
  </li>
  <li>
    <p>Entered the pattern <code>^\(#\|:\)[^ ].*?:</code>, got live feedback of the
matching items, and switched to <code>query-replace</code> with <code>C-%</code>
(<code>isearch-query-replace</code>).  When the Isearch is regexp-aware so is the
corresponding <code>query-replace</code>.</p>
  </li>
  <li>
    <p>For the replacement text I instructed the command to evaluate the
<code>downcase</code> function.  This is done by escaping the comma operator
(<code>,</code>) and then supplying the function with a regexp group.  Because I
wished to match everything, the group should be <code>\0</code>.  Which means
that the replacement should be expressed thus: <code>\,(downcase \0)</code>.</p>
  </li>
</ul>

<p>Try this with any string in a buffer, say, <code>Hello</code>:</p>

<ul>
  <li><code>M-x query-replace-regexp</code></li>
  <li><code>Hello</code></li>
  <li><code>\,(upcase \0)</code></li>
</ul>

<p>Confirm the operation and you should get <code>HELLO</code>.  This works with
multiple groups and can read a series of Elisp forms.  An example with
<code>Hello world</code>:</p>

<ul>
  <li><code>M-x query-replace-regexp</code></li>
  <li><code>\(Hello\) \(world\)</code></li>
  <li><code>\,(downcase \1) \,(capitalize \2)</code></li>
</ul>

<p>Which should give you <code>hello World</code>.</p>

<p>The elegant minimalism of the <code>query-replace</code> interface grants you the
power to either replace each match one at a time or hit the exclamation
mark (<code>!</code>) to answer “yes to all”.  This is what I did to downcase all
340 matches.  Voila!  All of my Org file’s meta data were converted to
lower case in one go.</p>

<p>Finally, I discovered <code>query-replace-regexp-eval</code> which saves you from
adding the escaped comma operator for the replacement’s Elisp form.
However its doc string reads thus:</p>

<pre><code>Interactive use of this function is deprecated in favor of the
‘\,’ feature of ‘query-replace-regexp’.  For non-interactive use, a loop
using ‘search-forward-regexp’ and ‘replace-match’ is preferred.
</code></pre>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>The Modus themes now cover deuteranopia in diffs</title>
      <description>Report on supporting colour combinations that account for red-green color deficiency in diff buffers.</description>
      <pubDate>Thu, 25 Feb 2021 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2021-02-25-modus-themes-diffs-deuteranopia/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2021-02-25-modus-themes-diffs-deuteranopia/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>I just extended the <code>modus-themes-diffs</code> customisation option with the
ability to read a <code>deuteranopia</code> value.</p>

<p><em>Deuteranopia</em> describes insensitivity to the green channel of light.
This includes the possibility of not distinguishing between red and
green; the two colours that are typically codified in diff buffers as
denoting “removed” and “added” states respectively.</p>

<p>Evaluating <code>(setq modus-themes-diffs 'deuteranopia)</code> and then re-loading
the theme of choice will replace all instances of green in diff buffers
with variants of blue.  This affects the standard <code>diff-mode</code>, Ediff,
Smerge, Magit, Vdiff, and any other library that inherits from those.</p>

<p>Below are illustrations of the phenomenon while using Magit diffs as an
example with word-wise differences enabled (“refined” diffs).  We try to
simulate how deuteranopia is experienced.  Those with it see red and
green as variants of brown/yellow and interpret shades of magenta
without its red channel’s intensity (magenta consists primarily of red
and blue, so it looks closer to a desaturated blue).</p>

<h2>Red VS Green (default)</h2>

<p><a href="https://protesilaos.com/assets/images/attachments/2021-02-25-modus-operandi-diff-default.png"><img alt="Modus Operandi default" src="https://protesilaos.com/assets/images/attachments/2021-02-25-modus-operandi-diff-default.png" /></a></p>

<p><a href="https://protesilaos.com/assets/images/attachments/2021-02-25-modus-operandi-diff-default-simulated.png"><img alt="Modus Operandi default simulated" src="https://protesilaos.com/assets/images/attachments/2021-02-25-modus-operandi-diff-default-simulated.png" /></a></p>

<p><a href="https://protesilaos.com/assets/images/attachments/2021-02-25-modus-vivendi-diff-default.png"><img alt="Modus Vivendi default" src="https://protesilaos.com/assets/images/attachments/2021-02-25-modus-vivendi-diff-default.png" /></a></p>

<p><a href="https://protesilaos.com/assets/images/attachments/2021-02-25-modus-vivendi-diff-default-simulated.png"><img alt="Modus Vivendi default simulated" src="https://protesilaos.com/assets/images/attachments/2021-02-25-modus-vivendi-diff-default-simulated.png" /></a></p>

<h2>Red VS Blue (‘deuteranopia’ option)</h2>

<p><a href="https://protesilaos.com/assets/images/attachments/2021-02-25-modus-operandi-diff-deuteranopia.png"><img alt="Modus Operandi deuteranopia" src="https://protesilaos.com/assets/images/attachments/2021-02-25-modus-operandi-diff-deuteranopia.png" /></a></p>

<p><a href="https://protesilaos.com/assets/images/attachments/2021-02-25-modus-operandi-diff-deuteranopia-simulated.png"><img alt="Modus Operandi deuteranopia simulated" src="https://protesilaos.com/assets/images/attachments/2021-02-25-modus-operandi-diff-deuteranopia-simulated.png" /></a></p>

<p><a href="https://protesilaos.com/assets/images/attachments/2021-02-25-modus-vivendi-diff-deuteranopia.png"><img alt="Modus Vivendi deuteranopia" src="https://protesilaos.com/assets/images/attachments/2021-02-25-modus-vivendi-diff-deuteranopia.png" /></a></p>

<p><a href="https://protesilaos.com/assets/images/attachments/2021-02-25-modus-vivendi-diff-deuteranopia-simulated.png"><img alt="Modus Vivendi deuteranopia simulated" src="https://protesilaos.com/assets/images/attachments/2021-02-25-modus-vivendi-diff-deuteranopia-simulated.png" /></a></p>

<h2>Accessibility broadly understood</h2>

<p>While <a href="https://protesilaos.com/modus-themes/">the Modus themes</a> are not
designed with the express goal of optimising for deuteranopia across all
of Emacs’ interfaces, we can always make steps towards improving that
experience.  The fact that we already conform with the highest standard
for colour contrast (WCAG AAA) puts us in a good position to expand our
commitment to accessibility so that it accounts for variations in colour
perception.</p>

<p>Designing for such cases is no mean feat.  I had to take screenshots of
all relevant configurations, display them in the GNU Image Manipulation
Program, and set a filter that simulates deuteranopia vision: from GNU
IMP’s “View” menu, search for “Display Filters” and then apply “Color
Deficient Vision”.  That had to be done tens of times during the testing
process.</p>

<p>What inspired me to add support for <code>(setq modus-themes-diffs
'deuteranopia)</code> is the blog post of Sam Kleinman (aka “tycho garen”) on
<a href="https://tychoish.com/post/editor-themes/">Editor Themes</a> (2021-02-24),
which echoes the relevant wishlist item on my project’s issue tracker
(<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/118">issue 118</a>)
where I got feedback from Hörmetjan Yiltiz.</p>

<p>Apart from its immediate utility, consider this new feature a statement
of intent: I want to make the themes as accessible as possible and am
willing to act on user feedback to that end.</p>

<p>If you believe something does not work properly while using either
<code>modus-operandi</code> or <code>modus-vivendi</code>, please do not hesitate to bring the
issue to my attention.  Colour is a complex phenomenon: even when we
formally conform with the lofty target of a minimum 7:1 contrast in
relative luminance, we may still encounter cases where things do not
“feel right”.  We can always fix those outright or, where necessary,
benefit from the power of Elisp to provide the relevant customisation
options.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Introducing the Modus themes exporter (Emacs library)</title>
      <description>Description of the initial publication of the "modus-themes-exporter.el".</description>
      <pubDate>Mon, 22 Feb 2021 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2021-02-22-modus-themes-exporter/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2021-02-22-modus-themes-exporter/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>I just published the initial version of the <code>modus-themes-exporter.el</code>
as part of <a href="https://gitlab.com/protesilaos/dotfiles">my dotfiles’ Emacs setup</a>.</p>

<p>The library consists of a set of functions that help produce a port of
the active Modus theme (<code>modus-operandi</code> or <code>modus-vivendi</code>) for a
variety of external applications.  Currently covered entries are XTerm,
URxvt (rxvt-unicode), Xfce terminal (xfce4-terminal), and Vim (gui and
term, as well as NeoVim).</p>

<p>The exporting is performed by the <code>modus-themes-exporter-export</code>
command.  Its doc string reads thus:</p>

<pre><code>Export current Modus theme using TEMPLATE.

When called interactively, TEMPLATE is chosen from a list of candidates
using completion.  Else it must be a string that corresponds to the car
of a cons cell in `modus-themes-exporter-templates-alist'.

The output is stored in the kill ring.

When called from Lisp with optional FILE as a path to a regular file,
write there directly.  When called interactively with the universal
prefix argument (\\[universal-argument]), prompt for FILE instead:
supplying a non-existent path will create that file outright.  Once the
output has been written to the file, prompt to visit it.

With optional NO-VISIT, either as a non-nil symbol in Lisp or a
double prefix argument interactively, do not prompt to visit the
file.
</code></pre>

<p>Here is a side-by-side presentation of Emacs (left) and Xfce’s terminal
with Vim running inside of it (right).  Click to enlarge.</p>

<p><a href="https://protesilaos.com/assets/images/attachments/2021-02-22-modus-themes-exporter-light.png"><img alt="Modus themes exporter light" src="https://protesilaos.com/assets/images/attachments/2021-02-22-modus-themes-exporter-light.png" /></a></p>

<p><a href="https://protesilaos.com/assets/images/attachments/2021-02-22-modus-themes-exporter-dark.png"><img alt="Modus themes exporter dark" src="https://protesilaos.com/assets/images/attachments/2021-02-22-modus-themes-exporter-dark.png" /></a></p>

<h2>What is this all about?</h2>

<p>Before we start… No, I do not intend to switch back to Vim: I plan to
remain a full time Emacs user for years to come.</p>

<p>The <code>modus-themes-exporter.el</code> allows me to satisfy the demand for
porting my Modus themes to other applications.  I have done so several
times in private, where I would supply an Xresources file or whatnot to
the person emailing me.  I have also offered my consent to those who
asked whether they could create ports for VSCode—none of those
endeavours has yielded any results as far as I know.</p>

<p>Demand for ports has also been expressed publicly on the issue tracker
of the Modus themes’ repo (<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/116">issue
116</a>) as well
as my dotfiles (<a href="https://gitlab.com/protesilaos/dotfiles/-/issues/31">issue
31</a>).  Furthermore,
Simon Pugnet wrote the
<a href="https://github.com/polaris64/modus-exporter">modus-exporter</a> a while
ago which, however, is targeted at older versions of the themes prior to
their major refactoring in version <code>1.0.0</code>.</p>

<p>I must stress that insofar as external text editors are concerned <strong>the
output of this library does not constitute a fully fledged theme</strong>.
Creating an original piece, especially one with the technical
requirements for uncompromising legibility that the Modus themes stand
for, requires a lot of work and painstaking attention to detail (I have
been doing so for ~1.5 years now, ever since day one of switching to
Emacs).  No automated process invented thus far can replace the
context-specific aesthetic judgement of the designer.  Still, a
templating system can help <em>approximate</em> what has already been achieved,
while acknowledging the constraints imposed by the incompatibilities
between the various applications and Emacs (e.g. how they highlight
code, as illustrated in the screenshots above).</p>

<p>With those granted, the ports cover a subset of the palette used in each
of the Modus themes which means, ipso facto, that they make compromises
in the interest of maintainability.  Similarly, there is no plan
whatsoever to replicate the customisation options that the real themes
for Emacs have, as well as implement anew their advanced,
“do-it-yourself” features (consult <a href="https://protesilaos.com/modus-themes/">the Modus themes’
manual</a>, which, by the way, is
pushing towards 20k words).</p>

<h2>Experimental release</h2>

<p>Please bear in mind that there is still a lot of work to be done before
this library reaches a certain standard of quality:</p>

<ol>
  <li>Refine the templating system.</li>
  <li>Test automated processes for outputting ports in bulk.</li>
  <li>Improve Vim’s colour mapping so that it mimics that of Emacs, to the
extent possible.</li>
  <li>Write ports for the GTK Source view widget (Gedit, GNOME Builder,
etc.).</li>
  <li>Expand support for more terminal emulators, such as Kitty, Alacritty.</li>
  <li>Convert colours from hexadecimal RGB notation to decimal, so that we
can cover KDE’s Konsole and, potentially, Kate, Kwrite, etc.</li>
</ol>

<p>Patches and user feedback are most welcome!</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>My workflow with VC for Git projects (Emacs)</title>
      <description>Video demo of how I use the built-in VC for all my Git projects. This includes lots of my extras.</description>
      <pubDate>Mon, 08 Feb 2021 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2021-02-08-emacs-vc-workflow/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2021-02-08-emacs-vc-workflow/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=0YlYX_UjH5Q">https://www.youtube.com/watch?v=0YlYX_UjH5Q</a></p>
         
         <p>In this video I provide an overview of my workflow with the built-in
Version Control (VC) framework of Emacs.  I am using it to manage all of
my Git projects.  VC has become my primary interface for Git even though
I keep Magit installed.  The latter is only needed for some specialised
operations—VC and my extras cover my day-to-day needs.</p>

<p>This demo includes lots of custom extensions that I have written in an
attempt to make VC work the way I want.  Refer to my Emacs configuration
file (“dotemacs”) for the implementation details:
<a href="https://protesilaos.com/dotemacs">https://protesilaos.com/dotemacs</a>.  The specific item that contains
those extensions is <code>prot-vc.el</code>.  Everything is part of my dotfiles’
repository: <a href="https://gitlab.com/protesilaos/dotfiles">https://gitlab.com/protesilaos/dotfiles</a>.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Informative diff hunks for Emacs Lisp and Org</title>
      <description>How to tweak Git to display Emacs Lisp function names or Org headings in Git diff hunk headings.</description>
      <pubDate>Tue, 26 Jan 2021 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2021-01-26-git-diff-hunk-elisp-org/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2021-01-26-git-diff-hunk-elisp-org/</guid>
      <content:encoded>
        <![CDATA[
         
         <p class="info"><strong>Update 2021-01-26 20:30 +0200:</strong> Fixed link to dotfiles.<br />
<strong>Update 2021-01-27 13:55 +0200:</strong> Tweaked Org regexp to avoid bold text at
the beginning of the line.<br />
<strong>Update 2021-01-27 16:39 +0200:</strong> Added Annex.</p>

<p>Today I learnt how to instruct <code>git</code> to read the syntactically relevant
beginning of the given context when producing diff hunk headings.  My
intent is to improve the output for Emacs Lisp and Org mode files.</p>

<p>The diff hunk heading is the text that is appended to the lines of a
given change.  You must have noticed those:</p>

<pre><code>@@ -210,7 +210,7 @@ TEXT OF THE HEADING
</code></pre>

<p>By default, the text for Elisp buffers is not particularly informative.
For example:</p>

<pre><code class="language-diff"> emacs/.emacs.d/straight/repos/prot-lisp/prot-simple.el | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/emacs/.emacs.d/straight/repos/prot-lisp/prot-simple.el b/emacs/.emacs.d/straight/repos/prot-lisp/prot-simple.el
index 318bb63e..3ea711f9 100644
--- a/emacs/.emacs.d/straight/repos/prot-lisp/prot-simple.el
+++ b/emacs/.emacs.d/straight/repos/prot-lisp/prot-simple.el
@@ -210,7 +210,7 @@ with the specified date."
   (interactive "P")
   (let* ((date prot-simple-date-specifier)
          (time prot-simple-time-specifier)
-         (format (if arg (format "%s %s" date time) date)))
+         (format (if arg (format "%s %s" date time) date))) ; This is a test
     (when (use-region-p)
       (delete-region (region-beginning) (region-end)))
     (insert (format-time-string format))))
</code></pre>

<p>The heading <code>with the specified date."</code> does not really enlighten us as
to what function is touched by this change.  Whereas with my newfound
knowledge I get this:</p>

<pre><code class="language-diff"> emacs/.emacs.d/straight/repos/prot-lisp/prot-simple.el | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/emacs/.emacs.d/straight/repos/prot-lisp/prot-simple.el b/emacs/.emacs.d/straight/repos/prot-lisp/prot-simple.el
index 318bb63e..3ea711f9 100644
--- a/emacs/.emacs.d/straight/repos/prot-lisp/prot-simple.el
+++ b/emacs/.emacs.d/straight/repos/prot-lisp/prot-simple.el
@@ -210,7 +210,7 @@ (defun prot-simple-inset-date (&amp;optional arg)
   (interactive "P")
   (let* ((date prot-simple-date-specifier)
          (time prot-simple-time-specifier)
-         (format (if arg (format "%s %s" date time) date)))
+         (format (if arg (format "%s %s" date time) date))) ; This is a test
     (when (use-region-p)
       (delete-region (region-beginning) (region-end)))
     (insert (format-time-string format))))
</code></pre>

<p>The <code>(defun prot-simple-inset-date (&amp;optional arg)</code> is insightful as it
lets us understand in more precise terms the context of the relevant
change.</p>

<p>Same principle for Org, where it will read the heading under which the
diff occurs:</p>

<pre><code class="language-diff"> emacs/.emacs.d/emacs-init.org | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/emacs/.emacs.d/emacs-init.org b/emacs/.emacs.d/emacs-init.org
index efe0d8a7..d71f8f8d 100644
--- a/emacs/.emacs.d/emacs-init.org
+++ b/emacs/.emacs.d/emacs-init.org
@@ -3359,6 +3359,8 @@ *** Version control framework (vc.el and prot-vc.el)
 all basic versioning needs.  It however never stands as Magit's peer
 when it comes to the sheer coverage of Git features.
 
+This is a test.
+
 To my mind, VC and Magit can be used as part of the same setup.  Employ
 the former for common tasks such as viewing diffs and logs, committing
 changes in bulk, pushing and pulling from a remote.  And let Magit
</code></pre>

<p>Got the correct heading: <code>*** Version control framework (vc.el and
prot-vc.el)</code>.  Much better!</p>

<h2>Git config and attributes files</h2>

<p>To get things to work we need to create <code>~/.config/git/attributes</code> and
add at least the following:</p>

<pre><code>*.lisp  diff=lisp
*.el    diff=lisp
*.org   diff=org
</code></pre>

<p>Then, in <code>~/.config/git/config</code> append:</p>

<pre><code>[diff "lisp"]
  xfuncname = "^(\\(.*)$"
[diff "org"]
  xfuncname = "^(\\*+ +.*)$"
</code></pre>

<p>And you should be good to go.</p>

<p>This is based on information I got from the manpages.  The first version
of the regular expressions comes from this page:
<a href="https://gist.github.com/ruediger/5647207">https://gist.github.com/ruediger/5647207</a>.</p>

<p>My Git config:</p>

<pre><code>[user]
  name = Protesilaos Stavrou
  email = info@protesilaos.com
  signingkey = 99BD6459CD5CA3EA
[core]
  excludesfile = ~/.config/git/ignore
  attributesfile = ~/.config/git/attributes
[commit]
  gpgsign = true
[merge]
  conflictstyle = diff3
[pull]
  rebase = false
[format]
  thread = true
[diff "lisp"]
  xfuncname = "^(\\(.*)$"
[diff "org"]
  xfuncname = "^(\\*+ +.*)$"
</code></pre>

<h2>Quality-of-life improvements</h2>

<p>I am very happy with this otherwise minor tweak and am looking forward
to learn more about optimising my computing environment.  Git, in
particular, is a powerful and comprehensive suite of tools that has a
lot to offer.  I have been reading through its manpages now that I am
not a total novice (with either <code>M-x man</code> or <code>M-x woman</code>) and am
discovering new information that can, among others, benefit my Emacs
setup.</p>

<p>My git-related configurations are part of my dotfiles.  That is where I
also keep all my Emacs files: <a href="https://gitlab.com/protesilaos/dotfiles">https://gitlab.com/protesilaos/dotfiles</a>.</p>

<p>If some Emacs power user knows how to improve upon this setup, please do
contact me: <a href="https://protesilaos.com/contact">https://protesilaos.com/contact</a>.</p>

<h2>Annex</h2>

<p>Gustavo Barros contacted me to share another take on the Elisp regexp.
I am sharing it with permission.  This matches <code>outline-minor-mode</code>
comment headings, any top-level form at beginning of line, and some
selected forms even when indented:</p>

<pre><code>[diff "lisp"]
  xfuncname = "^(((;;;+ )|\\(|([ \t]+\\(((cl-|el-patch-)?def(un|var|macro|method|custom)|gb/))).*)$"
</code></pre>

<p>I like the idea and am excited to see what else we can do with this and
other “hidden gems” of Git.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Modus themes 1.1.0 for GNU Emacs</title>
      <description>Information about the latest version of my highly accessible themes for GNU Emacs.</description>
      <pubDate>Sun, 24 Jan 2021 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2021-01-24-modus-themes-1-1-0/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2021-01-24-modus-themes-1-1-0/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Just published version <code>1.1.0</code> of <a href="https://protesilaos.com/modus-themes">the Modus
themes</a>.  The release notes
are reproduced below.  For any questions pertaining to this publication,
or anything else for that matter, feel welcome to <a href="https://protesilaos.com/contact/">contact
me</a>.</p>

<p>Please note that the version of the themes currently in Emacs 28 is
<code>0.13.0</code>, though we are working towards keeping everything in sync.
Likewise, GNU ELPA is at <code>0.12.0</code> and will eventually be made to pull
directly from emacs.git.  This is a volunteer effort: things need their
time, also in light of the prevailing conditions.</p>

<hr />

<h2>Modus themes version 1.1.0</h2>

<p>By Protesilaos Stavrou <a href="mailto:info@protesilaos.com">info@protesilaos.com</a> on 2021-01-24</p>

<p>This entry records the changes introduced to the project since the
publication of version 1.0.0 (2020-12-05).  There have been around 150
commits in the meantime, qualifying this as one of the largest releases
to date.</p>

<p>As always, every colour-related modification documented herein conforms
with the overarching accessibility objective of the themes for a minimum
contrast ratio of 7:1 between background and foreground values in their
given combination (conformance with the WCAG AAA standard).</p>

<p>As the official manual is referenced several times, make sure to store
its URL: <a href="https://protesilaos.com/modus-themes">https://protesilaos.com/modus-themes</a>.</p>

<p>If you are coming from older versions, please consult the change log
entry for version 1.0.0.</p>

<h2>Overview</h2>

<ul>
  <li>
    <p>We have brought back the options that were present in version 0.13.0
or earlier which allowed users to override colors for either—or
both—of Modus Operandi and Modus Vivendi.  Compared to the old
mechanism, the new one is more robust and should work regardless of
whether users run byte compiled code or not.  This is considered and
advanced, “do-it-yourself” pathway to theme customisation.  It is
discussed at length in the manual.</p>
  </li>
  <li>
    <p>The new <code>modus-themes-with-colors</code> macro makes it possible to read
palette variables from the active theme and, thus, pass them to
arbitrary functions or variables.  Again, this is part of the advanced
customisations that are covered in the manual.</p>
  </li>
  <li>
    <p>Several of the existing customisation options provide new stylistic
variants, further expanding their utility.  While there are some new
customisations altogether.  Combined with the above, we provide the
infrastructure that allows the themes to adapt gracefully to a variety
of circumstances and cover a broad range of demands.</p>
  </li>
  <li>
    <p>More packages are added to the already comprehensive list of supported
face groups.</p>
  </li>
  <li>
    <p>Some of the supported faces have benefited from further, albeit
subtle, refinements, demonstrating our commitment to consistency as
well as our attention to detail.</p>
  </li>
  <li>
    <p>Two reports on such “further refinements” were published on the code
log section of protesilaos.com: <a href="https://protesilaos.com/codelog">https://protesilaos.com/codelog</a>.</p>
  </li>
  <li>
    <p>We have more people contributing to the project (and assigning
copyright to the FSF—as the themes are part of Emacs) and newer
users reporting issues.  Also, there is anecdotal evidence from
several sources on an increased interest to make new or existing faces
accessible by default (such as by copying colour combinations from the
themes).</p>
  </li>
</ul>

<h2>New customisation options</h2>

<ul>
  <li>
    <p>The existing <code>modus-themes-mode-line</code> variable now supports three new
borderless styles: <code>borderless</code>, <code>borderless-3d</code>, <code>borderless-moody</code>.</p>

    <ul>
      <li>
        <p>The <code>borderless</code> value uses the same colors as the default (nil
value), but removes the border effect.  This is done by making the
box property use the same color as the background, effectively
blending the two and creating some padding.</p>
      </li>
      <li>
        <p>The <code>borderless-3d</code> and <code>borderless-moody</code> approximate the <code>3d</code> and
<code>moody</code> options respectively, while removing the borders.  However,
to ensure that the inactive modelines remain visible, they apply a
slightly more prominent background to them than what their
counterparts do (same inactive background as with the default).</p>
      </li>
    </ul>

    <p>The complete list of options:</p>

    <ol>
      <li>nil (default)</li>
      <li>3d</li>
      <li>moody</li>
      <li>borderless</li>
      <li>borderless-3d</li>
      <li>borderless-moody</li>
    </ol>
  </li>
  <li>
    <p><code>modus-themes-lang-checkers</code> provides several styles for spell
checkers and code linters with regard to how they underline text.  The
default (nil) is to use a colour-coded wavy underline, without
changing the foreground of the affected text.  Other options include
the ability to set a straight underline and to control the saturation
of the foreground, while one also provides for a change in the
background of the text in question.  The valid symbols are as follows
(read the manual for more on the matter):</p>

    <ol>
      <li>nil (default)</li>
      <li>straight-underline</li>
      <li>subtle-foreground</li>
      <li>subtle-foreground-straight-underline</li>
      <li>intense-foreground</li>
      <li>intense-foreground-straight-underline</li>
      <li>colored-background</li>
    </ol>
  </li>
  <li>
    <p>The <code>modus-themes-org-habit</code> lets users pick between three styles for
the <code>org-habit</code> table: (1) nil (the default), which uses a total of
eight colours, (2) ‘simplified’ which reduces the effective colours to
four, while applying less saturated hues, and (3) <code>traffic-light</code>
which bring the colour count to three, thus blending the “clear” and
“ready” states for workflows where the distinction between is not
useful.</p>

    <p>Please read the manual for a more detailed description of those
variants.</p>

    <p>Thanks to Gustavo Barros for suggesting the idea, providing user
feedback on stylistic choices, as well as sharing insights on the
workflow that made the <code>traffic-light</code> style possible:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/135">https://gitlab.com/protesilaos/modus-themes/-/issues/135</a>.</p>
  </li>
  <li>
    <p><code>modus-themes-variable-pitch-ui</code> when set to a non-nil value applies a
proportionately spaced typeface (controlled by the <code>variable-pitch</code>
face) to the User Interface, specifically the mode line, header line,
and tab-{bar,line}.</p>
  </li>
  <li>
    <p>The existing <code>modus-themes-links</code> variable now has a colourless
stylistic alternative: <code>underline-only</code>.  The available styles:</p>

    <ol>
      <li>nil (default)</li>
      <li>faint</li>
      <li>neutral-underline</li>
      <li>faint-neutral-underline</li>
      <li>no-underline</li>
      <li>underline-only</li>
    </ol>
  </li>
  <li>
    <p>The existing <code>modus-themes-prompts</code> variable has two new grayscale
styles: <code>subtle-gray</code>, <code>intense-gray</code>.  Furthermore, their old
<code>subtle</code> and <code>intense</code> values have more informative aliases in the
form of <code>subtle-accented</code> and <code>intense-accented</code>.  All available
values:</p>

    <ol>
      <li>nil (default)</li>
      <li>subtle-accented (<code>subtle</code> remains for backward-compatibility)</li>
      <li>intense-accented (<code>intense</code> remains for backward-compatibility)</li>
      <li>subtle-gray</li>
      <li>intense-gray</li>
    </ol>
  </li>
  <li>
    <p>The existing <code>modus-themes-headings</code> variable now accepts two new
styles: <code>no-color</code>, <code>no-color-no-bold</code>.  All stylistic variants:</p>

    <ol>
      <li>nil (default fallback option—covers all heading levels)</li>
      <li>t (default style for a single heading, when the fallback differs)</li>
      <li>no-bold</li>
      <li>line</li>
      <li>line-no-bold</li>
      <li>rainbow</li>
      <li>rainbow-line</li>
      <li>rainbow-line-no-bold</li>
      <li>highlight</li>
      <li>highlight-no-bold</li>
      <li>rainbow-highlight</li>
      <li>rainbow-highlight-no-bold</li>
      <li>section</li>
      <li>section-no-bold</li>
      <li>rainbow-section</li>
      <li>rainbow-section-no-bold</li>
      <li>no-color</li>
      <li>no-color-no-bold</li>
    </ol>

    <p>Please read the manual for instructions on how to apply those
universally or on a per-level basis.</p>
  </li>
</ul>

<h2>Added support for packages</h2>

<ul>
  <li>cfrs (used by treemacs)</li>
  <li>cperl-mode</li>
  <li>
    <p>diredc</p>
  </li>
  <li>
    <p>display-fill-column-indicator-mode.  Thanks to Gustavo Barros for the
feedback: <a href="https://gitlab.com/protesilaos/modus-themes/-/issues/148">https://gitlab.com/protesilaos/modus-themes/-/issues/148</a>.</p>
  </li>
  <li>
    <p>evil-snipe.  Thanks to Peter Wu for the feedback:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/139">https://gitlab.com/protesilaos/modus-themes/-/issues/139</a>.</p>
  </li>
  <li>
    <p>isl (isearch-light).  Thanks to Manuel Uberti for the feedback:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/144">https://gitlab.com/protesilaos/modus-themes/-/issues/144</a>.</p>
  </li>
  <li>marginalia</li>
  <li>org-tree-slide</li>
  <li>
    <p>recursion-indicator</p>
  </li>
  <li>solaire.  Thanks to CsBigDataHub1 for the feedback:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/137">https://gitlab.com/protesilaos/modus-themes/-/issues/137</a>.</li>
</ul>

<h2>Refinements to already supported faces</h2>

<ul>
  <li>
    <p>Reviewed the <code>rainbow-delimiters</code> faces.  Everything is documented in
a separate report (with screenshots).  The short version is that we
pay close attention to detail and are willing to go to great lengths
in pursuit of improving the overall user experience:
<a href="https://protesilaos.com/codelog/2020-12-27-modus-themes-review-rainbow-delimiters/">https://protesilaos.com/codelog/2020-12-27-modus-themes-review-rainbow-delimiters/</a>.</p>
  </li>
  <li>
    <p>Updated the dedicated colours for <code>whitespace-mode</code>.  The background
should now be easier to discern.  Also removed any remaining
inconsistencies.  Thanks to Toon Claes for the feedback:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/149">https://gitlab.com/protesilaos/modus-themes/-/issues/149</a>.</p>
  </li>
  <li>
    <p>Refined the faces of regexp constructs for strings affected by certain
values passed to the <code>modus-themes-syntax</code> option.  This is done to
disambiguate the backslashes and grouping delimiters from the rest of
the string.  The relevant values for <code>modus-themes-syntax</code> are:</p>

    <ul>
      <li>green-strings</li>
      <li>yellow-comments-green-strings</li>
      <li>alt-syntax</li>
      <li>alt-syntax-yellow-comments</li>
    </ul>

    <p>The default colour for strings is blue, while regexp faces are yellow
and red, whereas in those variants the strings become green, hence the
need to make regexp faces more distinct (blue and magenta contrast
better with green and also between themselves, thus matching the
alternative aesthetics).</p>
  </li>
  <li>
    <p>Reviewed dictionary.el faces (which ships with Emacs 28):</p>

    <ul>
      <li>
        <p>Made <code>dictionary-reference-face</code> look like all other links.</p>
      </li>
      <li>
        <p>Removed all properties from <code>dictionary-word-definition-face</code>:
the default sets a font family, which can create inconsistencies.</p>
      </li>
      <li>
        <p>Converted <code>dictionary-word-entry-face</code> into comment-like text.</p>
      </li>
    </ul>
  </li>
  <li>
    <p>Refined and expanded the faces of Consult.</p>

    <ul>
      <li>
        <p>Made its grep commands look the same as those of all other grep
tools.</p>
      </li>
      <li>
        <p>Ensured that line number previews, such as for the <code>consult-line</code>
command use their own style of a subtle foreground instead of
inheriting from the <code>line-number</code> face.  This is to avoid cases
where previewed numbers and actual line numbers could be conflated
for one another.</p>
      </li>
      <li>
        <p>Removed the foreground pertinent to <code>consult-imenu-prefix</code>, as its
bold weight combined with the structure of Imenu indices was deemed
sufficient to differentiate it from actual <code>consult-imenu</code> targets.</p>
      </li>
    </ul>
  </li>
  <li>
    <p>Eliminated exaggerations in the use of colour for various <code>which-key</code>
faces.</p>
  </li>
  <li>
    <p>Removed the needless background from the <code>log-view-commit-body</code> face.
This is a new face that ships with Emacs 28 (its inclusion upstream
was documented in the last changelog entry).</p>
  </li>
  <li>
    <p>Applied a subtle background to the <code>log-view-message</code> face, in the
interest of improving the usability of its interface, in particular,
to contribute to heightened situational awareness while invoking
<code>log-view-toggle-entry-display</code> in buffers such as those produced by
<code>vc-print-root-log</code>.</p>
  </li>
  <li>
    <p>Introduced a neutral background for all <code>outline-minor-faces</code> instead
of merely mirroring the style of <code>outline-mode</code> headings.  This is
because it can sometimes be hard to tell whether <code>outline-minor-mode</code>
is active, provided certain fairly common configurations in the
<code>modus-themes-headings</code> user option (refer to the manual for all
customisation options).</p>
  </li>
  <li>
    <p>Tweaked <code>diff-mode</code> headings.</p>

    <ul>
      <li>
        <p>Adjusted the values of the dedicated colours for diff headings in
order to amplify their relative contrast.</p>
      </li>
      <li>
        <p>Assigned a bold typographic weight to the <code>diff-hunk-header</code> face so
as to enforce a greater sense of structure.</p>
      </li>
      <li>
        <p>Instructed <code>diff-function</code> to inherit <code>modus-theme-diff-heading</code> in
order to eliminate exaggerations in colouration.</p>
      </li>
    </ul>
  </li>
  <li>
    <p>Removed unnecessary underline from <code>selectrum-current-candidate</code>.
Thanks to Daniel Mendler for the feedback:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/132">https://gitlab.com/protesilaos/modus-themes/-/issues/132</a>.</p>
  </li>
  <li>
    <p>Made <code>counsel-outline</code> inherit from the underlying Org faces.  Also
corrected the style of <code>counsel-outline-default</code> to use the main
foreground colour.  Thanks to Gustavo Barros for the feedback:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/134">https://gitlab.com/protesilaos/modus-themes/-/issues/134</a>.</p>
  </li>
  <li>
    <p>Prevented headings, ultimately governed by the <code>modus-themes-headings</code>
user option, from inheriting the <code>default</code> face as that could lead to
unintended consequences, such as by retaining a background colour when
none was expected.</p>
  </li>
  <li>
    <p>Refashioned all faces that specified a foreground value of <code>fg-alt</code> to
inherit the <code>shadow</code> face instead (<code>fg-alt</code> is the colour that is
used, for example, in code comments by default).  This makes it
possible for users to enact change across the theme just by tweaking
<code>shadow</code>.</p>
  </li>
  <li>
    <p>Fixed <code>ruler-mode</code> text scaling adjustment, to make it cope well with
<code>text-scale-adjust</code> and relevant commands.  Also introduced minor
stylistic changes to the remainder of the <code>ruler-mode</code> faces.</p>
  </li>
  <li>
    <p>Eliminated the potentially problematic form of <code>:foreground nil</code> from
the <code>org-ellipsis</code> face.  In such cases it is always better to either
specify no foreground whatsoever, or declare an unspecified value.</p>
  </li>
</ul>

<h2>Patches from the community</h2>

<p>Remember that the themes are part of Emacs and, thus, contributions that
exceed a cumulative total of ~15 lines require the assignment of
copyright to the Free Software Foundation.  Please consult the themes’
manual on the matter.</p>

<ul>
  <li>
    <p>Nicolas De Jaeghere added support for <code>exwm-floating-border-color</code>:
<a href="https://gitlab.com/protesilaos/modus-themes/-/merge_requests/15">https://gitlab.com/protesilaos/modus-themes/-/merge_requests/15</a>.</p>
  </li>
  <li>
    <p>Anders Johansson added support for <code>helm-fd-finish</code>:
<a href="https://gitlab.com/protesilaos/modus-themes/-/merge_requests/16">https://gitlab.com/protesilaos/modus-themes/-/merge_requests/16</a>.</p>
  </li>
  <li>
    <p>Carlo Zancanaro fixed misquoting of <code>tuareg-font-lock-multistage-face</code>:
<a href="https://gitlab.com/protesilaos/modus-themes/-/merge_requests/17">https://gitlab.com/protesilaos/modus-themes/-/merge_requests/17</a>.</p>
  </li>
  <li>
    <p>Xinglu Chen expanded Notmuch support to all its remaining faces:
<a href="https://gitlab.com/protesilaos/modus-themes/-/merge_requests/18">https://gitlab.com/protesilaos/modus-themes/-/merge_requests/18</a>.</p>
  </li>
  <li>
    <p>Kostadin Ninev added support for Dired+:
<a href="https://gitlab.com/protesilaos/modus-themes/-/merge_requests/19">https://gitlab.com/protesilaos/modus-themes/-/merge_requests/19</a>.</p>
  </li>
  <li>
    <p>Nicolas De Jaeghere expanded the supported items of <code>pdf-faces</code>.  Also
added an entry to the manual pertaining to link hints and the
requisite setup:
<a href="https://gitlab.com/protesilaos/modus-themes/-/merge_requests/20">https://gitlab.com/protesilaos/modus-themes/-/merge_requests/20</a>.</p>
  </li>
  <li>
    <p>Nicolas De Jaeghere wrote the new <code>modus-themes-with-colors</code> macro,
which is documented at length in the manual:
<a href="https://gitlab.com/protesilaos/modus-themes/-/merge_requests/21">https://gitlab.com/protesilaos/modus-themes/-/merge_requests/21</a>.</p>
  </li>
  <li>
    <p>Nicolas De Jaeghere set up the infrastructure that grants users the
ability to override palette colors; an option that was removed in the
transition from version 0.13.0 to 1.0.0.  The relevant variables are
<code>modus-themes-colors-operandi</code>, <code>modus-themes-colors-vivendi</code> (again,
consult the manual):
<a href="https://gitlab.com/protesilaos/modus-themes/-/merge_requests/23">https://gitlab.com/protesilaos/modus-themes/-/merge_requests/23</a>.</p>
  </li>
  <li>
    <p>Nicolas De Jaeghere deleted the <code>modus-themes-core.el</code> file and merged
its contents into the main <code>modus-themes.el</code> library:
<a href="https://gitlab.com/protesilaos/modus-themes/-/merge_requests/24">https://gitlab.com/protesilaos/modus-themes/-/merge_requests/24</a> and
<a href="https://gitlab.com/protesilaos/modus-themes/-/merge_requests/25">https://gitlab.com/protesilaos/modus-themes/-/merge_requests/25</a>.</p>
  </li>
  <li>
    <p>Nicolas De Jaeghere made the <code>compilation-info</code> face consistent with
other compilation faces in terms of their optional bold weight:
<a href="https://gitlab.com/protesilaos/modus-themes/-/merge_requests/26">https://gitlab.com/protesilaos/modus-themes/-/merge_requests/26</a>.</p>
  </li>
</ul>

<p>Any remaining faults that may exist, despite our best intentions to
remove them, are those of the maintainer and will be addressed as soon
as they are identified.</p>

<p>FSF copyright status:</p>

<table>
  <thead>
    <tr>
      <th>Full name</th>
      <th>Copyright</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Anders Johansson</td>
      <td>covered</td>
    </tr>
    <tr>
      <td>Carlo Zancanaro</td>
      <td>not required</td>
    </tr>
    <tr>
      <td>Kostadin Ninev</td>
      <td>covered</td>
    </tr>
    <tr>
      <td>Nicolas De Jaeghere</td>
      <td>covered</td>
    </tr>
    <tr>
      <td>Xinglu Chen</td>
      <td>not required</td>
    </tr>
  </tbody>
</table>

<h2>Theme-related contributions to the wider community</h2>

<ul>
  <li>
    <p>Helped address an incomplete colour value in <code>org-transclusion-block</code>:
<a href="https://github.com/nobiot/org-transclusion/issues/41">https://github.com/nobiot/org-transclusion/issues/41</a>.</p>
  </li>
  <li>
    <p>Contributed to the formation of the zebra striping of <code>embark</code>:
<a href="https://github.com/oantolin/embark/commit/bb4ae2a666ab1f4a307edd71f77bcbb90fb25cef">https://github.com/oantolin/embark/commit/bb4ae2a666ab1f4a307edd71f77bcbb90fb25cef</a>.</p>
  </li>
  <li>
    <p>Reviewed the faces of <code>goggles</code>:
<a href="https://github.com/minad/goggles/commit/d6e584a2c9487d3df4aee818c43485e437cb87ef">https://github.com/minad/goggles/commit/d6e584a2c9487d3df4aee818c43485e437cb87ef</a>.</p>
  </li>
  <li>
    <p>Helped raise awareness about refactoring <code>org-tree-slide-header-overlay-face</code>:
<a href="https://github.com/takaxp/org-tree-slide/issues/38">https://github.com/takaxp/org-tree-slide/issues/38</a>.</p>
  </li>
  <li>
    <p>Reported an issue for Moody that would affect the subset of Emacs 28
users who enable the new <code>mode-line-compact</code> option:
<a href="https://github.com/tarsius/moody/issues/28">https://github.com/tarsius/moody/issues/28</a>.</p>
  </li>
  <li>
    <p>Did the same for Keycast: <a href="https://github.com/tarsius/keycast/issues/13">https://github.com/tarsius/keycast/issues/13</a>.</p>
  </li>
  <li>
    <p>Defined the new <code>perl-non-scalar-variable</code> in upstream Emacs:
<a href="https://debbugs.gnu.org/cgi/bugreport.cgi?bug=45840">https://debbugs.gnu.org/cgi/bugreport.cgi?bug=45840</a>.</p>
  </li>
</ul>

<h2>Miscellaneous</h2>

<ul>
  <li>
    <p>Created a new palette subset for “graph” colours, as none of the
existing paradigms would suffice for cases where faithfulness to
colour huenesss is important.  Those are currently used by
<code>modus-themes-org-habit</code>.</p>
  </li>
  <li>
    <p>Ensured that theme functions which need to produce an error message do
so by calling <code>error</code> instead of <code>user-error</code>.</p>
  </li>
  <li>
    <p>Added a <code>modus-themes-load-themes</code> function that users can add to
their init files.</p>
  </li>
  <li>
    <p>Expanded the project’s git repo README file with a sample
<code>use-package</code> configuration.</p>
  </li>
  <li>
    <p>The previous two points followed from an inquiry into the subtleties
between <code>enable-theme</code> and <code>load-theme</code>.  Those are now documented at
length in the manual.</p>
  </li>
  <li>
    <p>Added screenshots to the web page that holds the official manual.
Thanks to Damien Cassou for the feedback:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/147">https://gitlab.com/protesilaos/modus-themes/-/issues/147</a>.</p>
  </li>
  <li>
    <p>Swapped the values of <code>cyan-faint</code> and <code>cyan-alt-faint</code> for Modus
Vivendi.</p>
  </li>
  <li>
    <p>Tweaked <code>font-lock-doc-face</code> and <code>font-lock-type-face</code> variations when
“faint syntax” is in effect: (setq modus-themes-syntax ‘faint).</p>
  </li>
  <li>
    <p>Refined <code>font-lock-doc-face</code> for when modus-themes-syntax is given a
value of either <code>yellow-comments-green-strings</code> or <code>green-strings</code>.
The changes are minor when treated in isolation, though they have
helped improve the overall consistency of the end result: the gestalt.</p>
  </li>
  <li>
    <p>Reviewed select “faint” colours for both Modus Operandi and Modus
Vivendi.  The technicalities are discussed in a complete report:
<a href="https://protesilaos.com/codelog/2021-01-11-modus-themes-review-select-faint-colours/">https://protesilaos.com/codelog/2021-01-11-modus-themes-review-select-faint-colours/</a>.</p>
  </li>
  <li>
    <p>Ensured that (setq modus-themes-syntax ‘alt-syntax) and its “yellow
comments” variant are more truthful to their intended style, by
eliminating any exaggerations in the use of colour.</p>
  </li>
  <li>
    <p>Adjusted the saturation of the green-alt value of Modus Vivendi.</p>
  </li>
  <li>
    <p>Updated the manual to reflect all of the aforementioned.</p>
  </li>
</ul>

<p>Thanks once again to everyone who contributed patches or reported an
issue.  This has been yet another period of intense work; work which
helps solidify the Modus themes as (i) uncompromisingly accessible in
accordance with the highest legibility standard, (ii) highly
customisable in true Emacs fashion, (iii) thoroughly comprehensive in
terms of face coverage, and (iv) meticulously designed throughout.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Extensions for Emacs’ vc-git</title>
      <description>Video demo of my custom commands that extend the built-in vc-git library and other VC elements.</description>
      <pubDate>Fri, 22 Jan 2021 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2021-01-22-emacs-vc-git-extras/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2021-01-22-emacs-vc-git-extras/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=mvjmokeifCo">https://www.youtube.com/watch?v=mvjmokeifCo</a></p>
         
         <p>In this video I demonstrate some of the commands I have for working with
the built-in version control (VC) framework and, specifically, its Git
back-end.  Those offer a layer of interactivity on top of the <code>git</code>
program you normally get on the command line, while the make various VC
interfaces easier to use.</p>

<p>Refer to my Emacs configuration file (“dotemacs”) for the implementation
details: <a href="https://protesilaos.com/dotemacs">https://protesilaos.com/dotemacs</a>.  The specific item that
contains those extensions is <code>prot-vc.el</code>.  Everything is part of my
dotfiles’ repository: <a href="https://gitlab.com/protesilaos/dotfiles">https://gitlab.com/protesilaos/dotfiles</a>.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Modus themes: review of select “faint” colours</title>
      <description>Detailed report on the refinements to individual "faint" colours for the Modus Operandi and Modus Vivendi themes.</description>
      <pubDate>Mon, 11 Jan 2021 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2021-01-11-modus-themes-review-select-faint-colours/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2021-01-11-modus-themes-review-select-faint-colours/</guid>
      <content:encoded>
        <![CDATA[
         
         <p class="info">UPDATE 2021-01-19 14:21 +0200: The <code>color-tools.el</code> is now called
<code>ct.el</code>.</p>

<p>The Modus themes come with a customisation option to tweak the looks of
programming modes (there are lots of customisation options—consult the
<a href="https://protesilaos.com/modus-themes">official manual</a>):
<code>modus-themes-syntax 'faint</code>.  The present entry documents the
refinements that were introduced to a subset of those “faint” colours.</p>

<p>In this report I am making use of the new <a href="https://github.com/neeasade/ct.el">ct.el library</a>,
developed by Github user neeasade.  Even though it is not available in
any package archive as of this writing, I highly recommend it to every
Emacs user who has an interest in colour and/or who is a theme designer.
Consider it as a complement to the built-in <code>color.el</code> Emacs library
(check the source code with <code>M-x find-library</code> and then insert <code>color</code>).
What it offers compared to the built-in option is an element of
convenience, as it lets us use the colour space of our choice.  In my
case that is RGB while the notation is hexadecimal.</p>

<p>Colour enthusiasts are also encouraged to read neeasade’s essay:
<a href="https://notes.neeasade.net/color-spaces.html">Reasoning about colors</a>.</p>

<p>The <code>color-tools</code> function that introduces a new test to my workflow is
<code>ct-name-distance</code>, which applies the CIE Δ<em>E</em> 2000 formula.  For the
purposes of this article, I am also applying <code>ct-contrast-ratio</code>, even
though there exists <code>modus-themes-contrast</code> as part of my themes, which
builds on the same WCAG formula for contrast in relative luminance
between two values (implemented in <code>modus-themes-wcag-formula</code>).</p>

<h2>Old and new values for “faint” blues and magentas</h2>

<p>The tables below merely present the affected variables and the change in
values assigned to them.  The overall intent is to slightly increase the
saturation of those colours while accounting for differences between
them in lieu of their intended purpose, which is to highlight code in a
more subtle way than the default aesthetic of the themes—read the doc
string of <code>modus-themes-syntax</code>.</p>

<p><code>cyan-faint</code> and <code>cyan-alt-other-faint</code> for Modus Operandi have also
been corrected for hueness, mainly by reducing their red light channel.
Other changes are more subtle.</p>

<pre><code class="language-org">#+DESCRIPTION: Affected values for Modus Operandi
| Internal name           | Old     | New     |
|-------------------------+---------+---------|
| cyan-faint              | #12506f | #005077 |
| cyan-alt-other-faint    | #2e584f | #125458 |
| blue-faint              | #002f88 | #003497 |
| blue-alt-faint          | #003f78 | #0f3d8c |
| blue-alt-other-faint    | #1f0f6f | #001087 |
| magenta-alt-faint       | #70256f | #7b206f |
| magenta-alt-other-faint | #5f3f7f | #55348e |

#+DESCRIPTION: Affected values for Modus Vivendi
| Internal name           | Old     | New     |
|-------------------------+---------+---------|
| blue-alt-faint          | #a4b0ff | #a0acf5 |
| blue-alt-other-faint    | #8fc5ff | #87c8ff |
| magenta-alt-other-faint | #d0b4ff | #cfa6ff |
</code></pre>

<p>Here is a picture of the same table with <code>M-x rainbow-mode</code> enabled, so
if it does not look clear please open it in another window:</p>

<p><img alt="Modus themes select faint colours" src="https://protesilaos.com/assets/images/attachments/modus-themes-review-faint-2021-01-11.png" /></p>

<p>Notice the fine tweaks (yes, those are the lengths we go to).</p>

<h2>Harmonising colour distance for Modus Operandi</h2>

<p>The following table only concerns Modus Operandi (we employ another
technique for Modus Vivendi—next section).  It measures the distance
of the new values relative to black and white (CIE Δ<em>E</em> 2000).  A value
of 100 is the maximum and it would mean in practical terms that the
closer our values are to the maximum, the more they appear as variants
of black for our light theme.</p>

<p>The table must thus be read as an attempt to slightly “brighten up”
those values and/or normalise the distance between some of them.  As
such compare columns 2 to 4 and 3 to 6 (all tables are in <code>org-mode</code>
notation).</p>

<pre><code class="language-org">#+DESCRIPTION: Modus Operandi cie-DE2000 distance for faint blues and magentas
| old     | #ffffff | #000000 | new     | #ffffff | #000000 |
|---------+---------+---------+---------+---------+---------|
| #12506f |      58 |      27 | #005077 |      58 |      28 |
| #2e584f |      55 |      28 | #125458 |      58 |      27 |
| #002f88 |      71 |      29 | #003497 |      68 |      31 |
| #003f78 |      65 |      27 | #0f3d8c |      65 |      30 |
| #1f0f6f |      83 |      28 | #001087 |      81 |      30 |
| #70256f |      64 |      31 | #7b206f |      62 |      32 |
| #5f3f7f |      59 |      32 | #55348e |      63 |      32 |
#+TBLFM: $2='(ct-name-distance $1 @1$2);%0.0f :: $3='(ct-name-distance $1 @1$3);%0.0f :: $5='(ct-name-distance $4 @1$5);%0.0f :: $6='(ct-name-distance $4 @1$6);%0.0f
</code></pre>

<p>[ does anyone know of a more succinct <code>#+TBLFM</code> expression? ]</p>

<p>An interesting observation to make with regard to the innate properties
of the channels of light, is how <code>#001087</code> and its old <code>#1f0f6f</code>
(<code>blue-alt-other-faint</code>) is perceived as being closer to black while
compared to pure white, even though it is impressed in more-or-less the
same way as the other colours when compared to pure black (the
discrepancies in the values shown on row 6, relative to the other rows).
This is because the blue channel, here represented as pure blue
(<code>#0000ff</code>), is the darkest among the three components of the RGB
triplet that we are using (green is the brightest, red is medium (though
not precisely)).</p>

<h2>Color distance between the values of Modus Vivendi</h2>

<p>While we tested our colours against black and white for Modus Operandi,
that technique was not suitable for Modus Vivendi.  This is because a
dark theme has different requirements and the reason is that the human
eye is more attuned to spot differences in colour against a dark
backdrop (and colour is, in essence, an expression of light, while the
pure black main background of Modus Vivendi is meant to represent the
absence of light—notwithstanding screen technology that always uses
light even for black).</p>

<p>As such, we are mostly interested in adjusting the distance between the
colour values that were deemed somewhat problematic (always in relative
terms, as those tweaks are virtually not discernible by the untrained
observer).</p>

<pre><code class="language-org">#+DESCRIPTION: Modus Vivendi cie-DE2000 distance OLD
|         |         | Distance |
|---------+---------+----------|
| #a4b0ff | #8fc5ff |  10.2885 |
| #8fc5ff | #d0b4ff |  19.9316 |
| #d0b4ff | #a4b0ff |  10.5743 |
#+TBLFM: $3='(ct-name-distance $1 $2);%0.4f

#+DESCRIPTION: Modus Vivendi cie-DE2000 distance NEW
|         |         | Distance |
|---------+---------+----------|
| #a0acf5 | #87c8ff |  13.2249 |
| #87c8ff | #cfa6ff |  24.2411 |
| #cfa6ff | #a0acf5 |  11.7710 |
#+TBLFM: $3='(ct-name-distance $1 $2);%0.4f
</code></pre>

<h2>Contrast compared to the main (and relevant) background values</h2>

<p>For the sake of completeness, the following tables confirm that the new
values are consistent with the overarching design principle of the
themes for a minimum contrast in relative luminance between background
and foreground of 7:1 or higher.</p>

<pre><code>#+DESCRIPTION: Modus Operandi WCAG contrast for select "faint" colours
|         | #ffffff | #f8f8f8 | #f0f0f0 |
|---------+---------+---------+---------|
| #005077 |    8.70 |    8.19 |    7.63 |
| #125458 |    8.63 |    8.12 |    7.57 |
| #003497 |   10.84 |   10.20 |    9.51 |
| #0f3d8c |   10.16 |    9.57 |    8.92 |
| #001087 |   14.75 |   13.89 |   12.94 |
| #7b206f |    9.22 |    8.68 |    8.09 |
| #55348e |    9.26 |    8.72 |    8.12 |
#+TBLFM: $2='(ct-contrast-ratio $1 @1$2);%0.2f :: $3='(ct-contrast-ratio $1 @1$3);%0.2f :: $4='(ct-contrast-ratio $1 @1$4);%0.2f

#+DESCRIPTION: Modus Vivendi WCAG contrast for select "faint" colours
|         | #000000 | #110b11 | #181a20 |
|---------+---------+---------+---------|
| #a0acf5 |    9.71 |    9.00 |    8.05 |
| #87c8ff |   11.74 |   10.87 |    9.72 |
| #cfa6ff |   10.55 |    9.77 |    8.74 |
#+TBLFM: $2='(ct-contrast-ratio $1 @1$2);%0.2f :: $3='(ct-contrast-ratio $1 @1$3);%0.2f :: $4='(ct-contrast-ratio $1 @1$4);%0.2f
</code></pre>

<p>As has been noted before, such as in the recent review of the <a href="https://protesilaos.com/codelog/2020-12-27-modus-themes-review-rainbow-delimiters/">faces
that pertain to the rainbow-delimiters package</a>,
there are a lot of considerations to be made when designing a theme.  My
opinion is that this endeavour stands at the intersection of art and
science.  We employ scientific insight in support of our choices, while
we exercise artistic judgement or freedom in interpreting the propriety
of every result in its particular context.  And we do so in a
non-dogmatic way, meaning that we are prepared at all times to review
our work and challenge our assumptions.</p>

<p>Consequently and despite the fact that we remain committed to the
minimum 7:1 contrast ratio, we cannot tolerate some inadequate technique
of procedurally picking colours which conform with a target of that
sort, nor can we confine ourselves to arbitrary constraints such as
relying only on 4, 8, 16 colours or whatnot.  Constraints need be
conducive to the primary design objectives and must thus remain subject
to continuous interpretation and evaluation, in order to stay in sync
with the evolving requirements of the project.</p>

<p>It is the designer who sets the constraints and delineates the
boundaries of their artistic discretion, so that there necessarily
exists an element of auto-nomy (self-determination) as opposed to
hetero-nomy (determined by an other [source]), pursuant to the tenets of
the project.  The minimum contrast ratio is inviolable, yet there is
wide range of scenaria that remains to be tested and carefully examined
even after accounting for that principle.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Embark and my extras (Emacs)</title>
      <description>Video demo of embark.el and how I extend it to make my Emacs workflows more efficient.</description>
      <pubDate>Sat, 09 Jan 2021 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2021-01-09-emacs-embark-extras/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2021-01-09-emacs-embark-extras/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=uoP9ZYdNCHg">https://www.youtube.com/watch?v=uoP9ZYdNCHg</a></p>
         
         <p>In this video I provide an overview of Embark’s features.  I discuss
everything from the basic concepts of acting on targets, to how you can
extend it as your front-end for completion candidates.  There is also a
demonstration of <code>embark-become</code> and how that can be used to make your
minibuffer-centric workflows more efficient.</p>

<p>The text of the presentation is copied below (<code>org-mode</code> notation).
Refer to my Emacs configuration file (“dotemacs”) for the implementation
details: <a href="https://protesilaos.com/dotemacs">https://protesilaos.com/dotemacs</a>.  And check the Git
repositories of the projects I covered:</p>

<ul>
  <li><a href="https://github.com/oantolin/embark">https://github.com/oantolin/embark</a></li>
  <li><a href="https://github.com/minad/consult">https://github.com/minad/consult</a></li>
</ul>

<hr />

<pre><code class="language-org">#+TITLE: Emacs: Embark and my extras
#+AUTHOR: Protesilaos Stavrou · protesilaos.com

* Brief introduction to Embark

Embark provides a unified framework of regular Emacs keymaps which let
you carry out /contextually relevant actions/ on *targets* through a common
*point of entry*, typically a /prefix key/.

+ "Actions" are standard Emacs commands, such as =describe-symbol= or some
  interactive command you have defined that reads an argument from the
  minibuffer.

+ "Targets" are semantically sensitive constructs, such as the symbol at
  point, a URL, a file name, the active region, or the current
  completion candidate in the minibuffer (or the completions'
  buffer---more on that in the next section).  Embark has so-called
  "classifiers" which help it determine the category that the target
  belongs to.

+ The "contextually relevant [actions]" are defined in keymaps whose
  scope matches the category of the target.  So =embark-file-map= holds
  all key and command assossiations for when Embark recognises a file
  name as its target.  =embark-region-map= is for actions pertaining to
  the active region; =embark-buffer-map= for buffer names that you access
  through, say, =switch-to-buffer= (=C-x b=).  And so on.

+ As for the "point of entry" or "prefix key", it is an Embark command,
  such as =embark-act=, =embark-act-noexit=, or =embark-become=.  Those
  activate the appropriate keymap, thus granting you access to the
  relevant commands.

Embark can act on individual targets (e.g. the region) or sets of
targets (e.g. the list of minibuffer completion candidates).
* Embark collections and how to cycle completions

Here we will be discussing Embark's ability to act on a set of targets.
Our specific case is to instruct it (via a hook), to automatically
gather the completion candidates of the minibuffer and put them in a
live-updating buffer.  In other words: a front-end to the minibuffer's
underlying completion mechanisms.

Let's test this with =switch-to-buffer= (=C-x b=) and some input that we
provide.  The "Embark Collect" buffer pops up and shows us what we are
currently matching.  We can then produce a snapshot or export this set
to an appropriate major-mode (=ibuffer-mode= in this case).

I received a lot of questions about my workflow with the Embark
completions buffer.  The idea was:

+ How do you select an item when you narrow to a short list?
+ Do you manually switch from the minibuffer to the completions?

The short answer is that I have written some extensions that handle this
"candidate cycling".

The long answer is best illustrated by an example (the following is a
natural cycling behaviour):

+ =C-n= in the minibuffer takes us to the top of the completions' buffer.
+ =C-p= in the minibuffer moves to the completions' bottom.
+ =C-n= inside the completions' buffer moves the line normally or, when at
  the end, switches to the minibuffer.
+ =C-p= inside the completions' buffer also moves the line, though in the
  opposite direction, and when at the top it switches to the minibuffer.

* Perform default action while cycling

A common workflow with Embark is to produce a snapshot of the
minibuffer's collection you have narrowed to and then inspect that
buffer.

Let's try this with =M-x describe-keymap RET embark= (I bind that help to
=C-h K=).  Then we produce a snapshot with =embark-act= (you have a key
binding for that) and =S= for =embark-collect-snapshot=.

In this buffer we can move up and down normally and hit =RET= when we want
to perform the default action which, in this case, is to get a help
buffer for the symbol at point.

With my =C-M-n= or =C-M-p= we essentially combine =C-n= or =C-p= into a single
motion.  This is useful when we want to continue from one line to the
next, such as by inspecting the help buffer of each of those embark
keymaps that we got the snapshot for.

[ this is a concept I got from Ivy's own version of operating on sets of
  targets ]
* Manual previews for Consult commands (consult.el)

Those specific "move+act" motions allow me to get manual previews for
all =consult.el= commands, even though I use the default minibuffer.
Otherwise I would need to use some other library to cycle candidates,
like =icomplete= or =selectrum=.

So here is an example with =consult-line= and purposeful manual previews:

+ Search a file for a pattern
+ Cycle the Embark candidates
+ Use =C-M-j= to "preview" the line at point or, =C-M-n= / =C-M-p= to preview
  the next/previous one and move the point there (the latter two accept
  a numeric argument)

The benefit of this workflow is that I can display a preview only when I
want to and, most importantly, I do it from inside the Embark buffer
instead of the minibuffer (which is why I can avoid Icomplete or
Selectrum).

NOTE: consult can be configured to display previews manually or on a
case-by-case basis, though I feel you only benefit from that if you are
using it with Icomplete or Selectrum.
* A look at ~embark-become~ and cross-package integration

One of my goals with extending Embark for my personal needs is to have
some fluidity or seamlessness while performing minibuffer-centric
actions.  This can be achieved with the =embark-become= command: it lets
you re-use the current minibuffer's input in another minibuffer command.

The default =embark-become= lets you switch contexts between =find-file=
(=C-x C-f=) and =switch-to-buffer= (=C-x b=).  Start either of those actions,
type something, and the invoke =embark-become= to switch to the other (you
should bind =embark-become= to some key---see my dotemacs).

The design of Embark is based on the principle of scoping actions inside
keymaps.  Each of those keymaps applies to a context that Embark can
interpret by reading the category of what is being completed against or
what the target at point is.  Long story short: we can bind our own
actions to keys in each of those contexts and/or we can define our own
keymaps (general or specific) to extend the default options.

What I have here is a work in progress, but consider those two scenaria
with Consult commands for (1) grep and find, (2) outline and line
search:

1. We can invoke the relevant grep command and then decide that what we
   were actually looking for is a find operation.  So we rely on
   =embark-become= to take us from one place to the next without losing
   what we have already inserted in the minibuffer.
2. Same principle for =consult-outline= and =consult-line=, where we may be
   searching for a pattern that exists in a heading only to realise that
   we wanted to query for all lines instead.  =embark-become= to the
   rescue!

* Further information

Refer to my "dotemacs" for the complete setup:
&lt;https://protesilaos.com/dotemacs&gt;.

And check the Git repositories of the projects:

+ &lt;https://github.com/oantolin/embark&gt;
+ &lt;https://github.com/minad/consult&gt;
</code></pre>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Default Emacs completion and extras</title>
      <description>Video demo of my current completion framework that is pieced together using the original minibuffer and several modules.</description>
      <pubDate>Wed, 06 Jan 2021 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2021-01-06-emacs-default-completion/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2021-01-06-emacs-default-completion/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=43Dg5zYPHTU">https://www.youtube.com/watch?v=43Dg5zYPHTU</a></p>
         
         <p>In this video I offer an overview of my current completion framework for
Emacs.  It consists of a set of modules that are pieced together into a
robust system.  The centrepiece is the standard minibuffer.</p>

<p>The text of the presentation is available right below (<code>org-mode</code>
notation).  Refer to my Emacs configuration file (“dotemacs”) for the
implementation details of my completion framework and everything else I
currently have: <a href="https://protesilaos.com/dotemacs">https://protesilaos.com/dotemacs</a>.</p>

<hr />

<pre><code class="language-org">#+TITLE: Default Emacs completion and extras
#+AUTHOR: Protesilaos Stavrou · protesilaos.com

* Piecing together a completion framework

Today I will talk to you about how I currently handle completion in
Emacs.  The plan is to tour you around the various tools I use; tools
which comprise my system for narrowing down a list of candidates.

My system consists of the following constituents:

+ Default minibuffer (exactly what you get when you run =emacs -Q= from
  the command line).
+ =orderless= completion style, which extends the built-in list of pattern
  matching =completion-styles=.
+ =embark= to visualise the list of completion candidates, as well as
  provide actions on a per-item or per-set basis.
+ =consult= to enhance several minibuffer-centric commands.
+ =marginalia= to provide meta-information to various completion lists.

All of the above are modular tools that are independent of each other
yet can operate in tandem.  One can, for example, use =icomplete= or
=selectrum= instead of the default minibuffer.

* Orderless and the built-in ~partial-completion~

As its name suggests, Orderless matches groups out-of-order.  A "group"
can be one among many styles, including a regular expression, a literal
string, an initialism, and so on.  The styles are configurable, while
the list is comprehensive.

Orderless has a concept of "style dispatchers".  Those are user-defined
single characters that are used as a suffix to each group and assign to
it a particular pattern matching style.  For example, I use the equals
sign to declare that a group should be read as a literal string.

While the built-in =partial-completion= covers the niche of dynamic
completion for certain commands.  A case in point is with the =find-file=
command (=C-x C-f=), where it can expand an abbreviated path =~/.l/s/fo=
into =~/.local/share/fonts=.

* Embark for per-item actions (part 1)

The best way to conceptualise Embark is as a contextual menu.  It lets
you carry out context-dependent actions on targets.

What constitutes a "target" will depend on the case: it can it the
current item in the completion list, the symbol at point, or some URL
right under the cursor.  Your conduit to this mode of operation is the
=embark-act= command, which you should bind to a convenient key (=C-,= in my
case).

Let us try these actions on individual targets:

+ Get help for =embark-act= by placing point over it.
+ Browse https://protesilaos.com/modus-themes with =eww=.  Then save the
  link to the kill-ring and yank from there afterwards.
+ Run =describe-function= and insert some function here.
+ Run =M-x switch-buffers= and then kill a buffer instead of switching to
  it.

Each context is bound to a keymap.  The keymap holds the associations
between key bindings and commands that you may call on the given target.

To learn more about the commands you can use after invoking =embark-act=,
type =C-h= (or set up =which-key=---check my dotemacs for the implementation
details).

[ remember that =C-h= as a suffix to any key chord, is a standard way to
  get a Help buffer for all keys that complete the chord ]

* Embark for per-set actions (part 2)

Other than act on a per-item basis, Embark can operate on entire sets of
targets.  Allow me to introduce this concept with an example: we invoke
=M-x describe-keymap= and then search for "embark" to find all keymaps
that pertain to the various contexts in which Embark can perform
meaningful tasks (I bind that help command to =C-h K=).  Now we use
=embark-occur= to produce a persistent buffer with the list of candidates.
It will still run the default action on each target.

You have also seen Embark's "live occur", but let me formally introduce
it to you.  This is a buffer that is initially linked to an active
minibuffer session.  It gets auto-updated to match the input in the
minibuffer and to narrow the list of candidates accordingly.  So if I
call =M-x switch-buffers= (=C-x b=) and type something, this "live occur"
will show me what the matching buffers are.

Because these are standard buffers, we can store them on the disk and
revisit them in the future.  Use =M-x write-file= (=C-x C-w=).

Embark offers another neat utility: =embark-export=.  It produces a buffer
whose major mode matches the category of the targets: =dired-mode= for
files/directories and =ibuffer-mode= for buffers.  Then you can benefit
from the power of those modes.

This per-set functionality of Embark is what allows us to use the
default minibuffer for all completions.  While we could add =icomplete= or
=selectrum= to the mix, there is no need for such an addition.  Embark
live occur merely shows the candidates that are already there and which
the minibuffer is fully aware of.

* Consult for enhanced minibuffer commands

=consult= has a dual purpose:

1. Enhance existing commands, like =M-x imenu= or =M-x switch-to-buffer=.
2. Provide new functionality, such as =consult-line=, =consult-mark=, and
   asynchronously updating grep/find commands.

What this "enhancement" means depends on the case.  Commands such as
those that navigate lines, get an optional preview.  The likes of
=consult-imenu= offer a concept of filtering per type of input: this is
called "narrowing" in Consult's verbiage and is controlled by a key map.

Let us try some common workflows to witness the synergies between the
modules that comprise my system.

+ Visit a large Org file.  Invoke =consult-outline= and produce a
  persistent buffer out of it with =embark-occur=.  This works as an index
  of buffer positions, a "table of contents" if you will.

+ Call =consult-imenu= and use =consult-narrow= to filter by the type of the
  syntactic constructs.

* Marginalia for completion annotations

Finally we have =marginalia=, which you have already seen in the various
Embark live occur buffers I have put on display.  It enriches completion
candidates with pertinent meta information.

Here are some commands that benefit from such annotations:

+ all =describe-*= commands present the first line of the doc string.

+ =switch-to-buffer= (=C-x b=) documents the buffer's major mode and status,
  as well as its underlying file's path.

+ =find-file= (=C-x C-f=) includes the file size, permissions and date.

You get the idea.

Currently those annotations are decorative, in the sense that you cannot
use them as filter predicates or have something like =orderless= do
perform pattern matching against them.  Still, I find this lightweight
utility to be quite valuable.

* A system I can understand

About a year ago I switched from Ivy to Icomplete.  I wanted to simplify
my setup in order to make sense of it.  Doing so helped me learn some
Elisp, mostly through trial and error, and by relying on Emacs'
introspection utilities.  This reminded me of the value proposition of
modularity: a system of linkable-yet-standalone tools is robust in its
own right, while it can be constructed and deconstructed at will both in
pursuit of utilitarian ends and for educational purposes.

By piecing together a system out of Embark, Consult, Orderless,
Marginalia, the default minibuffer, and my extras, I am in a position to
clearly comprehend what is going on.  This is not knowledge for its own
sake: it has the tangible benefit of equipping me with the means to
extend or otherwise tweak my completion framework so that it aligns with
my expectations.

I thus wish to congratulate the authors of those packages.  We have Omar
Antolín Camarena, who develops =embark= and =orderless=.  While Daniel
Mendler produces =consult= (among others).  While both of them maintain
the =marginalia= library.  I really appreciate what they do: their code is
top-notch, but they also invest a lot of effort in documentation.
Manuals and informative READMEs are of paramount importance in bridging
the gap between developers and users.  You read the instructions and you
learn how the thing works.  Then, once you have the requisite confidence
in your abilities, you can delve into the source code.

Here is my rule of thumb: if a project has good docs, then it shows that
the developer is dedicated and meticulous in their work.  Use that as
your guide when picking software.  I am happy to have done so.

* Further information

Refer to my "dotemacs" for my complete setup:
&lt;https://protesilaos.com/dotemacs&gt;.

And check the Git repositories of all those projects:

+ &lt;https://github.com/minad/consult&gt;
+ &lt;https://github.com/oantolin/embark&gt;
+ &lt;https://github.com/minad/marginalia&gt;
+ &lt;https://github.com/oantolin/orderless&gt;
</code></pre>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Comment on Unix versus Emacs</title>
      <description>My opinion on the persistent question of whether Emacs can fit into a Unix-centric workflow.</description>
      <pubDate>Mon, 28 Dec 2020 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2020-12-28-comment-unix-vs-emacs/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2020-12-28-comment-unix-vs-emacs/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>I receive messages from time to time asking me to share my views on the
topic of whether Emacs can fit into a Unix-centric workflow.  One such
email arrived in my inbox yesterday.  I replied to it and asked whether
I could publish the answer on my website, while omitting all private
information.</p>

<p>My commentary is reproduced below.  In block quotes (indented
paragraphs) are the statements I am replying to.</p>

<hr />

<blockquote>
  <p>For the past 2-3 months I having using Emacs as my “Integrated
Environment” but unlike my vim days I am struggling to recommend
it to someone or convince myself ‘Emacs » vim+cli-tools’.</p>

  <p>For ex:</p>
  <ul>
    <li>Why use vim? -&gt; To edit text efficiently.</li>
    <li>Why use TWM? -&gt; You can manage TUI with ease.</li>
    <li>Why use Emacs? -&gt; For integrity? For lisp? For Emacs-like-bindings?</li>
  </ul>
</blockquote>

<p>I think Vim and Emacs are quite similar in several key areas:
interactive, extensible, scriptable, and featureful out-of-the-box or
with third-party extensions.  The differences are matters of approach,
perspective, and degree or concern issues of a secondary nature and/or
ancillary utility.</p>

<p>The fact that Vim and Unix are talked about in the same breadth suggests
to me that we—the general “we”—are treating terms somewhat
cavalierly.  If one wants to remain faithful to Unix, then why are they
making a special exception for Vim, instead of using vi, ed, or just
sed?  Those other programs are truer to the Unix ethos of small
specialised tools.</p>

<p>For example, newer versions of Vim come with the <code>:term</code> command that
spawns a built-in terminal.  And we still pretend that Vim partakes of
the Unixy quality while Emacs does not.</p>

<p>To be clear, I am not arguing that Vim should not have such a feature.
It is useful and am sure a lot of people like it, especially in light of
NeoVim gaining ground in the community.  I am just pointing out an
inconsistency in the thesis of those who extol the Unix virtues while
still peddling Vim as a paragon of minimalism.</p>

<blockquote>
  <p>My main concern with Emacs is “we are trying to redo everything
in elisp or we are trying to run a elisp WM” which is quite
different from what I have learned.</p>

  <p>Video: https://www.youtube.com/watch?v=1mr3issv79s</p>
</blockquote>

<p>I think no one needs to switch to Emacs.  If what you already have
covers your needs, then there is absolutely no reason to redo everything
and refashion it as its Elisp equivalent.</p>

<p>With regard to Luke’s video, I feel that he is making an assessment on
the premise of indirect or incomplete information.  Again, no one has to
switch to Emacs.  Though if you are the kind of person who wants to
speak their mind from a position of knowledge, you need to stop being
opinionated and vociferous about something you have not given a fair
chance to and tried in earnest.  To put it differently, start using
Emacs from scratch, go through the manual, tinker with Elisp, work full
time with it for ~6 months and then tell us what you think.  “But I do
not want to!”  Well, I repeat that you do not have to.</p>

<p>This is how I converted to Emacs in the summer of 2019.  Started with an
empty init file, without any prior experience in Lisp (and I am not a
programmer anyway), and with no false expectations of wanting Emacs to
become my powerhouse of productivity from day one.  The first days were
very difficult.  Fast forward to present time and am happy to have made
such an investment: there is no going back.</p>

<p>The whole “switching to Emacs” theme is something I discussed at length
one year ago (watch <a href="https://protesilaos.com/codelog/2019-12-20-vlog-switch-emacs/">All about switching to Emacs</a>
(2019-12-20)). Also, I agree that Org being ‘cool’—whatever that
means—is not a compelling reason to try it: I am not much of an Org
user myself.  In a more recent video I talked about the concept of
“favourite package” in the Emacs milieu (watch <a href="https://protesilaos.com/codelog/2020-10-21-emacs-favourite-package/">Why Emacs itself is my
“favourite Emacs package”</a>
(2020-10-21)).</p>

<blockquote>
  <p>This video [of Luke] really provide some good reasons why to invest on
‘coreutils’ to build a small, maintainable and decentralized system
rather than investing on a giant mutable system.</p>
</blockquote>

<p>Prior to switching to Emacs, I was using BSPWM+Vim+Tmux+CLI for years.
My Vim had no plugins at all.  For email I had mutt, newsboat for feeds,
ncmpcpp+mpd for music, lemonbar for a system panel…  Everything was
done in accordance with this notion of “small, maintainable and
decentralized” programs that are loosely tied together into a computing
environment.</p>

<p>The main problem with such a framework is that there is no layer of
integration between those tools.  When you actually start piecing
together a system you are introducing complexity on a case-by-case, ad
hoc manner, because you now need to write extra code that connects the
otherwise disparate tools.  Can you make your ncmpcpp interface with
newsboat?  Would you like to be able to capture the contents of a mutt
email and produce a note or to-do task out of them?</p>

<p>You can of course tie all those together.  Though you will oftentimes
have to use Vimscript for Vim, some other syntax for mutt, newsboat,
ncmpcpp+mpd, yet another for the suckless programs, another still for
Lemonbar, Polybar or whatever, and so on.</p>

<p>Not only are configuration or scripting languages/paradigms different,
discoverability is also inconsistent.  Vim has on-line help.  Others
have man pages, suckless expects you to read some incomplete README
which constitutes a misunderstanding of minimalism and/or study the
source code.  Again, these are discrepancies that you need to
circumvent, while rationalising them ex post facto as virtues of
peerless Unix engineering.</p>

<p>Side note: I define minimalism as minimum necessary completeness.
Incomplete documentation fails the completeness test.  For a more
theoretical take, read my <a href="https://protesilaos.com/notes-simplicity/">Notes on simplicity</a> (2019-06-22).</p>

<p>So the “small and decentralised” stops being as “maintainable” as you
would like to think of it in abstract.  Those issues accumulate and
culminate in an inconsistent user experience.  Say you have some nice
theme for Vim.  Now you need to write another theme for newsboat, mutt,
ncmcpp, dmenu, lemonbar…  You get the point.</p>

<p>I am a firm believer in the Unix philosophy, though I do not interpret
it as a dogma but as a set of guidelines whose scope of application is
strictly confined to a given paradigm of interaction.  When the
constitution of the case changes, so must the reasoning about it, else
there is no correspondence between the theory and the reality it is
supposed to apply to.  Unix works well when you are dealing with text
streams.  It leaves something to be desired when you need interactivity
and consistency across a wide range of applications.</p>

<p>For some more abstract writings, read:</p>

<ul>
  <li><a href="https://protesilaos.com/ethos-dialectic">On the Dialectician’s Ethos</a> (2020-09-30).</li>
  <li><a href="https://protesilaos.com/materiality-emergence">On materiality and emergence</a> (2020-12-20).</li>
</ul>

<blockquote>
  <p>Rather than talking in abstract I will now jump straight to my question:
“Why I should add a layer of complexity on my system rather than using
existing tools(coreutils, pipes, …)”</p>
</blockquote>

<p>I believe your question already assumes the answer you expect.  If you
frame Emacs as “complexity” and, by extension, as being a priori surplus
to requirements, then it follows that you do not want it, for that would
be frivolous.</p>

<p>If, on the other hand, you take a critical look at the emergent system
of several Unixy tools in unison, like my BSPWM setup from yesteryear,
then you must think of things in a new light: “what is missing from my
coreutils, pipes, and friends?”.  Then you can start searching for ways
to ameliorate the issues I outlined above, namely, to achieve a greater
level of consistency and integration between otherwise standalone
applications.  How you go about it is your prerogative.</p>

<p>I treat Emacs as a layer of interactivity on top of Unix.  For example,
I wanted to refactor some things in my website’s code base.  I ran an
rg/grep command to put the results in a buffer.  Then I edited that
buffer and saved my changes.  Voila!  A ~1000 matches rewritten in a
matter of seconds, all while I could do things interactively and use the
full power of Emacs’ editing capabilities.  Yes, I could probably do the
same with grep, sed, or whatnot, but I would still be missing that ease
of use, indeed the safety, of performing such sweeping changes from the
comfort of Emacs.</p>

<p>Which brings me to the final point: is anyone going to give me hacker
points for relying only on grep and sed?  Do I want to turn my computing
environment into a tokenistic affair; a symbolism that captures my
vanity and pretences on social standing?  Do I want to become an avatar
of social expectations, seeking to extract as much “nerd credibility”
out of my fellows’ ideas about me?  Or do I want to get work done and do
so while benefiting from a comprehensive, integrated, singular
experience?  I just want the latter and am unapologetic about it.</p>

<p>This is not to claim that only Emacs can perform such tasks.  Maybe Vim
or some other program can do those as well.  Good!  Use whatever feels
right for you.  My position is more nuanced: we should avoid the
pitfalls that come with ideology and ideocentric perspectives on states
of affairs.  Are you working exclusively with text streams?  Then write
a one-liner on the command line that pipes some output to sed and you
are good to go.  Do you need interactivity?  Then forget about Unix
pipes and use the right tool for the job.  Whether that is Emacs, Vim,
or whatever is another discussion altogether; one that I do not find
particularly interesting and fecund.</p>

<p>In conclusion, I am of the opinion that propitious enthusiasm is all too
often the source of self-righteousness and misguided attempts at
evangelism.  We witness such a recurring theme happen with Unix, Arch
Linux, Emacs, and more.  Some user discovers a new cool workflow and now
they want to convert their peers to it.  This hints at the kind of
thinking that treats the world in simplistic, binary terms: Unix is
simple VS Emacs is complex; Arch Linux is for hackers VS Ubuntu is for
simpletons…  Those are stereotypes that rest on misunderstandings
about the intent and the purpose of each of those paradigms, their
context-specific pros and cons, as well as the potentially numerous
reasons one may have to opt for a given choice.</p>

<p>To my mind, the exuberant disciple is prone to dogmatism because they
read the rules as the single source of authority, while the teacher who
has long studied and internalised those topics knows the extent of their
application—their limitations, that is—and, above all, understands
when they should be circumvented and how.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Modus themes: review rainbow-delimiters faces</title>
      <description>Detailed report on the overhaul of the faces that apply to the rainbow-delimiters package.</description>
      <pubDate>Sun, 27 Dec 2020 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2020-12-27-modus-themes-review-rainbow-delimiters/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2020-12-27-modus-themes-review-rainbow-delimiters/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>The present report documents the otherwise subtle changes to the styling
of the <code>rainbow-delimiters</code> faces.  I received user feedback from
Christopher Dimech, to whom I am most thankful.  What we have tried to
achieve is two-fold (any errors are my own):</p>

<ol>
  <li>Broaden the selection of colours, without prejudice to the
overarching accessibility standard of the themes (quantified as a
contrast in relative luminance of 7:1 between any given combination
of background and foreground—the WCAG AAA standard).</li>
  <li>Control the colour distance between adjacent values, as those apply
to each level of delimiter depth.</li>
</ol>

<p>Those combined enhance the “rainbow” quality of the aforementioned
library and, thus, make the support for it at the theme level better
overall.</p>

<h2>Before and after</h2>

<p>Here are some close-up screenshots comparing the levels of delimiter
depth between old and new styles.  Notice how the first level of the new
ones is the same as the main foreground (black/white).  This little
touch ensures that you do not get colouration with no semantic value for
balanced expressions that are only one level deep.</p>

<p><img alt="Modus Operandi delimiters old" src="https://protesilaos.com/assets/images/attachments/modus-operandi-rainbow-delimiters-parens-old.png" /></p>

<p><img alt="Modus Operandi delimiters new" src="https://protesilaos.com/assets/images/attachments/modus-operandi-rainbow-delimiters-parens-new.png" /></p>

<p><img alt="Modus Vivendi delimiters old" src="https://protesilaos.com/assets/images/attachments/modus-vivendi-rainbow-delimiters-parens-old.png" /></p>

<p><img alt="Modus Vivendi delimiters new" src="https://protesilaos.com/assets/images/attachments/modus-vivendi-rainbow-delimiters-parens-new.png" /></p>

<h2>Contexualised effect</h2>

<p>Using those same styles, here is some code.  Open the images to see them
at full scale.  Also remember that bold and slanted constructs are
optional, as well as several other parameters—consult <a href="https://protesilaos.com/modus-themes">the Modus
themes manual</a>).</p>

<p><img alt="Modus Operandi delimiters code old" src="https://protesilaos.com/assets/images/attachments/modus-operandi-rainbow-delimiters-code-large-old.png" /></p>

<p><img alt="Modus Operandi delimiters code new" src="https://protesilaos.com/assets/images/attachments/modus-operandi-rainbow-delimiters-code-large-new.png" /></p>

<p><img alt="Modus Vivendi delimiters code old" src="https://protesilaos.com/assets/images/attachments/modus-vivendi-rainbow-delimiters-code-large-old.png" /></p>

<p><img alt="Modus Vivendi delimiters code new" src="https://protesilaos.com/assets/images/attachments/modus-vivendi-rainbow-delimiters-code-large-new.png" /></p>

<h2>Colour distance between the old colours</h2>

<p>The following tables, written in <code>org-mode</code> notation, calculate the
colour distance between adjacent delimiter foregrounds while accounting
for their positional placement (so 1 compared with 2, 2 with 3, and so
on):</p>

<pre><code class="language-org">#+DESCRIPTION: Colour distance between foregrounds (Modus Operandi old)
| 1       | 2       | Distance |
|---------+---------+----------|
| #145c33 | #5317ac |    69287 |
| #5317ac | #005a5f |    50065 |
| #005a5f | #863927 |    53989 |
| #863927 | #0000c0 |   118623 |
| #0000c0 | #315b00 |   146343 |
| #315b00 | #8f0075 |    90740 |
| #8f0075 | #30517f |    48311 |
| #30517f | #70480f |    43837 |
#+TBLFM: $3='(color-distance $1 $2)

#+DESCRIPTION: Colour distance between foregrounds (Modus Vivendi old)
| 1       | 2       | Distance |
|---------+---------+----------|
| #00cd68 | #b6a0ff |   147580 |
| #b6a0ff | #6ae4b9 |    45596 |
| #6ae4b9 | #f0ce43 |    82999 |
| #f0ce43 | #00bcff |   234824 |
| #00bcff | #80d200 |   219273 |
| #80d200 | #f78fe7 |   178927 |
| #f78fe7 | #4ae8fc |   112296 |
| #4ae8fc | #cfdf30 |   148519 |
#+TBLFM: $3='(color-distance $1 $2)
</code></pre>

<p>You can see in the third column that the colour distance is
inconsistent, with some combinations being better than others.  Our
intent here is to normalise the distance between each pair so that the
results are more uniform.</p>

<h2>Colour distance between the new colours</h2>

<p>Same principle as above, only now we are applying new colours in a
different sequence that is conducive to our ends.  You can now tell that
the third column shows a greater level of consistency, understood as a
harmonised distance in colour space between each pair.</p>

<pre><code class="language-org">#+DESCRIPTION: Colour distance between foregrounds (Modus Operandi new)
| 1       | 2       | Distance |
|---------+---------+----------|
| #000000 | #a8007f |   109670 |
| #a8007f | #005f88 |   102860 |
| #005f88 | #904200 |   101746 |
| #904200 | #7f10d0 |   118454 |
| #7f10d0 | #006800 |   187726 |
| #006800 | #b60000 |   122282 |
| #b60000 | #1f1fce |   169872 |
| #1f1fce | #605b00 |   141743 |
#+TBLFM: $3='(color-distance $1 $2)

#+DESCRIPTION: Colour distance between foregrounds (Modus Vivendi new)
| 1       | 2       | Distance |
|---------+---------+----------|
| #ffffff | #ff62d4 |   103094 |
| #ff62d4 | #3fdfd0 |   160498 |
| #3fdfd0 | #fba849 |   149161 |
| #fba849 | #9f80ff |   103680 |
| #9f80ff | #4fe42f |   166683 |
| #4fe42f | #fe6060 |   157802 |
| #fe6060 | #4fafff |   166841 |
| #4fafff | #f0dd60 |   137617 |
#+TBLFM: $3='(color-distance $1 $2)
</code></pre>

<p>The exact same distance is not always possible, because each colour
value must also conform with our accessibility target when compared to
its background.  What we do here is an approximation or else an attempt
to optimise the use of resources within an overarching constraint (a
good one, but a constraint nonetheless).</p>

<h2>Ongoing refinements</h2>

<p>Note that it is always easier to work with colours against a dark
backdrop.  Colour is luminant and darkness is interpreted as the absence
of luminance, so nuances are easier to spot.  This, in turn, means that
the potential for errors is greater, even after having narrowed the
colour space to only the values that pass the accessibility criterion of
the themes (the 7:1 contrast—also check the <code>modus-themes-contrast</code>
function that is documented in the manual).</p>

<p>Technicalities aside, this review constitutes another step towards
delivering a comprehensive package for styling GNU Emacs in accordance
with the highest legibility standard.  It comes just a few days after
the overhaul of the <code>org-habit</code> faces (no report for that as I had other
things to write, but you can read the minutia in <a href="https://gitlab.com/protesilaos/modus-themes/-/issues/135">issue
135</a>—thanks
again to Gustavo Barros for the feedback there).</p>

<p>With the major release of version <code>1.0.0</code> earlier this month, we are in
the process of iterating on what already is a solid basis.  Propitious
growth, one might say.</p>

<p>If you use the themes and feel that something does not work well enough,
please <a href="https://protesilaos.com/contact">contact me</a>.  I am always eager
to review things and learn from your insights.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Modus themes 1.0.0 (backward-incompatible changes)</title>
      <description>Information about the first major release of my highly accessible themes for GNU Emacs.</description>
      <pubDate>Sat, 05 Dec 2020 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2020-12-05-modus-themes-1-0-0/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2020-12-05-modus-themes-1-0-0/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Just published version <code>1.0.0</code> of the Modus themes.  The release notes
are reproduced below.  Please read them carefully as there are some
breaking changes that require manual intervention in user init files.</p>

<p>Feel welcome to <a href="https://protesilaos.com/contact/">contact me</a> if you
need to.</p>

<hr />

<h2>Modus themes version 1.0.0</h2>

<p>By Protesilaos Stavrou <a href="mailto:info@protesilaos.com">info@protesilaos.com</a> on 2020-12-05</p>

<p>This entry documents the changes since version 0.13.0 (2020-10-08).
They constitute a major release with backward-incompatible additions
which are described below.</p>

<p>As always, every colour-related modification documented herein conforms
with the overarching accessibility objective of the themes for a minimum
contrast ratio of 7:1 between background and foreground values in their
given combination (conformance with the WCAG AAA standard).</p>

<p>Expect to find examples of basic and advanced customisations in the
comprehensive Info manual bundled with the themes, which is also
available at: <a href="https://protesilaos.com/modus-themes">https://protesilaos.com/modus-themes</a>.</p>

<h2>Overview of major changes</h2>

<ol>
  <li>
    <p>The option that was present in earlier releases to override the
colour palette has been removed.  It cannot work with byte
compilation.  We must not compromise on performance, especially in
light of the fairly high line count of the themes (broad face
coverage combined with a multitude of customisation options).</p>
  </li>
  <li>
    <p>The code base has been refactored.  The two themes, Modus Operandi
(light) and Modus Vivendi (dark), derive from the same source.</p>
  </li>
  <li>
    <p>The refactoring makes it possible to distribute the two themes as
part of a single package.  You can find <code>modus-themes</code> on MELPA, with
other archives and core Emacs following suit soon thereafter (the
Modus themes are built into Emacs since their version 0.12.0).</p>
  </li>
  <li>
    <p>The <code>modus-operandi-theme</code> and <code>modus-vivendi-theme</code> packages in
MELPA and GNU ELPA are obsolete.  MELPA has already deleted them and
now only provides <code>modus-themes</code>, while GNU ELPA shall do so soon
enough.</p>

    <ul>
      <li>Package providers of GNU/Linux distros, or other archives, are
encouraged to update their sources so that they only deliver a
single package that covers both themes.</li>
    </ul>
  </li>
  <li>
    <p>To avoid surprises, the refactored code is in the <code>main</code> branch which
becomes the default henceforth.  The <code>master</code> branch, from where all
prior releases were built, is thus deprecated.  Existing installs of
<code>modus-operandi-theme</code> and/or <code>modus-vivendi-theme</code> must manually
switch to the new package sources, which offer a certain guarantee
that they are informed of the breaking changes documented herein.</p>

    <ul>
      <li>Users of <code>straight.el</code> must make sure that they pull from the
<code>main</code> branch.  This may also be the case for other such tools,
though I have not had the time to test them all.</li>
    </ul>
  </li>
  <li>
    <p>The refactoring introduces a unified customisation framework.  Now
all user-facing variables are named <code>modus-themes-*</code> instead of
<code>modus-operandi-*</code> and <code>modus-vivendi-*</code>.  Users of both items can
thus cut down on duplicate code or inelegant workarounds on their
end.  Example:</p>

    <pre><code>modus-operandi-bold-constructs
   |   |   |   |   |   |   |   ====&gt; modus-themes-bold-constructs
modus-vivendi-bold-constructs
</code></pre>
  </li>
  <li>
    <p>The themes now provide common user-facing functions.</p>

    <ul>
      <li>
        <p><code>modus-themes-load-operandi</code> and <code>modus-themes-load-vivendi</code> can be
used in Lisp to load the theme they name, while disabling their
counterpart and running <code>modus-themes-after-load-theme-hook</code>.  The
hook can be used to override or further customise faces (examples
are furnished in the manual).</p>
      </li>
      <li>
        <p><code>modus-themes-toggle</code> interactively switches between Modus Operandi
and Modus Vivendi or opens a minibuffer prompt to select between
the two if none of them is active.  It ultimately calls the
aforementioned functions to load the themes, so it also triggers
the hook.  Bind this command to a key of your convenience (the
author uses F5).</p>
      </li>
      <li>
        <p><code>modus-themes-color</code> returns the colour value of a symbol in the
alists that hold the themes’ palettes.  The alists are
<code>modus-themes-colors-operandi</code> and <code>modus-themes-colors-vivendi</code>.
<code>modus-themes-color</code> always operates on the active theme, making it
suitable for post-theme-load customisations (via the hook we
covered earlier).  Its usage is documented in the manual and is
meant to be employed by those who are prepared to assume
responsibility for face-related changes they introduce on their
setup.</p>
      </li>
      <li>
        <p><code>modus-themes-color-alts</code> occupies the same niche as the one right
above, with the exception that it takes two arguments.  The first
is the alist key to be used by <code>modus-operandi</code> and the second is
for <code>modus-vivendi</code>.</p>
      </li>
      <li>
        <p><code>modus-themes-wcag-formula</code> implements the WCAG formula to measure
a colour value’s relative luminance.  While <code>modus-themes-contrast</code>
applies the formula to derive the contrast ratio between two colour
values in hexadecimal RGB notation.  This can be used to verify the
accessibility of colour combinations provided by the themes or new
ones defined at the user level (the Modus themes conform with the
WCAG AAA standard which means that this kind of contrast is 7:1 or
higher for all applicable background+foreground combinations).</p>
      </li>
    </ul>
  </li>
</ol>

<h2>Customisation options</h2>

<p>This is the complete list with all the customisation options:</p>

<pre><code>modus-themes-slanted-constructs             (boolean)
modus-themes-bold-constructs                (boolean)
modus-themes-variable-pitch-headings        (boolean)
modus-themes-no-mixed-fonts                 (boolean)
modus-themes-headings                       (alist)
modus-themes-scale-headings                 (boolean)
modus-themes-fringes                        (choice)
modus-themes-org-blocks                     (choice)
modus-themes-prompts                        (choice)
modus-themes-mode-line                      (choice)
modus-themes-diffs                          (choice)
modus-themes-syntax                         (choice)
modus-themes-intense-hl-line                (boolean)
modus-themes-paren-match                    (choice)
modus-themes-region                         (choice)
modus-themes-links                          (choice)
modus-themes-completions                    (choice)
</code></pre>

<p>Plus those which are contingent on <code>modus-themes-scale-headings</code>:</p>

<pre><code>modus-themes-scale-1
modus-themes-scale-2
modus-themes-scale-3
modus-themes-scale-4
modus-themes-scale-5
</code></pre>

<p>Consult the manual for each of them and please verify that none of the
older options remains in your init file.</p>

<h3>Customisation options that did not exist in earlier versions</h3>

<p>New entries and their possible values:</p>

<ol>
  <li>
    <p>modus-themes-syntax</p>

    <ul>
      <li>nil (default)</li>
      <li>faint</li>
      <li>yellow-comments</li>
      <li>green-strings</li>
      <li>yellow-comments-green-strings</li>
      <li>alt-syntax</li>
      <li>alt-syntax-yellow-comments</li>
    </ul>

    <p>(supersedes options for “faint syntax” and “comments”)</p>
  </li>
  <li>
    <p>modus-themes-links</p>

    <ul>
      <li>nil (default)</li>
      <li>faint</li>
      <li>neutral-underline</li>
      <li>faint-neutral-underline</li>
      <li>no-underline</li>
    </ul>

    <p>(supersedes options for “no underlines”)</p>
  </li>
  <li>
    <p>modus-themes-paren-match</p>

    <ul>
      <li>nil (default)</li>
      <li>intense</li>
      <li>subtle-bold</li>
      <li>intense-bold</li>
    </ul>

    <p>(supersedes options for “intense paren match”)</p>
  </li>
  <li>
    <p>modus-themes-region</p>

    <ul>
      <li>nil (default)</li>
      <li>no-extend</li>
      <li>bg-only</li>
      <li>bg-only-no-extend</li>
    </ul>
  </li>
</ol>

<p>Furthermore, the <code>modus-themes-diff</code> has a new option to choose from:
the symbol <code>bg-only</code>.  It applies colour-coded backgrounds but does not
override any syntax highlighting that may be present.  This makes it
suitable for use with a non-nil value for diff-font-lock-syntax (which
is the default for diff-mode buffers in Emacs 27 or higher).</p>

<h2>Support for new faces or face groups</h2>

<ul>
  <li>consult</li>
  <li>macrostep</li>
  <li>make-mode</li>
  <li>pdf-tools</li>
  <li>popup</li>
  <li>shr</li>
  <li>sieve-mode</li>
</ul>

<p>(remember that the list of supported packages is already comprehensive)</p>

<p>Thanks to:</p>

<ul>
  <li>
    <p>Adam Spiers for bringing <code>macrostep</code> to my attention.</p>
  </li>
  <li>
    <p>Madhavan Krishnan for submitting the code for pdf-tools:
<a href="https://gitlab.com/protesilaos/modus-themes/-/merge_requests/14">https://gitlab.com/protesilaos/modus-themes/-/merge_requests/14</a>.</p>
  </li>
  <li>
    <p>Manuel Uberti for reporting the issue with popup.el:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/107">https://gitlab.com/protesilaos/modus-themes/-/issues/107</a>.</p>
  </li>
  <li>
    <p>Again thanks to Manuel for consult:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/123">https://gitlab.com/protesilaos/modus-themes/-/issues/123</a>.  And to
Daniel Mendler, its developer, for communicating with us on the status
of the project.</p>
  </li>
  <li>
    <p>Togan Muftuoglu for reporting the issue with sieve-mode:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/121">https://gitlab.com/protesilaos/modus-themes/-/issues/121</a>.</p>
  </li>
</ul>

<h2>Refinements to existing faces</h2>

<ul>
  <li>
    <p>The diary and holiday marks in <code>M-x calendar</code> are displayed using a
slightly tinted background in order to improve their contrast.
Holidays are also rendered in a bold font.  Thanks to Nicolas De
Jaeghere for reporting the issue and following it up with valuable
feedback: <a href="https://gitlab.com/protesilaos/modus-themes/-/issues/127">https://gitlab.com/protesilaos/modus-themes/-/issues/127</a>.</p>
  </li>
  <li>
    <p>Code blocks in <code>markdown-mode</code> now have a subtle background that
extends to the edge of the window.  Thanks to Roman Rudakov for the
suggestion and Hörmetjan Yiltiz for further testing:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/115">https://gitlab.com/protesilaos/modus-themes/-/issues/115</a>.</p>
  </li>
  <li>
    <p>Inline code in <code>markdown-mode</code> has a subtle background that covers the
length of the construct.  Refer to issue #115 as above.</p>
  </li>
  <li>
    <p>Ivy’s main pattern-matching faces are slightly adjusted to work more
effectively when users opt for “modus-themes-completions ‘moderate” or
“modus-themes-completions ‘opinionated”.</p>
  </li>
  <li>
    <p>Swiper’s <code>swiper-isearch</code> command defaults to a more colourful
presentation that clearly disambiguates matching pattern groups
between themselves as well as their own active and inactive states.
Thanks to John Haman for reporting the problem:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/125">https://gitlab.com/protesilaos/modus-themes/-/issues/125</a>.</p>
  </li>
  <li>
    <p>Swiper’s remaining faces are tweaked to better convey the intent of
this tool.</p>
  </li>
  <li>
    <p>The border of <code>ivy-posframe</code> is more noticeable.  Thanks to Pete
Kazmier: <a href="https://gitlab.com/protesilaos/modus-themes/-/issues/126">https://gitlab.com/protesilaos/modus-themes/-/issues/126</a>.</p>
  </li>
  <li>
    <p>The <code>fringe</code> face no longer returns a nil background, which allows
<code>dap-ui-controls-mode</code> to display things properly.  Thanks to Simon
Pugnet: <a href="https://gitlab.com/protesilaos/modus-themes/-/issues/106">https://gitlab.com/protesilaos/modus-themes/-/issues/106</a>.</p>
  </li>
  <li>
    <p>Tags and priority cookies in Org mode no longer have a box property.
This is because of changes in upstream Org that we helped solve and
that are covered in the previous CHANGELOG entry (in short: Org
heading constructs inherit the underlying heading’s properties that
are not part of their own specs, while they retain those that are
explicitly defined for them—adaptive headings).  Properly solves the
following issues:</p>

    <ul>
      <li>
        <p><a href="https://gitlab.com/protesilaos/modus-themes/-/issues/104">https://gitlab.com/protesilaos/modus-themes/-/issues/104</a>.  Thanks
to user “bepolymathe”.</p>
      </li>
      <li>
        <p><a href="https://gitlab.com/protesilaos/modus-themes/-/issues/95">https://gitlab.com/protesilaos/modus-themes/-/issues/95</a>.  Thanks
to Roman Rudakov.</p>
      </li>
    </ul>
  </li>
  <li>
    <p>The faces of <code>M-x re-builder</code> are less intrusive.</p>
  </li>
  <li>
    <p>All the following now inherit from basic font-lock faces and thus
benefit from options such as <code>modus-themes-syntax</code>:</p>

    <ul>
      <li>geiser</li>
      <li>nxml-mode</li>
      <li>tuareg</li>
      <li>web-mode</li>
      <li>xah-elisp-mode</li>
    </ul>
  </li>
  <li>
    <p>Diff headers have a subtle grey background that extends to the edge of
the window.</p>
  </li>
  <li>
    <p>The faces of log-view and change-log use colour combinations that
better differentiate the various objects on display.</p>
  </li>
  <li>
    <p><code>font-lock-type-face</code> uses a cyan hue instead of magenta.</p>
  </li>
  <li>
    <p><code>magit-header-line-key</code> uses a blue foreground colour instead of red.</p>
  </li>
  <li>
    <p>Doc strings in code syntax are rendered in a new dedicated colour.
The change is fairly subtle and should practically go unnoticed.</p>
  </li>
  <li>
    <p><code>org-date</code> now respects the <code>modus-themes-no-mixed-fonts</code> option.
Thanks to user “fleimgruber” for reporting the issue:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/124">https://gitlab.com/protesilaos/modus-themes/-/issues/124</a>.</p>
  </li>
  <li>
    <p><code>org-property-value</code> uses a slightly different shade of cyan.</p>
  </li>
  <li>
    <p><code>dim-autoload</code> will always look like a regular comment.</p>
  </li>
  <li>
    <p>The <code>italic</code> face is inhereted by all relevant faces instead of
hard-wiring a slant property.  This offers the potential advantage of
specifying a distinct family (or other properties) for constructs that
are meant to be rendered in italics (the manual has an example in its
DIY sections for this scenario though it uses the <code>bold</code> face—just
apply the same idea to the <code>italic</code> face).</p>
  </li>
  <li>
    <p><code>dictionary-reference-face</code> inherits from <code>button</code> (as with all
links).</p>
  </li>
  <li>
    <p>Several comment-related faces beyond the basic ones work with
<code>modus-themes-syntax</code> when that has an effect on the colour of
comments.  The faces are:</p>

    <ul>
      <li>git-commit-comment-file</li>
      <li>git-commit-comment-heading</li>
      <li>git-rebase-comment-hash</li>
      <li>git-rebase-comment-heading</li>
    </ul>
  </li>
  <li>
    <p><code>transient-value</code> is more noticeable and fits better in its context.</p>
  </li>
  <li>
    <p>All remaining Org metadata-related faces are refined for consistency
between them in an attempt to make them unobtrusive.  More subtle
colouration is applied.  Affected faces:</p>

    <ul>
      <li>org-drawer</li>
      <li>org-property-value</li>
      <li>org-special-keyword</li>
    </ul>
  </li>
</ul>

<h2>Theme-related contributions to the wider community</h2>

<ul>
  <li>
    <p>Defined the <code>log-view-commit-body</code> for Emacs 28.1:
<a href="https://lists.gnu.org/archive/html/bug-gnu-emacs/2020-11/msg00303.html">https://lists.gnu.org/archive/html/bug-gnu-emacs/2020-11/msg00303.html</a>
and
<a href="https://lists.gnu.org/archive/html/bug-gnu-emacs/2020-11/msg02196.html">https://lists.gnu.org/archive/html/bug-gnu-emacs/2020-11/msg02196.html</a>.</p>
  </li>
  <li>
    <p>Specified the version of the <code>diff-error</code> face for Emacs 28.1:
<a href="https://lists.gnu.org/archive/html/bug-gnu-emacs/2020-11/msg01328.html">https://lists.gnu.org/archive/html/bug-gnu-emacs/2020-11/msg01328.html</a>.</p>
  </li>
  <li>
    <p>Added the <code>org-dispatcher-highlight</code> face to upstream Org:
<a href="https://lists.gnu.org/archive/html/emacs-orgmode/2020-10/msg00158.html">https://lists.gnu.org/archive/html/emacs-orgmode/2020-10/msg00158.html</a>.</p>

    <ul>
      <li>Report with screenshots:
<a href="https://protesilaos.com/codelog/2020-10-24-org-export-dispatcher-face/">https://protesilaos.com/codelog/2020-10-24-org-export-dispatcher-face/</a>.</li>
    </ul>
  </li>
  <li>
    <p>Helped fix face of Flymake’s unknown backend in inactive modelines:
<a href="https://lists.gnu.org/archive/html/bug-gnu-emacs/2020-11/msg01119.html">https://lists.gnu.org/archive/html/bug-gnu-emacs/2020-11/msg01119.html</a>.</p>
  </li>
  <li>
    <p>Solved bug#44198 about a user not knowning the themes are in Emacs:
<a href="https://lists.gnu.org/archive/html/bug-gnu-emacs/2020-10/msg02001.html">https://lists.gnu.org/archive/html/bug-gnu-emacs/2020-10/msg02001.html</a>.</p>
  </li>
</ul>

<h2>Miscellaneous</h2>

<ul>
  <li>
    <p>The new default <code>main</code> branch of the Modus themes’ git repo is an idea
that was presented by user “Emacs Contrib” in issue 112:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/112">https://gitlab.com/protesilaos/modus-themes/-/issues/112</a>.  Raising
awareness about the negative impact of potentially, tacitly, or
explicitly offensive language is a goal worth pursuing.  Plus “main”
is a more appropriate name for the primary branch of a project and we
do not lose anything by introducing this change as part of version
1.0.0, which anyhow requires manual interventions in user
configurations.</p>
  </li>
  <li>
    <p>Thanks to Manuel Uberti, Jeremy Friesen, and Gitlab user “Eugene” for
their feedback during the process that eventually led to the
development of the <code>modus-themes-syntax</code> customisation option:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/105">https://gitlab.com/protesilaos/modus-themes/-/issues/105</a>.</p>
  </li>
  <li>
    <p>Thanks to André Alexandre Gomes for the feedback in issue 111, which
led to the simplification of the manual’s references to Guix:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/111">https://gitlab.com/protesilaos/modus-themes/-/issues/111</a>.</p>
  </li>
  <li>
    <p>Thanks to Nicolas De Jaeghere for noting that BBDB is indirectly
supported: <a href="https://gitlab.com/protesilaos/modus-themes/-/issues/128">https://gitlab.com/protesilaos/modus-themes/-/issues/128</a>.</p>
  </li>
</ul>

<p>Between the refactoring of the code base and all other changes, this has
been yet another period of hard work to deliver on the promise of themes
that are (i) highly accessible and (ii) comprehensive in both their face
coverage and customisation options, while always conforming with the
highest accessibility standard for legible text.</p>

<p>Special thanks to the MELPA maintainers for all their contributions.
MELPA is an integral part of the wider Emacs community.  Thanks, in
particular, to Chris Rayner who has reviewed all my pull requests
hitherto, and to Jonas Bernoulli for checking the latest one (and its
concomitant issue) that introduced the new <code>modus-themes</code> package.</p>

<p>Thank you, the reader, for your attention and for understanding the
longer term benefits of the refactoring, despite the short term friction
it may have introduced.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Org’s export dispatcher has a new face for its keys</title>
      <description>The export dispatcher menu that Org produces now has a new face to highlight its options. It makes things more usable.</description>
      <pubDate>Sat, 24 Oct 2020 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2020-10-24-org-export-dispatcher-face/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2020-10-24-org-export-dispatcher-face/</guid>
      <content:encoded>
        <![CDATA[
         
         <p class="info"><strong>Update 2020-10-25 10:57 +0300:</strong> Added screen shots with the Modus
Operandi and Modus Vivendi themes.</p>

<p class="info"><strong>Update 2020-11-28 15:33 +0300:</strong> Update screen shots for
<code>modus-themes</code> version <code>1.0.0</code>.</p>

<p>As of commit <code>7ebb2d562</code> in the git repo of Emacs’ Org mode, the export
dispatcher uses a new face to highlight its available keys and possible
options: <code>org-dispatcher-highlight</code>.  It supersedes the general purpose
<code>org-warning</code> for this particular interface.</p>

<h2>Before and after</h2>

<p>This demonstration is on <code>emacs -Q</code>.  First without the patch and then
with it:</p>

<p><img alt="Org dispatcher before" src="https://protesilaos.com/assets/images/attachments/org-export-dispatcher-face-old.png" /></p>

<p><img alt="Org dispatcher after" src="https://protesilaos.com/assets/images/attachments/org-export-dispatcher-face-new.png" /></p>

<p>And below are <a href="https://protesilaos.com/modus-themes">my Modus themes</a>
(Modus Operandi and Modus Vivendi, version <code>1.0.0</code> or higher) with the
new face tweaked to match their established metaphors.  We apply yellow
colouration to convey a sense of urgency, as the dispatcher is a special
window that remaps common key bindings by assigning special commands to
them:</p>

<p><img alt="Modus Operandi Org dispatcher wide" src="https://protesilaos.com/assets/images/attachments/modus-operandi-org-export-wide.png" /></p>

<p><img alt="Modus Operandi Org dispatcher narrow" src="https://protesilaos.com/assets/images/attachments/modus-operandi-org-export-narrow.png" /></p>

<p><img alt="Modus Vivendi Org dispatcher wide" src="https://protesilaos.com/assets/images/attachments/modus-vivendi-org-export-wide.png" /></p>

<p><img alt="Modus Vivendi Org dispatcher narrow" src="https://protesilaos.com/assets/images/attachments/modus-vivendi-org-export-narrow.png" /></p>

<h2>In the interest of usability</h2>

<p>The <a href="https://lists.gnu.org/archive/html/emacs-orgmode/2020-10/msg00158.html">email to the Org mailing
list</a>
reveals my rationale:</p>

<blockquote>
  <p>The export dispatcher’s active keys are highlighted using the
<code>org-warning</code> face.  That face is applied in various contexts,
including the agenda.</p>

  <p>Users who have difficulty reading the active keys of the export
dispatcher are therefore forced to modify <code>org-warning</code> throughout
their setup, even though their problem is present only while viewing
the dispatch UI (because highlighted keys are one or a few characters
long).</p>

  <p>The attached patch is an attempt to address this issue by creating a
new face that is specifically designed for the dispatch UI.</p>

  <p>For the background+foreground combinations, the selected values conform
with the highest accessibility standard for colour contrast (WCAG AAA,
else a minimum contrast ratio of 7:1).  I limited my options to what
<code>M-x list-colors-display</code> provides.</p>
</blockquote>

<p>The relevant diff:</p>

<pre><code class="language-diff"> lisp/org-faces.el | 14 ++++++++++++++
 lisp/ox.el        |  2 +-
 2 files changed, 15 insertions(+), 1 deletion(-)

diff --git a/lisp/org-faces.el b/lisp/org-faces.el
index c0556b8bb..94b283ad6 100644
--- a/lisp/org-faces.el
+++ b/lisp/org-faces.el
@@ -45,6 +45,20 @@ The foreground color of this face should be equal to the background
 color of the frame."
   :group 'org-faces)
 
+(defface org-dispatcher-highlight
+  '((default :weight bold)
+    (((class color) (min-colors 88) (background dark))
+     :background "gray20" :foreground "gold1")
+    (((class color) (min-colors 88) (background light))
+     :background "SlateGray1" :foreground "DarkBlue")
+    (((class color) (min-colors 16) (background dark))
+     :foreground "yellow")
+    (((class color) (min-colors 16) (background light))
+     :foreground "blue")
+    (t :inverse-video t))
+  "Face for highlighted keys in the dispatcher."
+  :group 'org-faces)
+
 (defface org-level-1 '((t :inherit outline-1))
   "Face used for level 1 headlines."
   :group 'org-faces)
diff --git a/lisp/ox.el b/lisp/ox.el
index 6dd2cd4a0..5ffd66816 100644
--- a/lisp/ox.el
+++ b/lisp/ox.el
@@ -6706,7 +6706,7 @@ back to standard interface."
 	    ;; on the first key, if any.  A nil value means KEY will
 	    ;; only be activated at first level.
 	    (if (or (eq access-key t) (eq access-key first-key))
-		(propertize key 'face 'org-warning)
+		(propertize key 'face 'org-dispatcher-highlight)
 	      key)))
 	 (fontify-value
 	  (lambda (value)
</code></pre>

<p>This commit resolves a conundrum that theme developers could find
themselves in:</p>

<ul>
  <li>Should I make the keys in the export dispatcher as clear as possible
without compromising on their utility?</li>
  <li>Or should I allow deadlines in the agenda to have a sense of urgency
without becoming intrusive and outright unpleasant?</li>
</ul>

<p>The introduction of the new face removes this constraint altogether by
disaggregating the uses of <code>org-warning</code>: dispatcher keys can be drawn
in a style that best complements the intended function of their
presentation, while agenda buffers and other interfaces can still
present <em>warnings</em>, such as pending tasks, in a manner that suits the
significations attached to that word.</p>

<p>To retain the old export dispatcher aesthetic, instruct
<code>org-dispatcher-highlight</code> to inherit from <code>org-warning</code> (or petition
your theme’s developer to consider such a reform).  For example:</p>

<pre><code class="language-elisp">(set-face-attribute 'org-dispatcher-highlight nil :inherit 'org-warning)
</code></pre>

<p>Please note that what matters is the presence of a new face, not the
exact colour values assigned to it, as shown by the tweaks I made to it
in my Modus themes.</p>

<h2>Thanks to the community</h2>

<p>I wrote this patch after receiving <a href="https://gitlab.com/protesilaos/modus-themes/-/issues/2#note_427541924">valuable feedback from user
“Anders”</a>
on the Modus themes’ issue tracker.</p>

<p>My gratitude extends to Bastien Guerry, the maintainer of Org mode, for
accepting my code and for their valuable contributions in general.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Why Emacs itself is my “favourite Emacs package”</title>
      <description>A presentation that highlights the core attributes of Emacs and explains why we should focus on workflows.</description>
      <pubDate>Wed, 21 Oct 2020 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2020-10-21-emacs-favourite-package/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2020-10-21-emacs-favourite-package/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=RiXK7NALgRs">https://www.youtube.com/watch?v=RiXK7NALgRs</a></p>
         
         <p>In this video blog I talk about the persistent question of “the killer
app” that gets asked in the Emacs community.  I explain why I think the
identification of a single package is often not enough to appreciate the
true value proposition of Emacs.  My case emphasises the importance of
workflows; workflows that typically combine lots of distinct tools and
benefit from core Emacs attributes.  It is the whole system that
matters, because all those packages—in their given combinations—make
up our day-to-day computing experience with Emacs.</p>

<p>The text of the presentation is written in <code>org-mode</code> notation and is
reproduced below.  Also check my Emacs configuration file, from where
you can get the code I use: <a href="https://protesilaos.com/dotemacs">https://protesilaos.com/dotemacs</a>.</p>

<hr />

<pre><code class="language-org">#+TITLE: Vlog: Emacs is my “favourite Emacs package”
#+AUTHOR: Protesilaos Stavrou · protesilaos.com

* Getting into the Emacs mindset

I will to talk to you about my approach to a recurring topic in the
Emacs community, best encapsulated in this question:

/What is your favourite package?/

Similar formulations:

+ What is the one thing that makes Emacs indispensable to you?
+ Which is Emacs' killer app?

Such questions can lead us to valuable findings.  There is truth to be
had in the insights drawn from them and we must learn as much as we can
in the process.

Note though that this type of inquiry expects from us to engage in an
analytical exercise that extracts an object from its milieu.  It puts us
in a frame of mind that can miss the true value proposition of Emacs.

The problématique comes with the latent risk of holding us captive to a
frame of mind characterised by *decontextualisation*, of examining an
object without reference to the environment that renders it possible.

Instead of thinking about workflows that can take you from one context
to another, we are expected to identify some silo of functionalities.
Are we then underestimating everything else that contributes to our
day-to-day /experience/ with Emacs?

* Don't ignore the forest while looking at the tree

Now before I get misunderstood: yes, Org and Magit are great; yes, there
are lots of individual packages that make your life easier; and yes,
there is value in finding which package[s] people enjoy the most.

What about the combination of all utilities?  What about the *gestalt*?

If you claim that “my favourite package is X” and then fail to couch
your statement in terms of the rest of the toolkit you rely on, you are
likely to underappreciate---or altogether ignore---the true value
proposition of Emacs.

You do not acknowledge how the whole system is pieced together.  More
importantly, you may not realise the potential of Emacs' extensibility,
which is dynamic or case-dependent.

In other words, Emacs provides the means to implement a metaphor like
that of the vaunted Unix pipes across its entire space.  In practical
terms, you can connect your email client to your agenda, your RSS reader
to your custom note-taking system, your music manager to your directory
editor, and so on.  And all these can benefit from interfaces for
searching, editing in bulk, etc.

My claim here is that most of the times there is no one package or
narrow subset that make Emacs great.  It rather is the linkages between
several pieces of code that make Emacs a pleasure to work with.  They
contribute to predictable-yet-flexible workflows.  These keep Emacs
relevant and, dare I say, intriguing.

* The three core attributes of Emacs

Emacs is programmable and introspectable.  Both presuppose transparency.
These make the Emacs experience open-ended.

+ Programmable :: One set of features can be made to interface with
  another, even though it was not conceived with the express purpose of
  optimising for that particular scenario.  What can be done with Emacs
  is not predetermined.  There is always scope for something new.

+ Introspectable :: The user can examine the entire code base or a
  specific implementation and, potentially, figure out how to connect to
  it through some other tool.  This is further supported by the robust
  self-documentation facilities of Emacs, as well as the high quality of
  material that is readily available through the built-in Info reader.
  Introspection has contributed to the /documentation culture/ that
  characterises the Emacs community at-large.

+ Transparent :: Emacs does not conceal its internals.  Virtually every
  case can be handled using the same language the code is written in
  (Emacs Lisp) while benefiting from live evaluation of new code.  You
  change something and you see it in action.  Combined with the
  self-documenting nature of Emacs, transparency provides insight into
  practically every single construct that makes up Elisp.  Which
  empowers us to make best use of Emacs' programmability.

When considered together, these engender the *interconnectedness* that
defines the Emacs space.
* Introspection in action

Quick demo of running =C-h o= (=describe-symbol=) over =mapcar= and =mapconcat=
and then testing those expressions.

#+begin_src emacs-lisp
(mapcar #'upcase '("one" "two" "three"))

(mapconcat #'upcase '("one" "two" "three") "-")
#+end_src

We can use =C-x C-e= (=eval-last-sexp=) to get live feedback of what each
function does.

We can check the log with =C-h e= (=view-echo-area-messages=).

These are the rudimentary tools you rely on to start using ELisp.  They
offer you the means to experiment with how to extend Emacs.
* A quick look at combining tools

Now let me switch to another window layout, where I have some plain text
files in a standard directory.  Nothing fancy here.  Just to show how
standard Emacs tools can combine together to deliver a consistent
computing experience.

+ Switching to another layout involves the built-in tabs (=tab-bar-mode=)
  plus some bespoke code of mine.
+ Find file at point using a filename or just part of a file (=C-x C-f M-n=).
+ Use a completion framework (=icomplete-mode= in my case).
+ Benefit from a pattern-matching style (=orderless= for me).
+ Jump to the directory that contains the file (=dired-jump=).
+ While in Dired, jump to an item using completion (=dired-goto-file=).
+ Or filter the Dired list and then find the item (=% m= potentially
  followed by =t k=).

* Interconnectedness in the Emacs space

My point is to highlight the true value of Emacs' extensibility.  Which
is realised in the connections you make between several pieces of
functionality.

And, as I already mentioned, one package does not need to know about the
presence of another /in advance/.

Your focus should be on the workflow.  On the whole system that helps
you get things done with Emacs.  Because that is what your actual
experience is about.  You benefit from the set of /emergent qualities/
that become available in the combination of otherwise disparate pieces
of functionality.

Let me stress the importance of interconnectedness in the Emacs space by
showing you another quick demo that combines three distinct packages
that were not developed for the express purpose of being combined
together:

+ =elfeed= for reading RSS/Atom feeds.
+ =bongo= for managing media files or links.
+ And my own experimental note-taking system (=usls=).

Finally, this entire presentation is made possible by combining several
tools:

+ =org-mode=
+ =olivetti-mode=
+ =org-tree-slide-mode=
+ =variable-pitch-mode=
+ my own commands for setting fonts
</code></pre>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Released Modus themes 0.13.0</title>
      <description>Information about the latest release of my highly-accessible themes for Emacs.</description>
      <pubDate>Thu, 08 Oct 2020 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2020-10-08-modus-themes-0-13-0/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2020-10-08-modus-themes-0-13-0/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Just published version <code>0.13.0</code> of the Modus themes.  The release notes
are reproduced below.  This is the largest release to date and also the
first one since the themes were incorporated in upstream Emacs.</p>

<p>Packages may take a while to get the update, so please be patient.
<a href="https://protesilaos.com/contact/">Contact me</a> in case something is
amiss.</p>

<hr />

<h2>Modus Operandi and Modus Vivendi version 0.13.0</h2>

<p>By Protesilaos Stavrou <a href="mailto:info@protesilaos.com">info@protesilaos.com</a> on 2020-10-08</p>

<p>This entry documents the changes since version 0.12.0 (2020-08-26).
There have been around 150 commits in the meantime, making this the
largest release to date (though sheer volume should not be conflated
with quality, of which there is plenty).</p>

<p>As always, everything described herein conforms with the overarching
accessibility objective of the themes for a minimum contrast ratio of
7:1 between background and foreground values in their given combinations
(conformance with the WCAG AAA standard).</p>

<h2>Overview</h2>

<ol>
  <li>
    <p>There is a new Info manual that documents the customisation options
as well as every other piece of information pertinent to the themes.
You will find it in the Info pages inside of Emacs.  Or browse it
online: <a href="https://protesilaos.com/modus-themes">https://protesilaos.com/modus-themes</a>.</p>
  </li>
  <li>
    <p>New customisation options grant users more power to further adapt the
active theme to their preferences.</p>
  </li>
  <li>
    <p>Extended coverage for even more faces and face groups, adding to the
already comprehensive list of directly supported ones.</p>
  </li>
  <li>
    <p>Lots of tweaks to improve the use of colour and avoid exaggerations
(well, “exaggerations” is relative, since the prior state was already
carefully designed).</p>
  </li>
  <li>
    <p>A new page hosts all pictures that demo the themes across a wide
range of scenaria: <a href="https://protesilaos.com/modus-themes-pictures">https://protesilaos.com/modus-themes-pictures</a>.</p>
  </li>
  <li>
    <p>Similarly, the change log also has its own dedicated web page:
<a href="https://protesilaos.com/modus-themes-changelog">https://protesilaos.com/modus-themes-changelog</a>.</p>
  </li>
</ol>

<h2>New customisation options</h2>

<p>Note that all customisation options are documented at length in the new
Info manual.  What is offered here is not necessarily exhaustive.</p>

<h3>Diff styles</h3>

<p>Symbol names (“choice” type):</p>

<ul>
  <li>modus-operandi-theme-diffs</li>
  <li>modus-vivendi-theme-diffs</li>
</ul>

<p>Possible values:</p>

<ol>
  <li>nil (default)</li>
  <li>desaturated</li>
  <li>fg-only</li>
</ol>

<p>DEPRECATED (“boolean” type):</p>

<ul>
  <li>modus-operandi-theme-subtle-diffs</li>
  <li>modus-vivendi-theme-subtle-diffs</li>
</ul>

<p>This option supersedes older ones while retaining their functionality.</p>

<p>The default remains unaltered, meaning that the diffs will use fairly
prominent colour-coded combinations for the various elements (e.g. green
text on an unambiguously green backdrop).</p>

<p>A <code>desatured</code> value will tone down the default aesthetic, giving a less
vibrant feel.</p>

<p>While <code>fg-only</code> removes almost all coloured backgrounds, opting to apply
colour only to the relevant text (this was the case with the
now-deprecated options).  There are some exceptions, like word-wise or
“refined” diffs, which still use coloured backgrounds to convey their
meaning.</p>

<h3>Modeline styles</h3>

<p>Symbol names (“choice” type):</p>

<ul>
  <li>modus-operandi-theme-mode-line</li>
  <li>modus-vivendi-theme-mode-line</li>
</ul>

<p>Possible values:</p>

<ol>
  <li>nil (default)</li>
  <li>3d</li>
  <li>moody</li>
</ol>

<p>DEPRECATED (“boolean” type):</p>

<ul>
  <li>modus-operandi-theme-3d-modeline</li>
  <li>modus-vivendi-theme-3d-modeline</li>
</ul>

<p>The default modeline continues to be a two-dimensional rectangle with a
border around it.  Active and inactive modelines use different colour
combinations for their main background and foreground.</p>

<p>Option <code>3d</code> produces an effect similar to what you get in a generic
Emacs session, where the active modeline has a pseudo three-dimensional
effect applied to it.  This option offers the same functionality as that
of the deprecated variables.</p>

<p>Option <code>moody</code> is designed specifically for use with the Moody library,
though it can also be used without it.  Instead of implementing a box
effect, it applies an overline and underline instead, while also toning
down the inactive modeline.</p>

<p>Thanks to Nicolas De Jaeghere for the feedback and code samples in issue
80: <a href="https://gitlab.com/protesilaos/modus-themes/-/issues/80">https://gitlab.com/protesilaos/modus-themes/-/issues/80</a></p>

<h3>Headline styles</h3>

<p>Symbol names (“alist” type):</p>

<ul>
  <li>modus-operandi-theme-headings</li>
  <li>modus-vivendi-theme-headings</li>
</ul>

<p>DEPRECATED (“boolean” type):</p>

<ul>
  <li>modus-operandi-theme-rainbow-headings</li>
  <li>modus-operandi-theme-section-headings</li>
  <li>modus-vivendi-theme-rainbow-headings</li>
  <li>modus-vivendi-theme-section-headings</li>
</ul>

<p>Possible values, which can be specified for each heading level (examples
further below):</p>

<ol>
  <li>nil (default fallback option—covers all heading levels)</li>
  <li>t (default style for a single heading, when the fallback differs)</li>
  <li>no-bold</li>
  <li>line</li>
  <li>line-no-bold</li>
  <li>rainbow</li>
  <li>rainbow-line</li>
  <li>rainbow-line-no-bold</li>
  <li>highlight</li>
  <li>highlight-no-bold</li>
  <li>rainbow-highlight</li>
  <li>rainbow-highlight-no-bold</li>
  <li>section</li>
  <li>section-no-bold</li>
  <li>rainbow-section</li>
  <li>rainbow-section-no-bold</li>
</ol>

<p>This supersedes and greatly expands upon what the deprecated variables
once offered.  It is now possible to (i) benefit from more stylistic
choices, and (ii) apply them on a per-level basis.</p>

<p>As always, the defaults remain in tact: headings are just rendered in a
bold weight and their colours are not too saturated to offer a plain
text impression that relies on typography to convey its meaning.</p>

<p>The info manual explains the details.  A few examples:</p>

<pre><code>;; Per-level styles (t means everything else)
(setq modus-operandi-theme-headings
      '((1 . highlight)
        (2 . line)
        (t . rainbow-line-no-bold)))

;; Uniform style for all levels
(setq modus-operandi-theme-headings
      '((t . rainbow-line-no-bold)))

;; Default style for level 1, while others differ
(setq modus-operandi-theme-headings
      '((1 . t)
        (2 . line)
        (t . rainbow-line-no-bold)))
</code></pre>

<p>Thanks to Adam Spiers for the feedback in issue 81:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/81">https://gitlab.com/protesilaos/modus-themes/-/issues/81</a>.  Also thanks
to Nicolas De Jaeghere for helping refine relevant stylistic choices:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/90">https://gitlab.com/protesilaos/modus-themes/-/issues/90</a>.</p>

<h3>No link underlines</h3>

<p>Symbol names (“boolean” type):</p>

<ul>
  <li>modus-operandi-theme-no-link-underline</li>
  <li>modus-vivendi-theme-no-link-underline</li>
</ul>

<p>Possible values:</p>

<ol>
  <li>nil (default)</li>
  <li>t</li>
</ol>

<p>By default, the themes apply an underline effect to links, symbolic
links, and buttons.  Users can now disable this style by setting the new
option to <code>t</code>.</p>

<p>Thanks to Utkarsh Singh for the feedback in issue 94:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/94">https://gitlab.com/protesilaos/modus-themes/-/issues/94</a></p>

<h3>No mixed fonts</h3>

<p>Symbol names (“boolean” type):</p>

<ul>
  <li>modus-operandi-theme-no-mixed-fonts</li>
  <li>modus-vivendi-theme-no-mixed-fonts</li>
</ul>

<p>Possible values:</p>

<ol>
  <li>nil (default)</li>
  <li>t</li>
</ol>

<p>By default, the themes configure some spacing-sensitive faces, such as
Org tables and code blocks, to always inherit from the <code>fixed-pitch</code>
face (documented in the manual).  This is to ensure that those
constructs remain monospaced when users opt for something like the
built-in <code>M-x variable-pitch-mode</code>.  Otherwise the layout would break.</p>

<p>The obvious downside with this theme design is that users need to
explicitly configure the font family of <code>fixed-pitch</code> in order to apply
their desired typeface (how to do this is also covered in the manual).
That may be something they do not want to do.  Hence this option to
disable any kind of font mixing done by the active theme.  Set it to
<code>t</code>.</p>

<h2>Support for new faces or face groups</h2>

<ul>
  <li>awesome-tray</li>
  <li>binder</li>
  <li>cperl-mode</li>
  <li>eldoc-highlight-function-argument</li>
  <li>erc escaped colour sequences</li>
  <li>eshell-syntax-highlighting</li>
  <li>flycheck-color-mode-line</li>
  <li>isearch regexp groups (Emacs version &gt;= 28)</li>
  <li>mpdel</li>
  <li>objed</li>
  <li>org 9.4 new faces: <code>org-headline-todo</code> and <code>org-table-header</code></li>
  <li>racket-mode</li>
  <li>typescript-mode</li>
</ul>

<p>Thanks to:</p>

<ul>
  <li>
    <p>Damien Cassou for reporting the issue with mpdel:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/99">https://gitlab.com/protesilaos/modus-themes/-/issues/99</a></p>
  </li>
  <li>
    <p>Dario Gjorgjevski for reporting the issue with erc:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/92">https://gitlab.com/protesilaos/modus-themes/-/issues/92</a></p>
  </li>
  <li>
    <p>Markus Beppler for contributing the patch for cperl-mode:
<a href="https://gitlab.com/protesilaos/modus-themes/-/merge_requests/11">https://gitlab.com/protesilaos/modus-themes/-/merge_requests/11</a></p>
  </li>
  <li>
    <p>User “Moesasji” for reporting the issue with objed:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/79">https://gitlab.com/protesilaos/modus-themes/-/issues/79</a></p>
  </li>
</ul>

<h2>Refinements to existing faces</h2>

<ul>
  <li>
    <p>calfw applies colours and styles in a way that makes it consistent
with the rest of the themes’ metaphors.</p>
  </li>
  <li>
    <p>diredfl makes more considerate use of colour.  We still apply colour
everywhere (the whole point of this package) but make sure to avoid
exaggerations.</p>
  </li>
  <li>
    <p>doom-modeline-battery-error face fits better with the rest of the
design.</p>
  </li>
  <li>
    <p>elfeed search buffers use less intense colours, while still keeping
all elements fairly distinct.  The intent is to avoid a “rainbow
effect” in such a dense interface.</p>
  </li>
  <li>
    <p>elfeed read and unread items are more distinct.</p>
  </li>
  <li>
    <p>git commit and vc log edit messages benefit from refined colour
combinations for their various constructs.  The commit’s summary is
now rendered in a bold weight, to better convey the idea that this is
a quasi heading element.</p>
  </li>
  <li>
    <p>gnus heading colours are more consistent.  All information remains
clearly distinct, but we now avoid using colours that are on opposite
sides of the colour spectrum.  Basically to keep things distinct
without going over the top.</p>
  </li>
  <li>
    <p>gnus read and unread items are easier to tell apart.  Thanks to user
“Nick” for reporting the issue:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/97">https://gitlab.com/protesilaos/modus-themes/-/issues/97</a>.</p>
  </li>
  <li>
    <p>help-argument-name has a distinct foreground colour, so that it is
easier to spot it in “<em>Help</em>” buffers.  Its slant is also controlled
by the active theme’s customisation option for slanted constructs (nil
by default—check the manual).</p>
  </li>
  <li>
    <p>helpful-heading now is consistent with other heading styles.  Thanks
to Nicolas De Jaeghere for reporting the issue:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/90">https://gitlab.com/protesilaos/modus-themes/-/issues/90</a>.</p>
  </li>
  <li>
    <p>icomplete, ido, orderless are all tweaked to work better under various
circumstances.</p>
  </li>
  <li>
    <p>info-menu-star uses a red colour to make it easier to select a menu
entry by estimating its number.  This face applies to every third
element and is a nice little extra to have.</p>
  </li>
  <li>
    <p>info quoted strings are configured to always render in <code>fixed-pitch</code>,
in line with the themes’ design for mixed fonts (remember to check the
relevant customisation option).</p>
  </li>
  <li>
    <p>line numbers work properly with <code>text-scale-adjust</code>.  Thanks to user
“jixiuf” for reporting the issue:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/98">https://gitlab.com/protesilaos/modus-themes/-/issues/98</a>.</p>
  </li>
  <li>
    <p>line-number-current-line no longer applies a bold weight to its text.
This is to avoid a certain “jump effect” while moving between lines,
where the affected numbers grow and shrink in weight as the line
changes (once you see it, you will know what I mean).</p>
  </li>
  <li>
    <p>line-number-major-tick and line-number-minor-tick do use a bold weight
because they are fixed on the scale.  Their colours are also improved
to better complement their intended role (these faces are for Emacs 27
or higher).</p>
  </li>
  <li>
    <p>magit-diff-file-heading-selection, magit-diff-hunk-heading-selection
use more appropriate colour combinations.</p>
  </li>
  <li>
    <p>markdown blockquotes and org quote blocks use a different foreground,
which is colder than the previous one.  Just to make sure that they
are not mistaken for inline code.</p>
  </li>
  <li>
    <p>message headers use less exaggerated colour combinations.  The
differences are fairly minor.</p>
  </li>
  <li>
    <p>message-mml no longer uses a green foreground, as that could
potentially cause confusion with quoted text in some cases.  A unique,
albeit less saturated, foreground is used instead.</p>
  </li>
  <li>
    <p>message-separator uses a more neutral colour combination, while
retaining its overall uniqueness within its context (i.e. mail
composition).</p>
  </li>
  <li>
    <p>modeline colours are refined to improve the contrast between active
and inactive states.</p>
  </li>
  <li>
    <p>mu4e-replied-face has a new colour that accounts for colour distance
relative to its context.  Thanks to Shreyas Ragavan for reporting the
issue: <a href="https://gitlab.com/protesilaos/modus-themes/-/issues/69">https://gitlab.com/protesilaos/modus-themes/-/issues/69</a>.</p>
  </li>
  <li>
    <p>org agenda date and structure no longer behave like headings in other
Org buffers.  Instead, they have their own styles to better perform
their intended function and to avoid exaggerations.</p>
  </li>
  <li>
    <p>org agenda dimmed to-do items (which have blocked sub-items) are no
longer assigned a subtle grey background colour.  They are instead
rendered with a bold weight and a subtle grey foreground to minimise
distractions.  Thanks to Roman Rudakov for reporting this in issue
101: <a href="https://gitlab.com/protesilaos/modus-themes/-/issues/101">https://gitlab.com/protesilaos/modus-themes/-/issues/101</a>.</p>
  </li>
  <li>
    <p>org agenda clocked items are configured to extend their background to
the edge of the window.  Otherwise they are cut off at the last text
character, which creates inconsistencies while using tags: a tag is
placed to the right so the background extends further than without
them.  Based again on the feedback of Roman Rudakov in issue 101:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/101">https://gitlab.com/protesilaos/modus-themes/-/issues/101</a>.</p>
  </li>
  <li>
    <p>org agenda current time no longer uses a background.  A bold weight
and a blue foreground are applied instead.  The intent is to keep
things clean.  This is also covered by Roman Rudakov’s feedback in
issue 101: <a href="https://gitlab.com/protesilaos/modus-themes/-/issues/101">https://gitlab.com/protesilaos/modus-themes/-/issues/101</a>.</p>
  </li>
  <li>
    <p>org-checkbox-statistics-done, org-checkbox-statistics-todo inherit
from org-done and org-todo respectively, instead of defining their own
properties.</p>
  </li>
  <li>
    <p>org drawers and their data now use <code>fixed-pitch</code> in the interest of
consistency with other metadata-like faces.  Thanks (yet again!) to
Nicolas De Jaeghere for reporting the issue:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/91">https://gitlab.com/protesilaos/modus-themes/-/issues/91</a>.</p>
  </li>
  <li>
    <p>org-footnote underlines will now always use the same colour, instead
of applying the one of other coloured constructs (e.g. when the
footnote is inline and part of the text is rendered as verbatim).</p>
  </li>
  <li>
    <p>org-meta-line is less prominent and, thus, more consistent with other
metadata-related constructs.</p>
  </li>
  <li>
    <p>org-roam faces are updated to match the current state of the upstream
project.  The main colour of org-roam links is now different than that
of standard links in an attempt to differentiate between the two (due
to their unique semantics).  If this is not desired, you can evaluate
the following:</p>

    <pre><code>(setq org-roam-link-use-custom-faces nil)
</code></pre>
  </li>
  <li>
    <p>org-todo, org-done, as well as relevant faces such as priorities and
statistics are reviewed to work better with all heading combinations.
Though please read the next section about “adaptive headings”, as such
workarounds will no longer be necessary for future stable releases of
Org.</p>
  </li>
  <li>
    <p>selectrum uses different styles than before to account for its unique
property of overlaying matching characters on top of the current
line’s background.  We want to avoid scenaria where matches are
difficult to discern and the current line is not clear.</p>
  </li>
  <li>
    <p>vc modeline states benefit from improved colour choices.  Just minor
adjustments to account for the review of the base modeline colours.</p>
  </li>
  <li>
    <p>vterm base colours now are variants of gray to ensure that some tools,
such as zsh suggestions work properly.  Thanks to user “jixiuf” for
reporting this issue and suggesting a possible solution:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/93">https://gitlab.com/protesilaos/modus-themes/-/issues/93</a>.</p>
  </li>
</ul>

<h2>Contributions to the wider community</h2>

<p>Sometimes the themes reveal bugs in other packages.  It is of paramount
importance that we report those to the upstream developers, try to help
them reproduce the issue, and, where possible, support them in tracing
the problem’s root cause.</p>

<p>Four such cases during this release:</p>

<ol>
  <li>
    <p>Adaptive Org headings.  Solved upstream and documented on my website:
<a href="https://protesilaos.com/codelog/2020-09-24-org-headings-adapt/">https://protesilaos.com/codelog/2020-09-24-org-headings-adapt/</a>.
Reported and discussed on the themes’ issue tracker:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/37">https://gitlab.com/protesilaos/modus-themes/-/issues/37</a>.</p>
  </li>
  <li>
    <p>Alignment of Org tags with proportional fonts.  Ongoing thread:
<a href="https://lists.gnu.org/archive/html/emacs-orgmode/2020-09/msg00415.html">https://lists.gnu.org/archive/html/emacs-orgmode/2020-09/msg00415.html</a>.
Reported and discussed on the themes’ issue tracker:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/85">https://gitlab.com/protesilaos/modus-themes/-/issues/85</a>.</p>
  </li>
  <li>
    <p>Org priority cookie has extra space.  Ongoing thread:
<a href="https://lists.gnu.org/archive/html/emacs-orgmode/2020-09/msg00696.html">https://lists.gnu.org/archive/html/emacs-orgmode/2020-09/msg00696.html</a>.
Reported and discussed on the themes’ issue tracker, with feedback
from Roman Rudakov:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/95">https://gitlab.com/protesilaos/modus-themes/-/issues/95</a>.</p>
  </li>
  <li>
    <p>Company overlay pop-up misaligns items.  Reported upstream and
acknowledged as a known issue that occurs in certain cases:
<a href="https://github.com/company-mode/company-mode/issues/1010">https://github.com/company-mode/company-mode/issues/1010</a>.
Discussion on the themes’ issue tracker, with feedback from Iris
Garcia: <a href="https://gitlab.com/protesilaos/modus-themes/-/issues/96">https://gitlab.com/protesilaos/modus-themes/-/issues/96</a>.</p>
  </li>
</ol>

<h2>Miscellaneous</h2>

<ul>
  <li>
    <p>Belatedly (by about 2 weeks) pushed tag for version 0.12.0.  Thanks to
Alex Griffin for bringing this to my attention:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/89">https://gitlab.com/protesilaos/modus-themes/-/issues/89</a></p>
  </li>
  <li>
    <p>Fixed a bug with how some older customisation options were declared as
obsolete.  Thanks to Tassilo Horn for noticing and reporting the
problem: <a href="https://gitlab.com/protesilaos/modus-themes/-/issues/88">https://gitlab.com/protesilaos/modus-themes/-/issues/88</a>.</p>
  </li>
  <li>
    <p>Fixed a misplaced optional prefix argument in the manual for how to
switch themes using a custom function.  Thanks to Manuel Uberti for
catching this omission of mine and reporting it:
<a href="https://gitlab.com/protesilaos/modus-themes/-/issues/84">https://gitlab.com/protesilaos/modus-themes/-/issues/84</a>.</p>
  </li>
  <li>
    <p>Silenced the Elisp package linter for a spurious error on a single
eldoc face.  Thanks to Steve Purcell for the guidance:
<a href="https://github.com/purcell/package-lint/issues/187">https://github.com/purcell/package-lint/issues/187</a>.</p>
  </li>
  <li>
    <p>Defined two new dedicated background colours for exceptional cases.
These are intended for internal use in very special circumstances.</p>
  </li>
  <li>
    <p>Reword GuixSD to “Guix System” in the list of package formats
currently available.</p>
  </li>
  <li>
    <p>Reviewed the main blue colours for both themes.  While the changes are
practically impossible to discern upon first sight, the process was
far from straightforward.  A complete report documents the minutia:
<a href="https://protesilaos.com/codelog/2020-09-14-modus-themes-review-blues/">https://protesilaos.com/codelog/2020-09-14-modus-themes-review-blues/</a>.</p>
  </li>
  <li>
    <p>Reviewed the “active” palette subset, typically used in the modelines.
No report was necessary for those, as the changes were fairly simple.</p>
  </li>
  <li>
    <p>Reviewed the “intense” background colour that comes into effect when
users opt for the customisation option for intense paren-match styles
(check the manual).  Both the hue and the saturation have been changed
to better conform with the intended function of this particular entry.</p>
  </li>
  <li>
    <p>Reviewed the fringe-specific accented backgrounds.  Commit 7316e3320
contains tables that compare the relative luminance of old and new
values.</p>
  </li>
  <li>
    <p>Improved the advice for setting fonts using <code>set-face-attribute</code>.  The
information is in the manual and is also available as a blog entry:
<a href="https://protesilaos.com/codelog/2020-09-05-emacs-note-mixed-font-heights/">https://protesilaos.com/codelog/2020-09-05-emacs-note-mixed-font-heights/</a>.</p>
  </li>
  <li>
    <p>Rewrote an expression as “(or x y)” instead of “(if x x y)” in one
place.  Just goes to show that tweaking the code is also part of the
deal.</p>
  </li>
  <li>
    <p>Abstracted and simplified heading level properties by using bespoke
theme faces.  Makes it easier to keep things consistent across the
various face groups.</p>
  </li>
  <li>
    <p>Same principle as above for diff-related styles.</p>
  </li>
  <li>
    <p>Users who prefer to do things their own way or who just wish to
contribute code to the Modus themes may wish to read my “Notes for
aspiring Emacs theme developers”:
<a href="https://protesilaos.com/codelog/2020-08-28-notes-emacs-theme-devs/">https://protesilaos.com/codelog/2020-08-28-notes-emacs-theme-devs/</a>.</p>
  </li>
</ul>

<p>This has been yet another period of intense work: reviewing faces and
applying colours is never easy, adding new customisation options is
always tricky, and documenting everything takes a lot of time (unless
you do all of those on a whimsy, which hopefully is not the case here).</p>

<p>Thanks again to everyone who helped improve the themes!</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>My simple note-taking system for Emacs (without Org)</title>
      <description>Introduction to "usls", my personal solution to writing notes in plain text using standard Emacs tools.</description>
      <pubDate>Thu, 08 Oct 2020 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2020-10-08-intro-usls-emacs-notes/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2020-10-08-intro-usls-emacs-notes/</guid>
      <content:encoded>
        <![CDATA[
         
         <p class="info">Update 2020-10-09 06:55 +0300:  Added annex with Karl Voit’s comment.</p>

<p>Earlier today I <a href="https://protesilaos.com/dotemacs/#h:787df548-0d95-4512-a61d-27852198f561">published as part of my
dotemacs</a>
the initial implementation of <code>usls</code>, the “Unassuming Sidenotes of
Little Significance” (USLS).  This is a small set of utilities that help
me write and maintain timestamped and categorised plain text files in a
flat directory listing.  It builds on core Emacs commands, such as
<code>dired</code> and <code>find-file</code>, while relying on functionality provided by
standard libraries like <code>thingatpt</code>.</p>

<p>The present article offers an overview of <code>usls</code>, my workflow, and their
underlying values.</p>

<h2>Plain text and Emacs commands</h2>

<p>USLS is the realisation of a personal note-taking system that I have
developed over the course of the last few months.  Its primary aim is to
remain faithful to a plain text workflow that could, in principle, be
implemented with nothing but a POSIX shell.</p>

<p>Everything from the resulting file name to the actual contents must be
usable in the most basic computing environment, such as a TTY, or a
generic text editor and file manager.  It must also be intelligible to
non-Emacs users for when I wish to share a note or, perhaps in the
future, to ask someone to act on my files.</p>

<p>To accomplish this, we set on a naming convention that offers an
adequate filtering mechanism at the visual level (more on naming in the
next section).  Each filename is written as <code>DATE--CATEGORY--TITLE.txt</code>:</p>

<pre><code>/home/prot/Documents/notes:
20201006_113858--politics--eu-deep-concerns-about-varosha.txt
20201006_120634--economics--google-and-fitbit-merger-is-a-scary-prospect.txt
20201007_124941--economics--plentiful-and-predictable-liquidity.txt
</code></pre>

<p>While this may seem primitive, just looking at a long list of that kind
will quickly reveal patterns.  With the help of <code>dired</code>, we can filter
by regular expression.  For example:</p>

<ul>
  <li>mark items that match a regexp with <code>% m</code>.</li>
  <li><code>t</code> to toggle the mark so that you select all the files that did not
match the initial search.</li>
  <li><code>k</code> to hide those from the list (bring everything back with <code>g</code>).</li>
</ul>

<p>Simple and super effective.</p>

<p>Speaking of Dired, one can always use <code>j</code> to jump to a file’s line using
completion.  I have Icomplete with the <code>orderless</code> pattern matching
style by Omar Antolín Camarena (check my dotemacs).  Jumping to a file
using out-of-order groups of flex/regexp matches feels empowering—and
is what I am used to doing throughout my Emacs setup.</p>

<p>Same principle for other standard tools, such as when conducting a
directory-wide grep.  There is no need to have a <code>usls</code>-specific
solution when there are plenty of general purpose alternatives in the
Emacs milieu, including the capable built-in <code>project.el</code> library that
<a href="https://www.manueluberti.eu/emacs/2020/09/18/project/">Manuel Uberti recently wrote about</a> (2020-09-18).</p>

<p>In short, <code>usls</code> does not implement a file manager, content searcher,
project organiser, etc.  Its focus is on streamlining the process of
creating notes.</p>

<h2>The file’s name and contents</h2>

<p>The command <code>usls-new-note</code> is the main point of entry to this tool.
Calling it will first open a minibuffer prompt asking for the file’s
title.  That gets inserted in the resulting buffer as-is, while a
hyphenated variant is used to construct the filename.  Once that prompt
closes, a second one appears asking for a category.  Here the user is
presented with a list of completion candidates.  It is possible to pick
an item from those on offer or type in a new one (for Icomplete I bind
<code>exit-minibuffer</code> to <code>C-j</code> as a means to forcefully send input, just as
for a non-matching item or a substring).</p>

<p>The resulting buffer is as follows (<code>%?</code> indicates the point):</p>

<pre><code>title: Plentiful and predictable liquidity
date: 2020-10-07
category: Economics
orig_name: ~/Documents/notes/20201007_124941--economics--plentiful-and-predictable-liquidity.txt
orig_id: 20201007_124941
------------------------

%?
</code></pre>

<p>The date, the original filename and ID are generated automatically.
Those header fields are mostly intended for grep operations and to offer
a sense of context without having to resort to demanding alternatives
for meta-data management (powerful though they may be).</p>

<p>Now here comes the feature I use the most: invoking <code>usls-new-note</code>
while the region is active will append its text to the resulting buffer.</p>

<pre><code>title: Plentiful and predictable liquidity
date: 2020-10-07
category: Economics
orig_name: ~/Documents/notes/20201007_124941--economics--plentiful-and-predictable-liquidity.txt
orig_id: 20201007_124941
------------------------

%?

* * *

REGION GOES HERE
</code></pre>

<p>This alone makes it easy to benefit from some of that <code>org-capture</code>
goodness while remaining faithful to the overarching design principle of
simplicity.  I use this a lot when going through <code>elfeed</code> news, <code>gnus</code>
mails/groups, and even websites accessed via <code>eww</code>.  There is no setup
for any of them.  All we do is copy the region.</p>

<p>Concerning the actual contents of the note, I tend to write long and
carefully considered entries, though the system does not impose any
particular paradigm.  One could easily maintain bullet points.  Seeing
though as this is plain text, there is not much you can do with graphics
or all those extras that Org provides (unless you reinvent Org, but I
digress).  I actually consider such a constraint an upside: it focuses
the mind on the task of distilling an idea or set thereof.</p>

<h2>Categories and the absence of tags</h2>

<p>Tags never worked for me.  This has been true ever since I created my
first blog circa 2011.  You add a bundle of words to each entry,
expecting that over the long term this method will give rise to emergent
themes.  Wordpress even provides a “tag cloud” widget (last time I
checked) so that you can see which word has the most entries.  Perhaps
this yields returns for large sets of files and is appropriate for data
mining on an industrial scale.  On my end, however, it always felt like
tags were an assortment of terms that offered little insight into the
linkages between my writings.</p>

<p>Think about a set of tags for this blog post: “emacs”, “notes”,
“library”, “package”.  When studied <em>as a group</em> they do have a
descriptive value: an emergent quality.  We can infer what this is all
about.  Yet when each of those is interpreted in its own right it is
more likely to confuse rather than enlighten us.  Imagine having ten
entries under “library” and another ten under “books”.  You then realise
that you must invent more specific tags such as “university-library” or
“emacs-library”, until you reach a point where you have too many tags
for too few entries.  Which eventually forces you to expend energy on
administrivia rather than the essence of your text: which tags to
select, whether three or five of them are enough, and so on.</p>

<p>As such, I have settled on a simple rule of assigning a single word to
each entry, which I call a “category”.  It describes in very broad terms
what the note is about.  To help you choose among competing options,
think which one would have the highest descriptive value when read on
its own.  So the current article would be associated with “emacs”
instead of “code”, “library”, “package”…</p>

<p>Categories must be generic though remain sufficiently informative.  It
would, for instance, be impractical to archive an economics’ piece under
“science”, just as it would be tricky to write sub-categories like
“monetary”, “finance”, “fiscal”, etc. which would inevitably introduce
the same problems as with tags.  There is no magic solution here.  Just
pick a word that makes sense to you and is flexible enough.</p>

<p>On the technical side of things, <code>usls-new-note</code> presents its completion
candidates for categories using two sources that get combined in to a
single list:</p>

<ol>
  <li>A pre-determined list (<code>usls-known-categories</code> as of this writing);</li>
  <li>Dynamically inferred entries based on filenames in <code>usls-directory</code>.</li>
</ol>

<h2>Linking entries and finding connections</h2>

<p>Most of my notes are standalone pieces.  I elucidate my thoughts as best
I can and try not to rely on implicit information or “further reading”
material for statements I make (with the understanding that I do have
all of it in my head).  Still, there are cases where links to other
items are mandatory.  My answer is quite uninspiring on the surface
level: add a unique identity (timestamp) that points to a file name,
plus some caret signs.</p>

<pre><code>Some text I am writing.^20201007_124941

^^ 20201007_124941--economics--plentiful-and-predictable-liquidity.txt
</code></pre>

<p>Those are conveniently inserted with <code>usls-id-insert</code>, which uses
completion to select among a list of files that includes every item in
the <code>usls-directory</code>, except the current entry.</p>

<p>Strictly speaking, this is not a link.  It is a reference to a file name
whose location is assumed as relative to the directory that includes
those files.  Emacs can handle such cases gracefully.  Place the point
over either the ID (single caret) or the full name (double caret) and
type <code>C-x C-f M-n</code>.  There should only ever be a single match.  To make
this process a bit faster, though still faithful to what Emacs already
does, <code>usls-follow-link</code> presents completion candidates of all such
references (the “follow link” misnomer notwithstanding).</p>

<p>There is no backward linking feature to speak of.  While appealing and
probably beneficial in some fields of endeavour, it requires lots of
extras to work reliably; extras that I would rather avoid else risk
jeopardising my attempt at a minimalist setup.</p>

<p>If you need to find all files that reference a given ID/name, call some
grep command (<code>rg.el</code>, <code>counsel-rg</code> and the rest of the bunch, or
<code>occur</code>, <code>multi-occur</code> for buffers).  It works just fine.  Plus, with
the <code>wgrep</code> package you can edit the results of grep in a dedicated
buffer, in case you ever wish to refactor things—combine that with the
standard <code>wdired</code> for maximum effect and don’t forget <code>query-replace</code>,
keybard macros or multiple cursors, etc.</p>

<h2>This is not a “second brain”</h2>

<p>You can already discern the elements of my approach to the task of
composing plain text notes: leverage standard Emacs functions, avoid
duplication of efforts, minimise dependencies or complexity, and focus
on the text you intend to write, all while relying on a straightforward
file naming scheme and some ancillary syntactic notation.  Any extras
can come from existing packages, per the user’s needs.</p>

<p>The name of this library—Unassuming Sidenotes of Little Significance
or <code>usls</code>—is a mere joke about it being “useless” when compared with
comprehensive solutions that promise to grant you a second brain.</p>

<p>While my code is just an exercise in Emacs Lisp that impliments a
simplistic private system for recording thoughts, I do believe that the
key to productivity does not rest with any of the tools on offer, but
with the clarity of concept one has developed prior to making use of
them.</p>

<p>What is the utility of a second brain if you have not yet realised the
potential of the first one?</p>

<p>In conclusion, what I have right now is a working prototype.  I will
continue to iterate on it whenever I discover some area that could be
improved further, without deviating from the underlying design values
documented herein.  The library is currently part of my dotemacs and is
available under this heading:
<a href="https://protesilaos.com/dotemacs/#h:787df548-0d95-4512-a61d-27852198f561">https://protesilaos.com/dotemacs/#h:787df548-0d95-4512-a61d-27852198f561</a>.
Perhaps it will inspire you to implement a workflow that matches your
expectations and makes you feel in control of what is happening.</p>

<p>Also note that <code>usls</code> is not meant as a substitute for Org, such as to
track to-do lists, produce an agenda, etc.  This is about private
records of longer form notes, such as commentary on a paper I read.  I
still use Org to organise life’s details and also to produce documents
such as my literate Emacs configuration (my dotemacs) or the Info manual
of my Modus themes.</p>

<h2>Annex with comment made by Karl Voit</h2>

<p>Karl Voit is an expert on Personal Information Management (PIM) and
contacted me to share valuable insights.  Message reproduced with
permission in the text block below.</p>

<p>The short version of my reply is that I am open to reviewing things and
learning from others.  Some decisions, such as the format of the date or
the lack of spaces are purely stylistic or matters of convenience: I am
fine with other techniques.  What matters is the general principle of
keeping things simple and accessible.</p>

<p>In concrete terms, I plan to use <code>completing-read-multiple</code> so that one
could insert more than one category at the prompt (notwithstanding other
ideas I may take from <a href="https://karl-voit.at/">Karl’s website</a>, once I
eventually read through the wealth of knowledge found there).</p>

<pre><code>From: Karl Voit
Subject: USLS
To: public@protesilaos.com
Date: Thu, 8 Oct 2020 18:11:51 +0200

Hi,

Thanks for writing down about your cool system.

I do have a few remarks on your approach. I don't assume, you will
change your approach. However, I'd like to mention a few things
related to your file name convention and categories.


DATE--CATEGORY--TITLE.txt
with:
20201006_113858--politics--eu-deep-concerns-about-varosha.txt

I'd prefer a more ISO 8601 approach for general compatibility.

My own concept with focus on shell and CLI tools is summarized on:
https://karl-voit.at/managing-digital-photographs/

It consists of conventions + a set of self-written tools.

In my case, the file name convention looks like:

/this/is/a/folder/2014-04-20T17.09 Picknick in Graz -- food graz.jpg
 [ move2archive  ] [  date2name   ] [appendfilename] [ filetags ]

ISO 8601 can not be applied to file names directly because ":" is
not a valid character on Microsoft file systems. Therefore, I
settled with ".".

You do seem to avoid spaces in file names. IMHO, while this was good
practice up to maybe ten or fifteen years ago, I don't see any
reason to continue. I myself switched to spaces and (most recently)
also to special characters in file names as well without an issue.
YMMV. I got sick of looking for "*Vorhaenge*" as well as for
"*Vorhaenge*" in order to locate my own files (german Umlauts as
7-bit-pendants) and file names from others using the proper Umlaut.

Support from all standard tools in my zsh is perfect for special
characters such as Umlauts as well. No reason left to limit myself.


Categories vs. tags:

I do have some background there and this is maybe the main reason
for my comments.

The issues you're describing are very common aspects when tags are
used. IMHO a promising approach is to curate a finite and limited
set of tags, called "controlled vocabulary" (CV). Compare to
https://github.com/novoid/filetags which offers methods to deal with
CVs - even multiple of them - in an elegant way, I think.

This way, you need to limit yourself to high-level concepts instead
of describing the content of the information.

This should avoid the excessive use of new tags for all kinds of
files. 

Furthermore, multi-classification is a good thing to have. 

You're describing one possible approach to curcimvent
multi-classification: choosing the currently most important
category.

This is a valid approach but it comes with a well-studied
disadvantage: your mental model of the world is constantly changing.
The way you're thinking while creating the file name is different
from the world and context when retrieving the information.

From this background, it would be wiser not to have any category at
all and use the content to locate information (3rd order of orders
according to David Weinberger): full-text search.


I experienced with those ideas myself for quite some years until I
defined my method, conventions and wrote my tools.

Again: since you've invested so much already, there will be a very
small chance that you will change anything here. However, I had to
think about similar topics and came out with a different approach.
Maybe there is something you can take away from my result for your
system as well.


PS: If you - for some reason - want to publish my text. I'm fine
with it as long as you omit my email address.
</code></pre>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Emacs: Org heading faces now adapt to their context</title>
      <description>Upstream org-mode now contains a patch that allows faces for keywords, priority cookies, etc. to inherit from the underlying heading.</description>
      <pubDate>Thu, 24 Sep 2020 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2020-09-24-org-headings-adapt/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2020-09-24-org-headings-adapt/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>As of commit <code>979e82fc3</code>, upstream Org mode now contains a patch that
allows faces that are combined with headings, such as to-do keywords and
priority cookies, to inherit from the underlying heading’s properties.
The code will become widely available in Org version
9.5.<sup id="fnref:NoteOrgVersion" role="doc-noteref"><a href="#fn:NoteOrgVersion" class="footnote" rel="footnote">1</a></sup></p>

<p>This practically means that if you (or your theme) use a <code>:background</code>,
<code>:overline</code>, <code>:height</code>, or <code>:weight</code> for Org’s heading levels, those
attributes will also be passed on to elements that do not have them.
Overall, it makes for a visually consistent experience.</p>

<p>The following screenshots on <code>emacs -Q</code> show the before and after
states, while also highlighting the inconsistency of some faces actually
adapting to their context even prior to the patch.</p>

<p><img alt="Org headings before" src="https://protesilaos.com/assets/images/attachments/org-adaptive-headings-before.png" /></p>

<p><img alt="Org headings after" src="https://protesilaos.com/assets/images/attachments/org-adaptive-headings-after.png" /></p>

<h2>A collective effort</h2>

<p>The author of the patch is Ihor Radchenko, to whom I am most thankful.
Special thanks to Org’s maintainer, Bastien Guerry who made this a goal
for Org 9.5.</p>

<p>The fix comes as a response to a thread that I <a href="https://lists.gnu.org/archive/html/emacs-orgmode/2020-04/msg00406.html">initiated in late April
2020</a>,
in which I initially documented the inconsistencies and then, with
advice from Bastien, shared <a href="https://lists.gnu.org/archive/html/emacs-orgmode/2020-09/msg00240.html">reproducible recipes for testing
them</a>.</p>

<p>Ihor’s patch ties together feedback from various sources, which I helped
put together.  In particular, I conveyed information and insights
gathered from <a href="https://gitlab.com/protesilaos/modus-themes/-/issues/37">issue 37 on my Modus themes’ Gitlab
repo</a>.  Anders
Johansson’s contribution was instrumental in identifying the source of
the problem in Org’s code base, namely, how font-lock was configured to
work for some faces.</p>

<p>I had experienced the problem while developing the Modus themes, which
have comprehensive customisation options for headings (see <a href="https://protesilaos.com/modus-themes">their
manual</a>).</p>

<h2>Being pro-active and working with upstream</h2>

<p>On the mailing list I was informed that a partial fix for this issue
already existed in Doom Emacs, specifically the themes packaged for it.
Bastien informed me that it was never communicated to them, which I
consider a missed opportunity.</p>

<p>As such, it is pertinent to remind ourselves that Emacs is a community
that thrives on feedback loops of communication.  These presuppose a
pro-active disposition to report findings to the relevant sources as
soon as they arise.  When we share know-how, we help grow our stock of
knowledge and thus refine the tools derived from it.  When we contribute
a bug fix upstream, we ensure that everyone is better off as a result.
Whereas when we maintain uncoordinated patches we set ourselves up for
longer term trouble, in the form of non-reproducible maintenance burdens
and unnecessary heterogeneity.</p>

<p>Please be reminded that people contribute to Emacs in their free time.
While some notable exceptions do raise an income from their
contributions (which is consistent with free software values), the fact
is that the community at-large operates on a voluntary basis.</p>

<p>You must be prepared to make an effort if you wish to see things move
forward.  Learn who the maintainers are and what is their preferred
medium of communication.  The best way to help is to elucidate your
ideas and share them accordingly.  For bug reports, this often means
that you need to write down the steps necessary to reproduce your issue
in an <code>emacs -Q</code> session.  Or you may have to include a visual
representation of your case while using the offending package.  Adapt to
the specifics of the case, while remaining faithful to the spirit of
pro-action and collaboration.</p>

<p>When in doubt, do not hesitate to ask.  Be humble about it, remain
prepared to do some work, and do not expect anyone to spoon-feed you
because of some misplaced sense of entitlement (i.e. don’t go on some
forum and complain about how this or that is “garbage”—petulance is
not helpful).  Everyone starts off as a beginner.  We are all in this
together.</p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:NoteOrgVersion" role="doc-endnote">
      <p>Emacs 28, the development branch which currently is
just part of <code>master</code>, ships Org 9.3, so you must install Org from
source if you cannot wait for an update.  Same principle for the
latest stable version of Emacs: 27.1. <a href="#fnref:NoteOrgVersion" class="reversefootnote" role="doc-backlink">[^]</a></p>
    </li>
  </ol>
</div>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Modus themes: report on the review of the main blue colours</title>
      <description>Detailed explanation of the minor tweaks to the three main blue foreground values.  The 'Modus themes' is a pair of themes for Emacs.</description>
      <pubDate>Mon, 14 Sep 2020 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2020-09-14-modus-themes-review-blues/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2020-09-14-modus-themes-review-blues/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>The “Modus themes” is a pair of highly accessible themes for Emacs that
conform with the WCAG AAA standard for colour contrast between
combinations of designated background and foreground values (a minimum
contrast ratio of 7:1).</p>

<p>Modus Operandi is a light theme.  Modus Vivendi is dark.  The themes are
part of Emacs’ <code>master</code> branch, each of them currently tagged with
version <code>0.12.0</code>, while they are also distributed through various
package archives.  Consult their Info manual for the specifics (the
manual is not yet in Emacs—coming in version <code>0.13.0</code>):
<a href="https://protesilaos.com/modus-themes">https://protesilaos.com/modus-themes</a>.</p>

<p>The present report documents changes that will be made available in
version <code>0.13.0</code> of the themes, expected at the end of September 2020.</p>

<p>The following is a valid <code>org-mode</code> text that was used to prepare this
report.  The gist is that even seemingly trivial changes require a lot
of work.  If, by the way, anyone knows of a more elegant syntax to write
those tables, please do <a href="https://protesilaos.com/contact/">contact me</a>:
I have little experience with spread sheets, formulas, etc.</p>

<pre><code class="language-org">#+TITLE: Modus themes: report on the minor review of the main blue colours
#+AUTHOR: Protesilaos Stavrou

* Scope of the review

To refine the three main blue foreground values so as to improve the
distinction between themselves which, in turn, means that they work
better in various contexts.

* Conformance with the WCAG AAA standard

This test compares the new and the old colour values relative to the
three main backgrounds they are intended to be combined with: =bg-main=, 
=bg-dim=, =bg-alt= in this order from columns 3 to 5.  The minimum
contrast ratio must be 7.00:1.

#+NAME: Modus Operandi main blue colours against main backgrounds (new vs old)
| Colour name          |         | #ffffff | #f8f8f8 | #f0f0f0 |
|----------------------+---------+---------+---------+---------|
| blue                 | #0031a9 |   10.44 |    9.83 |    9.16 |
| blue (old)           | #0030a6 |   10.64 |   10.02 |    9.34 |
| blue-alt             | #2544bb |    8.01 |    7.54 |    7.03 |
| blue-alt (old)       | #223fbf |    8.30 |    7.81 |    7.28 |
| blue-alt-other       | #0000c0 |   11.92 |   11.23 |   10.46 |
| blue-alt-other (old) | #0000bb |   12.23 |   11.51 |   10.73 |
#+TBLFM: $3='(clr $2 @1$3);%0.2f :: $4='(clr $2 @1$4);%0.2f :: $5='(clr $2 @1$5);%0.2f

#+NAME: Modus Vivendi main blue colours against main backgrounds (new vs old)
| Colour name        |         | #000000 | #110b11 | #181a20 |
|--------------------+---------+---------+---------+---------|
| blue               | #2fafff |    8.70 |    8.05 |    7.20 |
| blue (o)           | #29aeff |    8.59 |    7.96 |    7.12 |
| blue-alt           | #79a8ff |    8.86 |    8.20 |    7.34 |
| blue-alt (o)       | #72a4ff |    8.47 |    7.84 |    7.01 |
| blue-alt-other     | #00bcff |    9.64 |    8.93 |    7.98 |
| blue-alt-other (o) | #00bdfa |    9.66 |    8.95 |    8.00 |
#+TBLFM: $3='(clr $2 @1$3);%0.2f :: $4='(clr $2 @1$4);%0.2f :: $5='(clr $2 @1$5);%0.2f

* Distance relative to selected colours

These tables show the distance in colour space between the blue values
and selected colours which are deemed relevant based on either their
proximity to the blue side of the spectrum or their use in various
contexts (e.g. syntax highlighting).  We do not target a specific number
here.  Just to show the effect of the review.  A higher value means that
there is a greater distance between two colours.

+ Columns 3 and 4 are the new and old =blue= respectively.
+ Columns 5 and 6 are the same for =blue-alt=.
+ Columns 7 and 8 are for =blue-alt-other=.

For Modus Operandi the table shows that the new =blue= and =blue-alt-other=
are slightly more distinct than relevant colours: we witness a modest
increase throughout.  Whereas =blue-alt= has been corrected to be slightly
less distinct than its old value (in relative terms, as the colour
distance is still considerable).  The rationale for this becomes
apparent in the next section, where we compare the blue colours between
themselves.

#+NAME: Modus Operandi colour distance of blue colours (new vs old by column pair)
| Name              |         | #0031a9 | #0030a6 | #2544bb | #223fbf | #0000c0 | #0000bb |
|-------------------+---------+---------+---------+---------+---------+---------+---------|
| fg-main           | #000000 |   96032 |   92602 |  124671 |  126256 |  111457 |  105727 |
| fg-dim            | #282828 |   52676 |   50355 |   65226 |   67814 |   77829 |   73427 |
| fg-alt            | #505050 |   40482 |   39232 |   36703 |   40383 |   75655 |   72518 |
| cyan              | #00538b |    7381 |    7142 |   10564 |   12014 |   36264 |   34737 |
| cyan-alt          | #30517f |   14156 |   13707 |   11225 |   13453 |   43685 |   41855 |
| cyan-alt-other    | #005a5f |   23333 |   22352 |   29782 |   32591 |   61101 |   58244 |
| green             | #005e00 |   94516 |   91844 |  108755 |  114129 |  147077 |  141348 |
| green-alt         | #315b00 |   95771 |   93172 |  102232 |  107966 |  146343 |  140797 |
| green-alt-other   | #145c33 |   49824 |   48089 |   56775 |   60974 |   94266 |   90134 |
| magenta           | #721045 |   61495 |   59579 |   62564 |   64325 |   72489 |   69117 |
| magenta-alt       | #8f0075 |   64087 |   62865 |   58357 |   58745 |   62414 |   60426 |
| magenta-alt-other | #5317ac |   17766 |   17638 |   13557 |   12852 |   18292 |   17791 |
#+TBLFM: $3='(color-distance $2 @1$3) :: $4='(color-distance $2 @1$4) :: $5='(color-distance $2 @1$5) :: $6='(color-distance $2 @1$6) :: $7='(color-distance $2 @1$7) :: $8='(color-distance $2 @1$8)

For Modus Vivendi we have slightly increased the luminance of =blue= and
=blue-alt=, while we have decreased it a tiny bit for =blue-alt-other=.
These minor adjustments mean that the first two have been toned down in
terms of their colour distance to relevant values, while the latter has
been marginally amplified.  The differences are negligible in practice.
Again, the intent is to make the blue colours more distinct between
themselves, as illustrated in the next section.

Recall that:

+ Columns 3 and 4 are the new and old =blue= respectively.
+ Columns 5 and 6 are the same for =blue-alt=.
+ Columns 7 and 8 are for =blue-alt-other=.

#+NAME: Modus Vivendi colour distance of blue colours (new vs old by column pair)
| Name              |         | #2fafff | #29aeff | #79a8ff | #72a4ff | #00bcff | #00bdfa |
|-------------------+---------+---------+---------+---------+---------+---------+---------|
| fg-main           | #ffffff |  138824 |  145545 |   80047 |   87953 |  181930 |  181457 |
| fg-dim            | #e0e6f0 |   92680 |   98243 |   44639 |   50561 |  131039 |  130382 |
| fg-alt            | #a8a8a8 |   55597 |   59075 |   24276 |   26233 |   88244 |   86135 |
| cyan              | #00d3d0 |   16356 |   15543 |   46616 |   44209 |    8811 |    7284 |
| cyan-alt          | #4ae8fc |   14766 |   16029 |   21839 |   22484 |   19669 |   19303 |
| cyan-alt-other    | #6ae4b9 |   32726 |   34890 |   27684 |   29353 |   45240 |   43022 |
| green             | #44bc44 |   99451 |  100612 |  100991 |  100499 |  110970 |  105644 |
| green-alt         | #80d200 |  194546 |  197894 |  171840 |  174524 |  219273 |  212104 |
| green-alt-other   | #00cd68 |   75106 |   74489 |  102017 |   99701 |   70103 |   65480 |
| magenta           | #feacd0 |  117256 |  123303 |   53869 |   59090 |  169026 |  168037 |
| magenta-alt       | #f78fe7 |  109400 |  114975 |   47387 |   51382 |  162374 |  162196 |
| magenta-alt-other | #b6a0ff |   45889 |   49624 |    9986 |   12089 |   81840 |   82136 |
#+TBLFM: $3='(color-distance $2 @1$3) :: $4='(color-distance $2 @1$4) :: $5='(color-distance $2 @1$5) :: $6='(color-distance $2 @1$6) :: $7='(color-distance $2 @1$7) :: $8='(color-distance $2 @1$8)

* Colour distance of the blues between themselves

Here we compare the blue colours between them.  The first table shows
the new values, while the second holds the old ones.  The order for
columns and rows is =blue=, =blue-alt=, =blue-alt-other=.

For Modus Operandi, this proves that by correcting =blue-alt= and slightly
tweaking =blue= and =blue-alt-other= we are able to make these colours more
distinct, which is good when they are combined in various contexts (blue
is one of the dominant foreground colours in the themes).

#+NAME: Modus Operandi new blues between them (blue, blue-alt, blue-alt-other)
|---------+---------+---------+---------|
|         | #0031a9 | #2544bb | #0000c0 |
|---------+---------+---------+---------|
| #0031a9 |       0 |    5270 |   11278 |
| #2544bb |    5270 |       0 |   21574 |
| #0000c0 |   11278 |   21574 |       0 |
#+TBLFM: $2='(color-distance $1 @1$2) :: $3='(color-distance $1 @1$3) :: $4='(color-distance $1 @1$4)

#+NAME: Modus Operandi old blues between them (blue, blue-alt, blue-alt-other)
|---------+---------+---------+---------|
|         | #0030a6 | #223fbf | #0000bb |
|---------+---------+---------+---------|
| #0030a6 |       0 |    5162 |   10621 |
| #223fbf |    5162 |       0 |   18455 |
| #0000bb |   10621 |   18455 |       0 |
#+TBLFM: $2='(color-distance $1 @1$2) :: $3='(color-distance $1 @1$3) :: $4='(color-distance $1 @1$4)

Same principle for Modus Vivendi, where we increased the luminance of
=blue= and =blue-alt= while reducing it for =blue-alt-other=.

#+NAME: Modus Vivendi new blues between them (blue, blue-alt, blue-alt-other)
|---------+---------+---------+---------|
|         | #2fafff | #79a8ff | #00bcff |
|---------+---------+---------+---------|
| #2fafff |       0 |   13053 |    5339 |
| #79a8ff |   13053 |       0 |   34624 |
| #00bcff |    5339 |   34624 |       0 |
#+TBLFM: $2='(color-distance $1 @1$2) :: $3='(color-distance $1 @1$3) :: $4='(color-distance $1 @1$4)

#+NAME: Modus Vivendi old blues between them (blue, blue-alt, blue-alt-other)
|---------+---------+---------+---------|
|         | #29aeff | #72a4ff | #00bdfa |
|---------+---------+---------+---------|
| #29aeff |       0 |   12776 |    4505 |
| #72a4ff |   12776 |       0 |   31712 |
| #00bdfa |    4505 |   31712 |       0 |
#+TBLFM: $2='(color-distance $1 @1$2) :: $3='(color-distance $1 @1$3) :: $4='(color-distance $1 @1$4)

* ANNEX: Tools for measuring relative luminance and previewing colours

This is the implementation of the WCAG formula.

#+begin_src emacs-lisp
;; Code is courtesy of Omar Antolín Camarena:
;; https://github.com/oantolin/emacs-config
(defun wcag (hex)
  (apply #'+
         (cl-mapcar
          (lambda (k x)
            (* k (if (&lt;= x 0.03928)
                     (/ x 12.92)
                   (expt (/ (+ x 0.055) 1.055) 2.4))))
          '(0.2126 0.7152 0.0722)
          (color-name-to-rgb hex))))

(defun clr (c1 c2)
  (let ((ct (/ (+ (wcag c1) 0.05)
               (+ (wcag c2) 0.05))))
    (max ct (/ ct))))
#+end_src

Use =rainbow-mode= to preview the colour values presented herein.

#+begin_src emacs-lisp
(use-package rainbow-mode
  :ensure
  :commands rainbow-mode
  :config
  (setq rainbow-ansi-colors nil)
  (setq rainbow-x-colors nil))
#+end_src

The =color-distance= function is built into Emacs.
</code></pre>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Manage podcasts in Emacs with Elfeed and Bongo</title>
      <description>Video demonstration of how I integrate Elfeed with Bongo to handle multimedia feeds (podcasts and videos).</description>
      <pubDate>Fri, 11 Sep 2020 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2020-09-11-emacs-elfeed-bongo/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2020-09-11-emacs-elfeed-bongo/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=EWApxQd1sYI">https://www.youtube.com/watch?v=EWApxQd1sYI</a></p>
         
         <p>In this video I demonstrate how I combine Elfeed and Bongo into a
workflow for storing and playing content from my multimedia feeds
(podcasts and videos).  The implementation is fairly straightforward and
the overall result is quite effective, based on my expectations.</p>

<p>On a more general note, this shows yet again how integration between
various otherwise standalone tools is one of Emacs’ greatest strengths.</p>

<p>To understand how I use Elfeed and Bongo separately, you can watch my
recent videos:</p>

<ul>
  <li>Bongo and my extras: <a href="https://protesilaos.com/codelog/2020-08-06-emacs-bongo-extras/">https://protesilaos.com/codelog/2020-08-06-emacs-bongo-extras/</a></li>
  <li>Elfeed and my extras: <a href="https://protesilaos.com/codelog/2020-06-09-emacs-elfeed-demo/">https://protesilaos.com/codelog/2020-06-09-emacs-elfeed-demo/</a></li>
</ul>

<p>Also make sure to visit my Emacs configuration file, from where you can
get the code: <a href="https://protesilaos.com/dotemacs">https://protesilaos.com/dotemacs</a></p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Emacs: note on mixed font heights</title>
      <description>How to set font sizes in a way that does not break ‘text-scale-adjust’.</description>
      <pubDate>Sat, 05 Sep 2020 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2020-09-05-emacs-note-mixed-font-heights/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2020-09-05-emacs-note-mixed-font-heights/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>In a recent entry on <a href="https://protesilaos.com/codelog/2020-07-17-emacs-mixed-fonts-org/">configuring mixed
fonts</a>,
I outlined how to specify your typefaces of choice by configuring the
<code>default</code>, <code>variable-pitch</code>, and <code>fixed-pitch</code> faces.  This would allow
you to benefit from variegated typography, such as having paragraph text
rendered in a proportionately spaced font, while inline code is
displayed as monospaced.</p>

<p>The overall approach of controlling the three basic faces is fine, but
the code I shared had the unintended consequence of breaking the
built-in <code>text-scale-adjust</code> command (by default bound to <code>C-x C-+</code>,
<code>C-x C--</code>, <code>C-x C-0</code>).  Here I issue a corrective to the technique that
was used before.</p>

<h2>The code that breaks ‘text-scale-adjust’</h2>

<p>This is the gist of what I was using for several months:</p>

<pre><code class="language-elisp">(set-face-attribute 'default nil :font "Hack-16")
(set-face-attribute 'fixed-pitch nil :font "Hack-16")
(set-face-attribute 'variable-pitch nil :font "FiraGO-16")
</code></pre>

<p>A variant of the above can be expressed as follows:</p>

<pre><code class="language-elisp">(set-face-attribute 'default nil :family "Hack" :height 160)
(set-face-attribute 'fixed-pitch nil :family "Hack" :height 160)
(set-face-attribute 'variable-pitch nil :family "FiraGO" :height 160)
</code></pre>

<p>If you set fonts this way and try to use <code>text-scale-adjust</code> in a buffer
with mixed fonts, you will notice that only the main text, affected by
the <code>default</code> face, gets scaled.  The rest retain their height—not good.</p>

<p>This is because of a hard-wired assumption in the <code>text-scale-adjust</code>
command to only target the <code>default</code> face: <code>variable-pitch</code> and
<code>fixed-pitch</code> remain in tact, thus breaking our expectations.</p>

<p>The problem consists in the fact that we are specifying an absolute size
for each font family.  Whereas we should be benefiting from relative
sizes that all have a single point of reference, which is easy to do.</p>

<h2>The recommended way to set font heights with faces</h2>

<p>Let us re-purpose the sample code from the previous section, in order to
get the behaviour we expect out of <code>text-scale-adjust</code>.</p>

<pre><code class="language-elisp">(set-face-attribute 'default nil :font "Hack-16")
(set-face-attribute 'fixed-pitch nil :family "Hack" :height 1.0)
(set-face-attribute 'variable-pitch nil :family "FiraGO" :height 1.0)
</code></pre>

<p>A alternative to the above is this:</p>

<pre><code class="language-elisp">(set-face-attribute 'default nil :family "Hack" :height 160)
(set-face-attribute 'fixed-pitch nil :family "Hack")
(set-face-attribute 'variable-pitch nil :family "FiraGO")
</code></pre>

<p>Notice that we set an absolute point size only for the <code>default</code> face.
While we instruct Emacs to interpret the height of <code>fixed-pitch</code> and
<code>variable-pitch</code> as relative to that constant.  Therein lies the
difference between integer and floating point values for the <code>:height</code>
attribute (remember to consult <code>C-h f set-face-attribute</code>).</p>

<p>Strictly speaking, the <code>:height 1.0</code> is not necessary, unless you are
overriding a prior state.  It is what applies when the specification is
omitted.  Rendering it explicit here helps us spot the subtleties in
notation and be clear about what is at play.</p>

<h2>Details are tricky</h2>

<p>I was using the old technique for several months, adjusting fonts
through a bespoke function of mine that altered their absolute sizes.
What inspired me to investigate and eventually address this issue is a
particular statement in the doc string of <code>set-face-attribute</code>:</p>

<blockquote>
  <p>Note that for the ‘default’ face, you must specify an absolute height
(since there is nothing for it to be relative to).</p>
</blockquote>

<p>Which implied that if the <code>default</code> was a constant, all other faces
could simply have a relative height.  This is because of the peculiar
nature of that face to serve as the foundation upon which all others are
established.  As such, a <code>:height</code> with a floating point is a multiple
of the <code>default</code> font size.  Simple and effective!</p>

<p>I am now happily using <code>text-scale-adjust</code> in tandem with the tools I
mentioned in my recent video about <a href="https://protesilaos.com/codelog/2020-07-16-emacs-focused-editing/">“Focused editing” for
Emacs</a>.</p>

<p>This information is also documented in the <a href="https://protesilaos.com/modus-themes/">official manual of the Modus
themes</a> because they are designed
to cope well with mixed font scenaria, such as when the user decides to
enable the built-in <code>variable-pitch-mode</code>.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Notes for aspiring Emacs theme developers</title>
      <description>Comprehensive guide to Emacs themes. It helps you start developing your own theme.</description>
      <pubDate>Fri, 28 Aug 2020 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2020-08-28-notes-emacs-theme-devs/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2020-08-28-notes-emacs-theme-devs/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>In Emacs a “theme” is a set of configurations that can be enabled or
disabled as a block.  Each of those controls a construct of the
rendering engine known as a “face”.  Faces store the properties that are
associated with each element on display.  These properties encompass
background and/or foreground colours as well as typographic attributes,
such as the font weight or slant.</p>

<h2>Finding faces</h2>

<p>Themes are programs written in Emacs Lisp (Elisp), whose intended role
is to control faces.  We can learn about all the faces that are loaded
in the current session with <code>M-x list-faces-display</code>.  The command will
produce a buffer with the <em>symbol</em> (i.e. unique name) of the face and a
preview of how it looks.</p>

<p>You can always consult the help page of a given symbol with <code>C-h o</code>
(<code>M-x describe-symbol</code>).  Place the point over a face’s symbol, type
<code>C-h o</code> to have the thing at point as the default option.  Select that
(such as with <code>M-n</code>) to get a description of what it is supposed to do.</p>

<p>If we do this over the <code>cursor</code> face, we get the following:</p>

<blockquote>
  <p>Basic face for the cursor color under X.  Currently, only the
‘:background’ attribute is meaningful; all other attributes are
ignored.  The cursor foreground color is taken from the background
color of the underlying text.</p>

  <p>Note: Other faces cannot inherit from the cursor face.</p>
</blockquote>

<p>As with all <code>*Help*</code> buffers, the ones for individual faces contain a
link to the library that defines them.  We are informed, for instance,
that the <code>cursor</code> is defined in <code>faces.el</code>.  So we can always visit the
source code from there whenever we need to understand more about the
item of our inquiry.</p>

<p>Note that <code>list-faces-display</code> will only cover the libraries that are
currently loaded, but not necessarily the faces that your active theme
defines.  If you have installed some package that you have not used yet,
then any faces it may be defining will not be immediately available in
the <code>*Faces*</code> buffer.  To actually include those in the list, you need
to either use their package or explicitly load the relevant file with
<code>M-x load-library</code>.  You can always regenerate the <code>*Faces*</code> buffer by
typing <code>g</code> while inside of it.</p>

<h2>Configuring an individual face</h2>

<p>Before we proceed to write a fully fledged theme, let us first examine
how to control faces one by one.  The function dedicated to that task is
<code>set-face-attribute</code>.  Read its documentation string with <code>C-h f</code>
followed by its symbol.  <strong>This is important</strong> because it provides
valuable information about the properties that a face may be associated
with.  You will need it when configuring your own theme.</p>

<p><em>Assuming you read the documentation</em> of <code>set-face-attribute</code>, let us
consider this example:</p>

<pre><code class="language-elisp">(set-face-attribute 'cursor nil :background "red")
</code></pre>

<p>We have learnt that the <code>cursor</code> only recognises a <code>:background</code>
property and will ignore any other.  What we do here is instruct it to
use the generic red colour.</p>

<p>To confirm that this works, place the point to the right of the closing
parenthesis and type <code>C-x C-e</code> (which calls <code>eval-last-sexp</code>).  Your
cursor show now be coloured red.  If you were to put this in your
initialisation file, or any other library that gets loaded when you open
Emacs, your cursor would always get the colour you specified (unless
something else overrides it later on, but you get the point).</p>

<p>A good use-case for this is to define your font families for the three
main constructs of <code>default</code>, <code>variable-pitch</code>, and <code>fixed-pitch</code>.</p>

<p>This is the gist of what is included in the manual of the Modus themes
on the topic of <a href="https://protesilaos.com/modus-themes/#h:defcf4fc-8fa8-4c29-b12e-7119582cc929">font configurations for Org (and
others)</a></p>

<pre><code class="language-elisp">;; my custom build of Iosevka
;; https://gitlab.com/protesilaos/iosevka-comfy
(set-face-attribute 'default nil :font "Iosevka Comfy-15")

(set-face-attribute 'variable-pitch nil :family "Source Sans Pro" :height 1.0)

(set-face-attribute 'fixed-pitch nil :family "Iosevka Comfy" :height 1.0)
</code></pre>

<p>Depending on what you want to do, you can use Elisp to further control
things.  Here we can be a bit more succinct by using <code>dolist</code> (remember
that <code>C-h f</code>, <code>C-h v</code>, or just <code>C-h o</code> are among your most valuable
tools in your Emacs journey).</p>

<pre><code class="language-elisp">(dolist (face '(default fixed-pitch))
  (set-face-attribute face nil :family "Iosevka Comfy"))
</code></pre>

<h2>Using colours</h2>

<p>We can find the names of all generic colours with <code>list-colors-display</code>.
Notice how earlier we specified the <code>:background</code> of the <code>cursor</code> face
to a <code>"red"</code> value.  Alternatively, one could use a hexadecimal RGB
code, such as <code>"#ff0000"</code> for pure red.  I prefer the latter because it
is more precise and flexible.</p>

<p>How you specify colours is ultimately up to you.  Picking the right
values is not an easy task.  It is a field of endeavour that stands at
the intersection or art and science, as I explained in my essay about
the <a href="https://protesilaos.com/codelog/2020-03-17-design-modus-themes-emacs/">design of the Modus themes</a>.</p>

<h2>Deconstructing an Emacs face</h2>

<p>While <code>set-face-attribute</code> is perfectly fine for a few items, it becomes
inefficient at scale.  This is why Emacs provides the
<code>custom-theme-set-faces</code> function.  Before we start using that, <em>we must
first understand what the specifications of a face are</em>.</p>

<p>Consider this excerpt from <code>M-x find-library RET faces</code> (here “RET”
means to type the command, then confirm your choice with the
Return/Enter key, and follow it up with the “faces” library).</p>

<pre><code class="language-elisp">(defface tab-bar
  '((((class color) (min-colors 88))
     :inherit variable-pitch
     :background "grey85"
     :foreground "black")
    (((class mono))
     :background "grey")
    (t
     :inverse-video t))
  "Tab bar face."
  :version "27.1"
  :group 'basic-faces)
</code></pre>

<p>We can read all about these specs with <code>C-h o defface</code>.  Again, read the
docs to save yourself from trouble and frustration.  While you start
making a habit of that, let me simplify this <code>defface</code> for you (extra
space for didactic purposes):</p>

<pre><code class="language-elisp">(defface tab-bar
  '(

    (
     ((class color) (min-colors 88))
     :inherit variable-pitch
     :background "grey85"
     :foreground "black")

    (
     ((class mono))
     :background "grey")

    (t
     :inverse-video t)
     
     )
     
  "Tab bar face.")
</code></pre>

<p>Here we have the general structure of an expression that evaluates
multiple conditions.  It looks like <code>cond</code>:</p>

<pre><code class="language-elisp">(cond
 ((FIRST TEST)
  FIRST RESULT)
 ((SECOND TEST)
  SECOND RESULT)
 (t                                     ; if none of the above
  FALLBACK RESULT))
</code></pre>

<p>With these in mind, we can read each test more easily.  Focus on this:</p>

<pre><code class="language-elisp">(
 ((class color) (min-colors 88))
 :inherit variable-pitch
 :background "grey85"
 :foreground "black")
</code></pre>

<p>It checks whether the display terminal can support a minimum of 88
colours.  If you are using Emacs with a graphical toolkit, this is most
likely the case.  If the condition is satisfied, this face will use
<code>grey85</code> for its background and <code>black</code> for its foreground.  Whereas in
more limited display terminals, it uses something simpler:</p>

<pre><code class="language-elisp">(
 ((class mono))
 :background "grey")
</code></pre>

<p>Same principle for the fallback condition, which merely inverts the
colours with the assumption that those are some variant of black and
white for the foreground/background:</p>

<pre><code class="language-elisp">(t
 :inverse-video t)
</code></pre>

<p>While you could define all your faces to adapt to every possible display
terminal out there, I find that what one typically needs is to optimise
for <code>((class color) (min-colors 89))</code>.</p>

<p>With these in mind, we can start writing our first theme.</p>

<h2>Skeleton of a custom theme</h2>

<p>As noted in the previous section, Emacs offers <code>custom-theme-set-faces</code>
for the express purpose of streamlining the process of controlling faces
in bulk.  As always, read the documentation of that function to learn
more about the finer points.</p>

<p>Here we will be working with a minimal, yet perfectly usable base.
Every theme must be placed in a file whose name follows the pattern of
<code>SYMBOL-theme.el</code>.  We declare the symbol of our theme with the
following:</p>

<pre><code class="language-elisp">(deftheme prot-base
  "The basis for a custom theme.")
</code></pre>

<p>The above means that the file name must be <code>prot-base-theme.el</code> (we have
some more code at the end of the file, but we take things one step at a
time).</p>

<p>Now we want to configure a set of faces that are optimised for the
display spec of <code>((class color) (min-colors 89))</code>.  Instead of writing
this expression each time, we will dynamically bind it to a variable,
using <code>let</code>.</p>

<pre><code class="language-elisp">(let ((class '((class color) (min-colors 89)))
      ...other variables)
    ...body)
</code></pre>

<p>Since we are defining local variables, it is a good idea to also write
our colours here, so that we economise on typing, but also to avoid
discrepencies.  Each colour is defined as <code>(name value)</code>.</p>

<pre><code class="language-elisp">(let ((class '((class color) (min-colors 89)))
      (main-bg "#ffffff") (main-fg "#000000")
      (red "#a00000") (green "#005000") (blue "#000077"))
    ...body)
</code></pre>

<p>Everything is in place to start defining face attributes.  The body of
our dynamically bound variables contains <code>custom-theme-set-faces</code>,
followed by the name of the <code>deftheme</code> we declared and then each face’s
symbol, display spec and attributes:</p>

<pre><code class="language-elisp">(deftheme prot-base
  "The basis for a custom theme.")

(let ((class '((class color) (min-colors 89)))
      (main-bg "#ffffff") (main-fg "#000000")
      (red "#a00000") (green "#005000") (blue "#000077"))
  (custom-theme-set-faces
   'prot-base
   `(default ((,class :background ,main-bg :foreground ,main-fg)))
   `(cursor ((,class :background ,red)))
   `(font-lock-builtin-face ((,class :foreground ,blue))))
   `(font-lock-string-face ((,class :foreground ,green))))

(provide-theme 'prot-base)

(provide 'prot-base-theme)
</code></pre>

<p>This is a valid theme.  To actually use it, you must write it to a file,
which in this case is <code>prot-base-theme.el</code>.  This file must be in a
directory read by Emacs.  Say you put it in <code>~/.emacs.d/themes/</code>.  To
inform Emacs about it, evaluate this:</p>

<pre><code class="language-elisp">(add-to-list 'load-path "~/.emacs.d/themes/")
</code></pre>

<p>With the theme written at <code>~/.emacs.d/themes/prot-base-theme.el</code>, you
can now <code>M-x load-theme RET prot-base</code>.  And there you have it!</p>

<p>Note though that you may also need to <code>M-x disable-theme</code> and specify
the one currently in use to make sure you do not get mixed results
(unless you want to overlay one theme on top of another, but I will let
you run such experiments).</p>

<p>Remember to rely on <code>list-faces-display</code> to find all the symbols you
wish to cover.  Furthermore, you can always identify the properties of
the character at point with <code>M-x describe-char</code> (or type it directly
with <code>C-u C-x =</code>).  If it uses a face, you will see it mentioned in the
resulting <code>*Help*</code> buffer.</p>

<p>To understand the syntax for backquotes and commas, type <code>M-:</code> and then
insert <code>(info "(elisp) Backquote")</code>.  This will take you to the relevant
node in the Emacs Lisp Reference Manual.</p>

<h2>More tools for theme developers</h2>

<p>These are excerpts from my dotemacs.  They are meant to further assist
you in the task of developing a custom theme.  Check the doc string of
each variable and adapt things to your liking.</p>

<h3>Rainbow mode for colour previews</h3>

<p>While experience may help estimate with decent accuracy a hexadecimal
RGB colour, it is always better to have a live preview available.  Once
the following package is loaded, you can get it with <code>M-x rainbow-mode</code>.</p>

<pre><code class="language-elisp">(use-package rainbow-mode
  :ensure
  :diminish
  :commands rainbow-mode
  :config
  (setq rainbow-ansi-colors nil)
  (setq rainbow-x-colors nil))
</code></pre>

<h3>Use a linter front-end to improve your code</h3>

<p>You can either rely on the built-in <code>flymake</code> or the third party
<code>flycheck</code>.  Both work great with Elisp files.  You activate them with
<code>flymake-mode</code> or <code>flycheck-mode</code> respectively.</p>

<pre><code class="language-elisp">(use-package flymake
  :commands flymake-mode
  :config
  (setq flymake-fringe-indicator-position 'left-fringe)
  (setq flymake-suppress-zero-counters t)
  (setq flymake-start-on-flymake-mode t)
  (setq flymake-no-changes-timeout nil)
  (setq flymake-start-on-save-buffer t)
  (setq flymake-proc-compilation-prevents-syntax-check t)
  (setq flymake-wrap-around nil))

(use-package flycheck
  :ensure
  :commands flycheck-mode
  :config
  (setq flycheck-check-syntax-automatically
        '(save mode-enabled))
  :hook (flycheck-error-list-mode-hook . visual-line-mode))
</code></pre>

<p>If you go with Flycheck, you may also want a modeline indicator, unless
you use a custom modeline that already defines one:</p>

<pre><code class="language-elisp">(use-package flycheck-indicator
  :ensure
  :after flycheck
  :config
  (setq flycheck-indicator-icon-error (string-to-char "!"))
  (setq flycheck-indicator-icon-info (string-to-char "·"))
  (setq flycheck-indicator-icon-warning (string-to-char "*"))
  (setq flycheck-indicator-status-icons
        '((not-checked "%")
          (no-checker "-")
          (running "&amp;")
          (errored "!")
          (finished "=")
          (interrupted "#")
          (suspicious "?")))
  :hook (flycheck-mode-hook . flycheck-indicator-mode))
</code></pre>

<p>And here is how to ensure that you are following best practices for
packaging Elisp libraries (you only need one of the two, depending on
the front-end you choose):</p>

<pre><code class="language-elisp">(use-package flycheck-package
  :ensure
  :after flycheck
  :config
  (flycheck-package-setup))

(use-package package-lint-flymake
  :ensure
  :after flymake
  :config
  (package-lint-flymake-setup))
</code></pre>

<h2>Remember that Emacs themes are Elisp programs</h2>

<p>It should be clear by now that a theme can rely on advanced programming
techniques to do its work.  Here we used <code>let</code>.  While you can always go
with something simple, you retain the option to define more elaborate
criteria that, say, come into effect once a certain variable is enabled.</p>

<p>My Modus themes, which were <a href="https://protesilaos.com/codelog/2020-08-27-emacs-modus-themes-core/">recently added to upstream
Emacs</a>,
contain lots of Elisp logic, making them highly customisable.  Study
their <a href="https://gitlab.com/protesilaos/modus-themes">source code</a> if you
want.  It can help you learn more about defining and then evaluating
customisation options.</p>

<p>Use the information in this document to write your own theme or to just
gain insight into how the theme of your choice is designed.</p>

<p>Good luck!</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>My Modus themes are now shipped with Emacs</title>
      <description>Video presentation about what it means for my highly accessible themes to be part of the upstream Emacs distribution.</description>
      <pubDate>Thu, 27 Aug 2020 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2020-08-27-emacs-modus-themes-core/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2020-08-27-emacs-modus-themes-core/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=a3GW9kxmpqA">https://www.youtube.com/watch?v=a3GW9kxmpqA</a></p>
         
         <p>I am happy to announce that my highly accessible themes for Emacs,
<code>modus-operandi</code> (light) and <code>modus-vivendi</code> (dark), are now part of the
upstream Emacs distribution.</p>

<p>In this presentation I explain what this means and what my plans are for
the future.  I also use this opportunity to express my gratitude for the
help I have received over the last year or so that I have been
developing the Modus themes.</p>

<p>Below is the text of the presentation.  I explained how to make a video
such as this one in a recent demo that I published.  Make sure you check
my backlog and my dotemacs (or just contact me if you cannot find them).</p>

<h2>Text of the presentation</h2>

<pre><code class="language-org">#+TITLE: The Modus themes are built into Emacs
#+AUTHOR: Protesilaos Stavrou · protesilaos.com
#+DATE: 2020-08-27

* The Modus themes are in the Emacs 'master' branch

As of commit =c1b0515=, my two accessible themes are bundled up together
with the upstream Emacs distribution.

In case you do not know, these are the themes I use in all my videos:
=modus-operandi= (light) and =modus-vivendi= (dark).  They are designed to
conform with the /highest accessibility standard/ for colour contrast
between background and foreground values in any given combination.  The
standard's technical name is "WCAG AAA": it represents a minimum
contrast ratio of 7:1.

The themes are in Emacs' =master= branch.  Only people who track the
latest developments will receive them.  Most users run a stable release
of Emacs, the latest of which is version =27.1=.  Whereas the current
state of development is on version =28.0.50=.

So if you are on a stable release /you still need to install the
packages/: directly from git, or from MELPA, MELPA Stable, GNU ELPA,
Guix, Debian (now in Sid and eventually in next-stable).

** Backstory on how it happened

Earlier this week Stefan Kangas, a core Emacs contributor, opened a bug
report (#43019) asking to include the themes in Emacs.  I was added in
Cc, as well as Eli Zaretskii, Emacs' maintainer.

Eli approved of the request.  They asked for my permission to use the
themes.  I said "yes" but told to wait a few more days to prepare a new
tagged release that was already planned.

Once I notified them of the new release, Stefan Kangas pushed the
changes to =master=.  So here we are :)

** Emacs bundles the latest tagged release of the themes

I have decided at this early stage to share the most recent stable
version of the themes.  We are on version =0.12.0= as of this recording
(have been releasing them on a monthly cadence).

Normally I would have synced the latest commit from my project, but this
is not possible right now because I do not have push privileges to
Emacs' git repository.  Instead, I must contact the mailing list so that
someone else will make the changes for me.

As you can imagine, it would be too difficult to go through such a
process each time I wrote a change to the themes.

If I ever gain direct access to upstream Emacs, then I will happily sync
the built-in themes with the latest state of my =master= branch.

** Next steps

I have no plans to slow down.  There have been almost 1.000 commits in
about a year, since I started the project.  Many of them are tricky and
have required lots of testing.

I consider it my duty to give something back to this community that has
greatly helped me with my day-to-day computing experience (free/libre
software in general and Emacs in particular).

Some highlights:

+ The themes are *highly configurable*.  There are lots of customisation
  options that control the looks of practically everything.

+ A new HTML version of the Modus themes' README is available on my
  website: https://protesilaos.com/modus-themes

+ Preparations have already started for the next tagged release, which
  will become version =0.13.0= (tentative).  It will be synced with Emacs
  once it is published.

+ Earlier today I pushed a commit that introduces a new customisation
  option for controlling the overall looks of diffs (=magit=, =diff-mode=,
  =ediff=, =smerge-mode=, =vdiff=).  Let me demo it right away!

* A community effort

I have been working on the Modus themes ever since I started using Emacs
a bit more than a year ago.  The first stable release was in
November 2019.  Lots of users have helped me ever since.

I wish to thank the following people for their contributions during this
time (sort A-Z).

+ Anders Johansson :: Sent the first patch which inspired me to develop
  more advanced customisation options (employing =if=, =pcase=, etc.).
+ André Alexandre Gomes :: Helped me test and ultimately fix tricky yet
  critical issues with byte compilation.  Also influenced the design of
  several Org interfaces.
+ Basil L. Contovounesios :: Simplified the code for evaluating faces.
  Also fixed some errors and inconsistencies.  Basil is a core Emacs
  contributor and seems to specialise on precise, surgical edits.
+ Damien Cassou :: Helped me identify potential issues with =flycheck=
  (and =flymake=), =notmuch=, and Magit's blame interface (=magit-blame=).
+ Dhavan Vaidya :: The maintainer of the Debian package that includes
  both themes (currently in Debian Sid).
+ Len Trigg :: Introduced the idea of reusing or overriding theme
  colours in user configs.  There are DIY options (check README).
+ Manuel Uberti :: Sent feedback in a multitude of issues, helping me
  add support for a tonne of packages and make =helm= look great.
+ Mark Burton :: Several issues that improved the looks of Org tables
  and Org agenda.

Continues…

** A community effort (continued)

+ Murilo Pereira :: Reported the first issue, which helped me realise
  the need for more colour variation to meet the needs of Emacs.
+ Shreyas Ragavan :: Offered insights over a range of issues and
  maintained a keen eye for tricky details.  Helped improve support for
  packages.
+ User "Ben" :: Recommended improvements for "mixed fonts" in Org.  Also
  helped with the aesthetics of =tab-bar-mode= (Emacs 27) and related.
+ User "dinko" :: Identified an incorrect expression that related to the
  Org "rainbow blocks" style (see README for custom options).
+ User "Fourchaux" :: Identified the bug with byte compilation.  Also
  reported other issues with colour inconsistencies.
+ User "okamsn" :: Suggested a refactor of all bold weights.  This lets
  users specify what "bold" means, such as =semibold= (see README).

Also thanks to everyone else who opened an issue.

Aaron Jensen, Alexey Shmalko, Arif Rezai, David Edmondson, Davor Rotim,
Divan Santana, Fredrik, Gerry Agbobada, Gianluca Recchia, Michael
Goldenberg, Moesasji, Pierre Téchoueyres, Ryan Phillips, TheBlob42,
Thibaut Verron, Trey Merkley, Uri Sharf, Vincent Foley, doolio, tycho
garen

I do not know who maintains the Guix packages.  Please let me know, so
that I can add it in the README.  Thanks anyway!

All contributions are valuable.  They help me improve things.

** Indirect contributions

Thanks to Fabrice Niessen, the Leuven theme's developer, for maintaining
such a popular project and for offering inspiration on one of the
customisation options I defined (Org sectioned headings).

Thanks to Bozhidar Batsov, the maintainer of, /inter alia/, the Emacs port
of the Zenburn theme, from whence I copied a =defmacro= that helped
improve the way the themes would set their colours.  This macro also
allows for the advanced DIY customisation options I already mentioned.

** Thanks to others

I must also express my gratitude to these core Emacs contributors:

+ Stefan Monnier :: A long-time Emacs contributor and the driving force
  behind GNU ELPA.  Emacs =master= takes the themes from there.
+ Stefan Kangas :: For setting things in motion that eventually led to
  the inclusion of the themes in Emacs.
+ Eli Zaretskii :: Approved of the request to include the themes and
  recommended a NEWS entry to announce their inclusion.

Personally, I have benefited immensely from the contributions of Omar
Antolín Camarena.  Omar is the developer of several packages that I use
in my dotemacs.  I learnt a lot from his code, but also from answers he
gave to my questions.

* “Form follows function”

In conclusion, I wish to say that we can always benefit from more
contributions about the overall design of Emacs.

There was a mega-thread on the emacs-devel mailing list a little while
ago covering the broad theme of “why is Emacs so square?”.  It
highlighted the fact that we need more motivated individuals to do work
on the aesthetics of Emacs.

Which brings me to the adage of “form follows function”.  While I agree
with its salient point, I think it obfuscates the fact that /there is no
such thing as formless function/.  A developer will have to come up with
some kind of presentation.  There always exists some implicit design
philosophy.

So what we really need is to somehow bring together those who are
focused on the mechanics of things with those who can help build more
usable interfaces.

We use computers to make our life easier.  We must not fall into the
trap of assuming as constant the transient constraints imposed by a
given implementation.  The status quo is not an excuse for inertia.

You can always help, even if you have no knowledge of how Emacs works or
know how to code.  Even reporting an issue is a good start.  Anything
that helps refine the looks of Emacs is a step in the right direction.
</code></pre>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Released Modus themes 0.12.0</title>
      <description>Information about the latest release of my highly-accessible themes for Emacs.</description>
      <pubDate>Wed, 26 Aug 2020 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2020-08-26-modus-themes-0-12-0/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2020-08-26-modus-themes-0-12-0/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>I just published version <code>0.12.0</code> of the Modus themes.  These are my
highly-accessible themes for GNU Emacs.  They conform with the WCAG AAA
standard for colour contrast accessibility (a minimum contrast ratio of
7:1 between the foreground and background values).  You can find the
packages on GNU ELPA, MELPA, MELPA Stable:</p>

<ul>
  <li><code>modus-operandi-theme</code> (light)</li>
  <li><code>modus-vivendi-theme</code> (dark)</li>
</ul>

<p>An HTML version of the project’s README is also available on my website:
<a href="https://protesilaos.com/modus-themes">https://protesilaos.com/modus-themes</a></p>

<p>Below are the release notes.</p>

<hr />

<h2>Modus Operandi and Modus Vivendi version 0.12.0</h2>

<p>By Protesilaos Stavrou <a href="mailto:info@protesilaos.com">info@protesilaos.com</a> on 2020-08-26</p>

<p>This entry documents the set of changes since version 0.11.0
(2020-07-31).  There have been around 70 commits in the meatime, though
the sheer number may obfuscate the fact that a lot of work has gone into
this release.</p>

<p>As always, every change described here conforms with the accessibility
objective of the themes for a minimum 7:1 contrast ratio between
background and foreground values in their given combinations
(conformance with the WCAG AAA standard).</p>

<h2>New customisation options</h2>

<h3>1 Completion Frameworks</h3>

<p>The star of the show has to be the new option that refashions the
aesthetics of completion UIs: Helm, Icomplete, Ido, Ivy, Sallet,
Selectrum.  The <code>modus-operandi-theme-completions</code> and
<code>modus-vivendi-theme-completions</code> accept the following symbols:</p>

<ul>
  <li>nil (default)</li>
  <li>moderate</li>
  <li>opinionated</li>
</ul>

<p>Nil means that the overall presentation of the UI follows the patterns
established by its own source code.  For example, Ivy uses four distinct
background and foreground combinations of accented colours to highlight
the matching groups.  A grey background is added to denote the implicit
match between those groups.  So we choose to respect this metaphor,
while applying colours that conform with the accessibility goal of our
project.  Whereas Icomplete or Ido use subtle styles to present their
results.  Again, we remain faithful to their presentation.</p>

<p>With <code>moderate</code>, we apply nuanced background and foreground combinations
of accented colour values.  This will slightly tone down Helm, Ivy,
Sallet, Selectrum, while it will slightly adjust the looks of Icomplete
and Ido.</p>

<p>Whereas <code>opinionated</code> has a more pronounced effect on the overall
aesthetics of the UI.  For the likes of Icomplete and Ido which are
subtle by default, this option will use intense combinations of
background and foreground colours.  They are the diametric opposite of
the nil value.  Whereas Helm, Ivy, Sallet, Selectrum, will use even more
subtle colours.  Again, they are farther away than their default looks.</p>

<p>These new options supersede the now-deprecated and more limited in scope
variables of prior releases:</p>

<ul>
  <li>modus-operandi-theme-intense-standard-completions</li>
  <li>modus-vivendi-theme-intense-standard-completions</li>
</ul>

<p>Thanks to the following people for their valuable feedback in issue 75:
https://gitlab.com/protesilaos/modus-themes/-/issues/75</p>

<ul>
  <li>Anders Johansson</li>
  <li>Manuel Uberti</li>
  <li>Shreyas Ragavan</li>
</ul>

<h3>2 Prompts</h3>

<p>The <code>modus-operandi-theme-prompts</code> and modus-vivendi-theme-prompts’ will
change the overall looks of minibuffer and shell prompts (<code>M-x shell</code> as
well as <code>M-x eshell</code>).  Their possible values are:</p>

<ul>
  <li>nil (default)</li>
  <li>subtle</li>
  <li>intense</li>
</ul>

<p>Nil will only use a coloured foreground for the prompts’ text.  Simple
and effective.</p>

<p>With <code>subtle</code>, the default foreground value is retained but is now
complemented by an appropriately tinted background.  The effect is more
noticeable than the default, though not by much.</p>

<p>While <code>intense</code> applies a coloured background and foreground combination
that should clearly stand out from the rest of the context.</p>

<p>Thanks to Manuel Uberti for sharing feedback in issue 74:
https://gitlab.com/protesilaos/modus-themes/-/issues/74</p>

<h3>3 Fringe visibility</h3>

<p>A new pair of symbols supersedes older variables:</p>

<ul>
  <li>modus-operandi-theme-visible-fringes ==&gt; modus-operandi-theme-fringes</li>
  <li>modus-vivendi-theme-visible-fringes  ==&gt; modus-vivendi-theme-fringes</li>
</ul>

<p>While the deprecated options were booleans, the current ones offer a
choice between the following:</p>

<ul>
  <li>nil (default)</li>
  <li>subtle</li>
  <li>intense</li>
</ul>

<p>Nil means that the fringes have no distinct background of their own.
They still exist per the settings of <code>fringe-mode</code>, but can only be
discerned by tracking the negative space between the frame’s or window’s
edge and the buffer’s effective boundaries.</p>

<p>The <code>subtle</code> value will apply a greyscale background that is fairly
close to the default main background (pure white/black).  The fringes
are now visible.</p>

<p>As its name implies, <code>intense</code> has a more pronounced effect than the
other values.  It also uses a greyscale background.</p>

<h2>Review of already supported faces and colours</h2>

<h3>1 Magit blame styles</h3>

<p>The headers that Magit’s blame interface produces were difficult to tell
apart from their context.  A set of carefully selected colours now makes
sure that they are always distinct.  Some subtle background values are
used, in addition to other typographic elements.</p>

<p>Thanks to Damien Cassou for reporting this problem and for providing
valuable feedback that informed the final design.  Refer to issue 71:
https://gitlab.com/protesilaos/modus-themes/-/issues/71</p>

<h3>2 Paren match colours</h3>

<p>The face that highlights the matching delimiter when <code>show-paren-mode</code>
(or equivalent) is enabled uses two dedicated colours, whose names are:
<code>bg-paren-match</code> and <code>bg-paren-match-intense</code>.  Those have been reviewed
to make them more obvious in various contexts and to improve their
overall consistency.</p>

<p>A report with relative contrast ratios is available on my website:
https://protesilaos.com/codelog/2020-08-09-modus-themes-paren-match/</p>

<p>I benefited from valuable feedback from Shreyas Ragavan in issue 70:
https://gitlab.com/protesilaos/modus-themes/-/issues/70</p>

<h3>3 Mu4e faces</h3>

<p>Some faces were tweaked to make it easier to distinguish replied,
forwarded, and draft messages from other headers.  The changes are
fairly small in scope, but the effect should be that of an overall
improvement.</p>

<p>Thanks to Shreyas Ragavan for noticing these inconsistencies and for
their continued participation in addressing them.  See issue 69:
https://gitlab.com/protesilaos/modus-themes/-/issues/69</p>

<h3>4 Notmuch message headings</h3>

<p>A couple of inconsistencies with how notmuch would style email addresses
and folded messages were addressed.  The generic <code>italic</code> face was also
tweaked in the process, removing the foreground it would falsely define.</p>

<p>Thanks to Damien Cassou for bringing these to my attention in issue 72:
https://gitlab.com/protesilaos/modus-themes/-/issues/72</p>

<h3>5 hl-todo</h3>

<p>Let the special keywords of <code>hl-todo-mode</code> use an optional slant, just
like code comments do.  This is to ensure that they feel part of their
context.</p>

<h3>6 Magit general interface</h3>

<p>Several faces were reviewed in the interest of colour harmony and to
address potential inconsistencies or exaggerations.  The most noticeable
change pertains to the log views, as we now use fewer accent values,
reducing whatever unnecessary “rainbow effect” may have existed.</p>

<h3>7 VC commit logs</h3>

<p>The presentation of <code>vc-print-log</code> and <code>vc-print-root-log</code> has been
reviewed to reduce the stark contrast between the colours it once used.
While the elements remain distinct, the differences between them are
more subtle, which is preferable when viewing long lists of
similar-looking patterns.</p>

<h3>8 Powerline</h3>

<p>The active and inactive minibuffers now use appropriate accented
backgrounds or foregrounds for some of their elements.  This makes them
better for their intended function.</p>

<p>Thanks to Shreyas Ragavan and tycho garen for their feedback in issue
73, which was actually about adding support for Spaceline.  It uses
Powerline as its dependency, so we eventually had to accommodate both of
them: https://gitlab.com/protesilaos/modus-themes/-/issues/73</p>

<p>Shreyas also helped by adding a short note in the README which informs
users of those two packages on how to tweak things when conducting tests
or changing themes.  See merge requests 9 and 10:</p>

<ul>
  <li>https://gitlab.com/protesilaos/modus-themes/-/merge_requests/9</li>
  <li>https://gitlab.com/protesilaos/modus-themes/-/merge_requests/10</li>
</ul>

<h3>9 Latex sectioning</h3>

<p>The themes will no longer affect the height of the Latex sectioning
faces.  This is because there already exists a variable that scales them
accordingly.</p>

<p>Thanks to Anders Johansson for providing insights in issue 77:
https://gitlab.com/protesilaos/modus-themes/-/issues/77</p>

<h3>10 Transient pop-up menu</h3>

<p>Extended support for its new colour-coded faces that follow in the
footsteps of the <code>hydra</code> package for visual semantics.</p>

<h3>11 Miscellaneous</h3>

<p>The following faces were refined:</p>

<ul>
  <li>
    <p><code>org-formula</code> inherits from <code>fixed-pitch</code> to ensure that it does not
break table layouts when the user opts for a mixed-font setup (such as
with <code>M-x variable-pitch-mode</code>).</p>
  </li>
  <li>
    <p><code>bongo-elapsed-track-part</code> uses a more appropriate accented
background.</p>
  </li>
  <li>
    <p><code>symbol-overlay-default-face</code> is less intense than before.  This is in
response to feedback I received from Manuel Uberti as an aside in
issue 75: https://gitlab.com/protesilaos/modus-themes/-/issues/75</p>
  </li>
  <li>
    <p><code>rectangle-preview</code> uses a slightly accented background, which
distinguishes it from the highlighted region.  This is to denote a
different state where the user is typing in some text.</p>
  </li>
  <li>
    <p><code>diff-hl-change</code> now uses the more appropriate yellow colour instead
of blue.  Yellow denotes “mixed changes” and, therefore, stands
between “removed” (red) and “added” (green).  As it so happens, yellow
is a colour that derives by mixing red with green.</p>
  </li>
</ul>

<h2>New packages</h2>

<p>The following are now explicitly supported by the themes:</p>

<ul>
  <li>org-table-sticky-header</li>
  <li>pkgbuild-mode</li>
  <li>semantic</li>
  <li>spaceline</li>
</ul>

<p>More faces or face groups that are defined:</p>

<ul>
  <li>git-rebase (magit)</li>
  <li>doom-modeline-debug-visual</li>
  <li>file-name-shadow</li>
  <li>the faces used by Emacs 27’s ‘display-line-numbers-major-tick’ and
<code>display-line-numbers-minor-tick</code></li>
  <li>table-cell</li>
</ul>

<h2>Final notes</h2>

<p>There now exists an HTML version of the README, which will hopefully
make things easier for users: https://protesilaos.com/modus-themes/</p>

<p>Other changes are not user-facing.  For example, using <code>pcase</code> instead
of <code>cond</code> to make relevant expressions more succinct.  Or defining a
coloured underline in a more straightforward way.  No need to document
them at length.</p>

<p>While this release introduces customisation options, it feels as though
the themes are approaching a stable state.  We know what works, we have
a comprehensive colour palette that can meet our evolving needs, and we
have already achieved broad package/face coverage.  All while conforming
with the overarching objective of this project for a minimum 7:1
contrast ratio between background and foreground values in any given
combination we specify.</p>

<p>I wish to thank everyone who has helped me by testing things and sharing
their thoughts.  The people already mentioned herein:</p>

<ul>
  <li>Anders Johansson (https://gitlab.com/andersjohansson)</li>
  <li>Damien Cassou (https://gitlab.com/DamienCassou)</li>
  <li>Manuel Uberti (https://gitlab.com/muberti)</li>
  <li>Shreyas Ragavan (https://gitlab.com/shrysr)</li>
  <li>tycho garen (https://gitlab.com/tychoish)</li>
</ul>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Modus themes (Emacs): review “paren-match” colours</title>
      <description>Complete report on the review of the background values used to highlight matching delimiters.</description>
      <pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2020-08-09-modus-themes-paren-match/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2020-08-09-modus-themes-paren-match/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>The following code block is written in <code>org-mode</code> markup.  You can
interact with in your local Emacs setup.</p>

<p>The short version of this report is that the colours for highlighting
matching delimiters (parentheses in Emacs Lisp) have changed to look
more consistent.</p>

<hr />

<pre><code class="language-org">#+TITLE: Modus themes: review "paren-match" colours
#+AUTHOR: Protesilaos Stavrou

* Background information

Version =0.11.0= of Modus Operandi and Modus Vivendi (see CHANGELOG)
introduced customisation options for rendering the faces that pertain to
parenthesis matching in a more intense colour.  The relevant symbols
are:

- =modus-operandi-theme-intense-paren-match=
- =modus-vivendi-theme-intense-paren-match=

Unlike the default configuration that used a dedicated/unique colour for
the relevant faces (referenced by the palette variable =bg-paren-match=),
the "intense" variant was using a shade of blue that was not designed
specifically for this task (=blue-intense-bg=).

The option did achieve its intended effect, but left something to be
desired: /it was inconsistent/.

* Scope of this review

This review is two-fold:

- Normalise the differences between the two themes, so that
  transitioning from the one to the other feels more natural.
- Use a bespoke colour for the "intense" style (=bg-paren-match-intense=),
  to account for the unique requirements of this particular facet of the
  design.

* Relative luminance (old vs new)

The following tables summarise the results in terms of contrast ratios.
They measure the relative luminance between the "bg-paren" variables and
those they are used with.

Columns 3 and 4 refer to the colour values of =bg-paren-match= and
=bg-paren-match-intense= respectively.  These are directly combined with
=fg-main=, so they need to have a minimum contrast ratio of 7:1, per the
design principles of the Modus themes for conforming with the highest
accessibility standard of WCAG AAA.

The other colours are contextual and are only meant to highlight the
changes between the old and new implementations.

** Modus Operandi

#+NAME: Modus Operandi old
| Colour name        |         | #efcabf | #6aaeff |
|--------------------+---------+---------+---------|
| fg-main            | #000000 |   13.87 |    9.11 |
| bg-main            | #ffffff |    1.51 |    2.30 |
| bg-alt             | #f0f0f0 |    1.33 |    2.02 |
| bg-dim             | #f8f8f8 |    1.43 |    2.17 |
| bg-region          | #bcbcbc |    1.25 |    1.21 |
| red-nuanced-bg     | #fff1f0 |    1.38 |    2.10 |
| green-nuanced-bg   | #ecf7ed |    1.38 |    2.10 |
| yellow-nuanced-bg  | #fff3da |    1.38 |    2.09 |
| blue-nuanced-bg    | #f3f3ff |    1.38 |    2.09 |
| magenta-nuanced-bg | #fdf0ff |    1.38 |    2.09 |
| cyan-nuanced-bg    | #ebf6fa |    1.38 |    2.10 |
#+TBLFM: $3='(clr $2 @1$3);%0.2f::$4='(clr $2 @1$4);%0.2f

#+NAME: Modus Operandi new
| Colour name        |         | #e0af82 | #70af9f  |
|--------------------+---------+---------+----------|
| fg-main            | #000000 |   10.62 |     8.32 |
| bg-main            | #ffffff |    1.98 |     2.52 |
| bg-alt             | #f0f0f0 |    1.73 |     2.21 |
| bg-dim             | #f8f8f8 |    1.86 |     2.38 |
| bg-region          | #bcbcbc |    1.04 |     1.33 |
| red-nuanced-bg     | #fff1f0 |    1.80 |     2.29 |
| green-nuanced-bg   | #ecf7ed |    1.80 |     2.29 |
| yellow-nuanced-bg  | #fff3da |    1.80 |     2.29 |
| blue-nuanced-bg    | #f3f3ff |    1.80 |     2.29 |
| magenta-nuanced-bg | #fdf0ff |    1.80 |     2.29 |
| cyan-nuanced-bg    | #ebf6fa |    1.80 |     2.29 |
#+TBLFM: $3='(clr $2 @1$3);%0.2f::$4='(clr $2 @1$4);%0.2f

** Modus Vivendi

#+NAME: Modus Vivendi old
| Colour name        |         | #6e3a50 | #2a40b8 |
|--------------------+---------+---------+---------|
| fg-main            | #ffffff |    8.81 |    8.32 |
| bg-main            | #000000 |    2.38 |    2.52 |
| bg-alt             | #181a20 |    1.97 |    2.09 |
| bg-dim             | #110b11 |    2.21 |    2.34 |
| bg-region          | #3c3c3c |    1.25 |    1.33 |
| red-nuanced-bg     | #2c0614 |    2.09 |    2.21 |
| green-nuanced-bg   | #001904 |    2.09 |    2.21 |
| yellow-nuanced-bg  | #221000 |    2.09 |    2.21 |
| blue-nuanced-bg    | #0f0e39 |    2.09 |    2.21 |
| magenta-nuanced-bg | #230631 |    2.09 |    2.21 |
| cyan-nuanced-bg    | #041529 |    2.08 |    2.21 |
#+TBLFM: $3='(clr $2 @1$3);%0.2f::$4='(clr $2 @1$4);%0.2f

#+NAME: Modus Vivendi new
| Colour name        |         | #5f362f | #255650 |
|--------------------+---------+---------+---------|
| fg-main            | #ffffff |   10.22 |    8.32 |
| bg-main            | #000000 |    2.06 |    2.52 |
| bg-alt             | #181a20 |    1.70 |    2.09 |
| bg-dim             | #110b11 |    1.90 |    2.34 |
| bg-region          | #3c3c3c |    1.08 |    1.33 |
| red-nuanced-bg     | #2c0614 |    1.80 |    2.21 |
| green-nuanced-bg   | #001904 |    1.80 |    2.21 |
| yellow-nuanced-bg  | #221000 |    1.80 |    2.21 |
| blue-nuanced-bg    | #0f0e39 |    1.80 |    2.21 |
| magenta-nuanced-bg | #230631 |    1.80 |    2.21 |
| cyan-nuanced-bg    | #041529 |    1.80 |    2.20 |
#+TBLFM: $3='(clr $2 @1$3);%0.2f::$4='(clr $2 @1$4);%0.2f

* ANNEX: Tools for measuring relative luminance and previewing colours

This is the formula for the calculations whose results are shown in the
tables.

#+begin_src emacs-lisp
;; Code is courtesy of Omar Antolín Camarena:
;; https://github.com/oantolin/emacs-config
(defun wcag (hex)
  (apply #'+
         (cl-mapcar
          (lambda (k x)
            (* k (if (&lt;= x 0.03928)
                     (/ x 12.92)
                   (expt (/ (+ x 0.055) 1.055) 2.4))))
          '(0.2126 0.7152 0.0722)
          (color-name-to-rgb hex))))

(defun clr (c1 c2)
  (let ((ct (/ (+ (wcag c1) 0.05)
               (+ (wcag c2) 0.05))))
    (max ct (/ ct))))
#+end_src

Use =rainbow-mode= to preview the colour values presented below.

#+begin_src emacs-lisp
(use-package rainbow-mode
  :ensure
  :commands rainbow-mode
  :config
  (setq rainbow-ansi-colors nil)
  (setq rainbow-x-colors nil))
#+end_src
</code></pre>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Emacs: Bongo media manager and extras</title>
      <description>Video demonstration of how I use Bongo to manage and play back music from my local collection. All inside of Emacs!</description>
      <pubDate>Thu, 06 Aug 2020 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2020-08-06-emacs-bongo-extras/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2020-08-06-emacs-bongo-extras/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=C711C2l5-eg">https://www.youtube.com/watch?v=C711C2l5-eg</a></p>
         
         <p>In this video I demonstrate the numerous custom functions I have defined
for interfacing with Bongo, the media manager for Emacs.  My extensions
are designed to facilitate my workflow: managing and playing back a
large local music collection, with the help of Dired and other Emacs
facilities.</p>

<p>The following block presents the contents of the code I used in this
video.  Please note that <em>the code block will not be updated</em>.  For the
latest version of everything I share on this front, you should refer
directly to <a href="https://protesilaos.com/dotemacs">my dotemacs</a> (the link
points to the web page, but there is also a git source linked from
there).</p>

<pre><code class="language-elisp">(use-package bongo
  :ensure
  :config
  (setq bongo-default-directory "~/Music")
  (setq bongo-prefer-library-buffers nil)
  (setq bongo-insert-whole-directory-trees t)
  (setq bongo-logo nil)
  (setq bongo-display-track-icons nil)
  (setq bongo-display-track-lengths nil)
  (setq bongo-display-header-icons nil)
  (setq bongo-display-playback-mode-indicator t)
  (setq bongo-display-inline-playback-progress t)
  (setq bongo-join-inserted-tracks nil)
  (setq bongo-field-separator (propertize " · " 'face 'shadow))
  (setq bongo-mark-played-tracks t)
  (setq bongo-header-line-mode nil)
  (setq bongo-mode-line-indicator-mode nil)
  (setq bongo-enabled-backends '(vlc mpv))
  (setq bongo-vlc-program-name "cvlc")

;;; Bongo playlist buffer
  (defvar prot/bongo-playlist-delimiter
    "\n******************************\n\n"
    "Delimiter for inserted items in `bongo' playlist buffers.")

  (defun prot/bongo-playlist-section ()
    (bongo-insert-comment-text
     prot/bongo-playlist-delimiter))

  (defun prot/bongo-paylist-section-next ()
    "Move to next `bongo' playlist custom section delimiter."
    (interactive)
    (let ((section "^\\*+$"))
      (if (save-excursion (re-search-forward section nil t))
          (progn
            (goto-char (point-at-eol))
            (re-search-forward section nil t))
        (goto-char (point-max)))))

  (defun prot/bongo-paylist-section-previous ()
    "Move to previous `bongo' playlist custom section delimiter."
    (interactive)
    (let ((section "^\\*+$"))
      (if (save-excursion (re-search-backward section nil t))
          (progn
            (goto-char (point-at-bol))
            (re-search-backward section nil t))
        (goto-char (point-min)))))

  (defun prot/bongo-playlist-mark-section ()
    "Mark `bongo' playlist section, delimited by custom markers.
The marker is `prot/bongo-playlist-delimiter'."
    (interactive)
    (let ((section "^\\*+$"))
      (search-forward-regexp section nil t)
      (push-mark nil t)
      (forward-line -1)
      ;; REVIEW any predicate to replace this `save-excursion'?
      (if (save-excursion (re-search-backward section nil t))
          (progn
            (search-backward-regexp section nil t)
            (forward-line 1))
        (goto-char (point-min)))
      (activate-mark)))

  (defun prot/bongo-playlist-kill-section ()
    "Kill `bongo' playlist-section at point.
This operates on a custom delimited section of the buffer.  See
`prot/bongo-playlist-kill-section'."
    (interactive)
    (prot/bongo-playlist-mark-section)
    (bongo-kill))

  (defun prot/bongo-playlist-play-random ()
    "Play random `bongo' track and determine further conditions."
    (interactive)
    (unless (bongo-playlist-buffer)
      (bongo-playlist-buffer))
    (when (or (bongo-playlist-buffer-p)
              (bongo-library-buffer-p))
      (unless (bongo-playing-p)
        (with-current-buffer (bongo-playlist-buffer)
          (bongo-play-random)
          (bongo-random-playback-mode 1)
          (bongo-recenter)))))

  (defun prot/bongo-playlist-random-toggle ()
    "Toggle `bongo-random-playback-mode' in playlist buffers."
    (interactive)
    (if (eq bongo-next-action 'bongo-play-random-or-stop)
        (bongo-progressive-playback-mode)
      (bongo-random-playback-mode)))

  (defun prot/bongo-playlist-reset ()
    "Stop playback and reset `bongo' playlist marks.
To reset the playlist is to undo the marks produced by non-nil
`bongo-mark-played-tracks'."
    (interactive)
    (when (bongo-playlist-buffer-p)
      (bongo-stop)
      (bongo-reset-playlist)))

  (defun prot/bongo-playlist-terminate ()
    "Stop playback and clear the entire `bongo' playlist buffer.
Contrary to the standard `bongo-erase-buffer', this also removes
the currently-playing track."
    (interactive)
    (when (bongo-playlist-buffer-p)
      (bongo-stop)
      (bongo-erase-buffer)))

  (defun prot/bongo-playlist-insert-playlist-file ()
    "Insert contents of playlist file to a `bongo' playlist.
Upon insertion, playback starts immediately, in accordance with
`prot/bongo-play-random'.

The available options at the completion prompt point to files
that hold filesystem paths of media items.  Think of them as
'directories of directories' that mix manually selected media
items.

Also see `prot/bongo-dired-make-playlist-file'."
    (interactive)
    (let* ((path "~/Music/playlists/")
           (dotless directory-files-no-dot-files-regexp)
           (playlists (mapcar
                       'abbreviate-file-name
                       (directory-files path nil dotless)))
           (choice (completing-read "Insert playlist: " playlists nil t)))
      (if (bongo-playlist-buffer-p)
          (progn
            (save-excursion
              (goto-char (point-max))
              (bongo-insert-playlist-contents
               (format "%s%s" path choice))
              (prot/bongo-playlist-section))
            (prot/bongo-playlist-play-random))
        (user-error "Not in a `bongo' playlist buffer"))))

;;; Bongo + Dired (bongo library buffer)
  (defmacro prot/bongo-dired-library (name doc val)
    "Create `bongo' library function NAME with DOC and VAL."
    `(defun ,name ()
       ,doc
       (when (string-match-p "\\`~/Music/" default-directory)
         (bongo-dired-library-mode ,val))))

  (prot/bongo-dired-library
   prot/bongo-dired-library-enable
   "Set `bongo-dired-library-mode' when accessing ~/Music.

Add this to `dired-mode-hook'.  Upon activation, the directory
and all its sub-directories become a valid library buffer for
Bongo, from where we can, among others, add tracks to playlists.
The added benefit is that Dired will continue to behave as
normal, making this a superior alternative to a purpose-specific
library buffer.

Note, though, that this will interfere with `wdired-mode'.  See
`prot/bongo-dired-library-disable'."
   1)

  ;; NOTE `prot/bongo-dired-library-enable' does not get reactivated
  ;; upon exiting `wdired-mode'.
  ;;
  ;; TODO reactivate bongo dired library upon wdired exit
  (prot/bongo-dired-library
   prot/bongo-dired-library-disable
   "Unset `bongo-dired-library-mode' when accessing ~/Music.
This should be added `wdired-mode-hook'.  For more, refer to
`prot/bongo-dired-library-enable'."
   -1)

  (defun prot/bongo-dired-insert-files ()
    "Add files in a `dired' buffer to the `bongo' playlist."
    (let ((media (dired-get-marked-files)))
      (with-current-buffer (bongo-playlist-buffer)
        (goto-char (point-max))
        (mapc 'bongo-insert-file media)
        (prot/bongo-playlist-section))
      (with-current-buffer (bongo-library-buffer)
        (dired-next-line 1))))

  (defun prot/bongo-dired-insert ()
    "Add `dired' item at point or marks to `bongo' playlist.

The playlist is created, if necessary, while some other tweaks
are introduced.  See `prot/bongo-dired-insert-files' as well as
`prot/bongo-playlist-play-random'.

Meant to work while inside a `dired' buffer that doubles as a
library buffer (see `prot/bongo-dired-library')."
    (interactive)
    (when (bongo-library-buffer-p)
      (unless (bongo-playlist-buffer-p)
        (bongo-playlist-buffer))
      (prot/bongo-dired-insert-files)
      (prot/bongo-playlist-play-random)))

  (defun prot/bongo-dired-make-playlist-file ()
    "Add `dired' marked items to playlist file using completion.

These files are meant to reference filesystem paths.  They ease
the task of playing media from closely related directory trees,
without having to interfere with the user's directory
structure (e.g. a playlist file 'rock' can include the paths of
~/Music/Scorpions and ~/Music/Queen).

This works by appending the absolute filesystem path of each item
to the selected playlist file.  If no marks are available, the
item at point will be used instead.

Selecting a non-existent file at the prompt will create a new
entry whose name matches user input.  Depending on the completion
framework, such as with `icomplete-mode', this may require a
forced exit (e.g. \\[exit-minibuffer] to parse the input without
further questions).

Also see `prot/bongo-playlist-insert-playlist-file'."
    (interactive)
    (let* ((dotless directory-files-no-dot-files-regexp)
           (pldir "~/Music/playlists")
           (playlists (mapcar
                       'abbreviate-file-name
                       (directory-files pldir nil dotless)))
           (plname (completing-read "Select playlist: " playlists nil nil))
           (plfile (format "%s/%s" pldir plname))
           (media-paths
            (if (derived-mode-p 'dired-mode)
                ;; TODO more efficient way to do ensure newline ending?
                ;;
                ;; The issue is that we need to have a newline at the
                ;; end of the file, so that when we append again we
                ;; start on an empty line.
                (concat
                 (mapconcat #'identity
                            (dired-get-marked-files)
                            "\n")
                 "\n")
              (user-error "Not in a `dired' buffer"))))
      ;; The following `when' just checks for an empty string.  If we
      ;; wanted to make this more robust we should also check for names
      ;; that contain only spaces and/or invalid characters…  This is
      ;; good enough for me.
      (when (string-empty-p plname)
        (user-error "No playlist file has been specified"))
      (unless (file-directory-p pldir)
        (make-directory pldir))
      (unless (and (file-exists-p plfile)
                   (file-readable-p plfile)
                   (not (file-directory-p plfile)))
        (make-empty-file plfile))
      (append-to-file media-paths nil plfile)
      (with-current-buffer (find-file-noselect plfile)
        (delete-duplicate-lines (point-min) (point-max))
        (sort-lines nil (point-min) (point-max))
        (save-buffer)
        (kill-buffer))))

  :hook ((dired-mode-hook . prot/bongo-dired-library-enable)
         (wdired-mode-hook . prot/bongo-dired-library-disable))
  :bind (("&lt;C-XF86AudioPlay&gt;" . bongo-pause/resume)
         ("&lt;C-XF86AudioNext&gt;" . bongo-next)
         ("&lt;C-XF86AudioPrev&gt;" . bongo-previous)
         ("&lt;M-XF86AudioPlay&gt;" . bongo-show)
         ("&lt;S-XF86AudioNext&gt;" . bongo-seek-forward-10)
         ("&lt;S-XF86AudioPrev&gt;" . bongo-seek-backward-10)
         :map bongo-playlist-mode-map
         ("n" . bongo-next-object)
         ("p" . bongo-previous-object)
         ("M-n" . prot/bongo-paylist-section-next)
         ("M-p" . prot/bongo-paylist-section-previous)
         ("M-h" . prot/bongo-playlist-mark-section)
         ("M-d" . prot/bongo-playlist-kill-section)
         ("g" . prot/bongo-playlist-reset)
         ("D" . prot/bongo-playlist-terminate)
         ("r" . prot/bongo-playlist-random-toggle)
         ("R" . bongo-rename-line)
         ("j" . bongo-dired-line)       ; Jump to dir of file at point
         ("J" . dired-jump)             ; Jump to library buffer
         ("i" . prot/bongo-playlist-insert-playlist-file)
         ("I" . bongo-insert-special)
         :map bongo-dired-library-mode-map
         ("&lt;C-return&gt;" . prot/bongo-dired-insert)
         ("C-c SPC" . prot/bongo-dired-insert)
         ("C-c +" . prot/bongo-dired-make-playlist-file)))
</code></pre>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Emacs: custom functions galore!</title>
      <description>Video presentation of bespoke commands that improve my Emacs experience.</description>
      <pubDate>Mon, 03 Aug 2020 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2020-08-03-emacs-custom-functions-galore/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2020-08-03-emacs-custom-functions-galore/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=Oqn56p2cGQ4">https://www.youtube.com/watch?v=Oqn56p2cGQ4</a></p>
         
         <p>In this presentation I demonstrate a collection of functions that
improve my day-to-day experience with Emacs.  They are meant to modify
the functionality of existing tools, such as those that are already
shipped with the upstream Emacs distribution.</p>

<p>The following code block presents the contents of the file I used in
this video.  Please note that <em>the code block will not be updated</em>.  For
the latest version of everything I share on this front, you should refer
to <a href="https://protesilaos.com/dotemacs">my dotemacs</a>.</p>

<pre><code class="language-elisp">;;; Scratch buffers on demand

;; Package by Ian Eure (ieure on GitHub)
(use-package scratch
  :ensure
  :config
  (defun prot/scratch-buffer-setup ()
    "Add contents to `scratch' buffer and name it accordingly."
    (let* ((mode (format "%s" major-mode))
           (string (concat "Scratch buffer for: " mode "\n\n")))
      (when scratch-buffer
        (save-excursion
          (insert string)
          (goto-char (point-min))
          (comment-region (point-at-bol) (point-at-eol)))
        (forward-line 2))
      (rename-buffer (concat "*Scratch for " mode "*") t)))
  :hook (scratch-create-buffer-hook . prot/scratch-buffer-setup)
  :bind ("C-c s" . scratch))

;;; Maximise window + kill buffer (and close window)

;; `prot/window-single-toggle' is based on `windower' by Pierre
;; Neidhardt (ambrevar on GitLab)
(use-package emacs
  :config
  (defvar prot/window-configuration nil
    "Current window configuration.
Intended for use by `prot/window-monocle'.")

  (define-minor-mode prot/window-single-toggle
    "Toggle between multiple windows and single window.
This is the equivalent of maximising a window.  Tiling window
managers such as DWM, BSPWM refer to this state as 'monocle'."
    :lighter " [M]"
    :global nil
    (if (one-window-p)
        (when prot/window-configuration
          (set-window-configuration prot/window-configuration))
      (setq prot/window-configuration (current-window-configuration))
      (delete-other-windows)))

  (defun prot/kill-buffer-current (&amp;optional arg)
    "Kill current buffer or abort recursion when in minibuffer."
    (interactive "P")
    (if (minibufferp)
        (abort-recursive-edit)
      (kill-buffer (current-buffer)))
    (when (and arg
               (not (one-window-p)))
      (delete-window)))
  :bind (("s-m" . prot/window-single-toggle)
         ("s-k" . prot/kill-buffer-current)))

;;; Marking constructs

(use-package emacs
  :commands (prot/mark-symbol
             prot/mark-sexp-backward)
  :config
  (defmacro prot/mark (name object &amp;optional docstring)
    "Produce function for marking small syntactic constructs.
NAME is how the function should be called.  OBJECT is its scope.
Optional DOCSTRING describes the resulting function.

This is a slightly modified version of the built-in `mark-word'."
    `(defun ,name (&amp;optional arg allow-extend)
       ,docstring
       (interactive "P\np")
       (let ((x (format "%s-%s" "forward" ,object)))
         (cond ((and allow-extend
                     (or (and (eq last-command this-command) (mark t))
                         (region-active-p)))
                (setq arg (if arg (prefix-numeric-value arg)
                            (if (&lt; (mark) (point)) -1 1)))
                (set-mark
                 (save-excursion
                   (goto-char (mark))
                   (funcall (intern x) arg)
                   (point))))
               (t
                (let ((bounds (bounds-of-thing-at-point (intern ,object))))
                  (unless (consp bounds)
                    (user-error "No %s at point" ,object))
                  (if (&gt;= (prefix-numeric-value arg) 0)
                      (goto-char (car bounds))
                    (goto-char (cdr bounds)))
                  (push-mark
                   (save-excursion
                     (funcall (intern x) (prefix-numeric-value arg))
                     (point)))
                  (activate-mark)))))))

  (prot/mark
   prot/mark-word
   "word"
   "Mark the whole word at point.
This function is a slightly modified version of the built-in
`mark-word', that I intend to use only in special circumstances,
such as when recording a keyboard macro where precision is
required.  For a general purpose utility, use `prot/mark-symbol'
instead.")

  (prot/mark
   prot/mark-symbol
   "symbol"
   "Mark the whole symbol at point.
With optional ARG, mark the current symbol and any remaining
ARGth symbols away from point.  A negative argument moves
backward. Repeated invocations of this command mark the next
symbol in the direction originally specified.

In the absence of a symbol and if a word is present at point,
this command will operate on it as described above.")

  (defun prot/mark-sexp-backward (&amp;optional arg)
    "Mark previous or ARGth balanced expression[s].
Just a convenient backward-looking `mark-sexp'."
    (interactive "P")
    (if arg
        (mark-sexp (- arg) t)
      (mark-sexp (- 1) t)))

  (defun prot/mark-construct-dwim (&amp;optional arg)
    "Mark symbol or balanced expression at point.
A do-what-I-mean wrapper for `prot/mark-sexp-backward',
`mark-sexp', and `prot/mark-symbol'.

When point is over a symbol, mark the entirety of it.  Regular
words are interpreted as symbols when an actual symbol is not
present.

For balanced expressions, a backward match will happen when point
is to the right of the closing delimiter.  A forward match is the
fallback condition and should work when point is before a
balanced expression, with or without whitespace in between it an
the opening delimiter.

Optional ARG will mark a total of ARGth objects while counting
the current one (so 3 would be 1+2 more).  A negative count moves
the mark backward (though that would invert the backward-moving
sexp matching of `prot/mark-sexp-backward', so be mindful of
where the point is).  Repeated invocations of this command
incrementally mark objects in the direction originally
specified."
    (interactive "P")
    (cond
     ((symbol-at-point)
      (prot/mark-symbol arg t))
     ((eq (point) (cdr (bounds-of-thing-at-point 'sexp)))
      (prot/mark-sexp-backward arg))
     (t
      (mark-sexp arg t))))

  :bind (("M-@" . prot/mark-word)       ; replaces `mark-word'
         ("C-M-SPC" . prot/mark-construct-dwim)))

;;; Workspaces (Emacs 27 "tabs")

(use-package tab-bar
  :config
  (setq tab-bar-close-button-show nil)
  (setq tab-bar-close-last-tab-choice 'tab-bar-mode-disable)
  (setq tab-bar-close-tab-select 'recent)
  (setq tab-bar-new-tab-choice t)
  (setq tab-bar-new-tab-to 'right)
  (setq tab-bar-position nil)
  (setq tab-bar-show nil)
  (setq tab-bar-tab-hints nil)
  (setq tab-bar-tab-name-function 'tab-bar-tab-name-all)

  (tab-bar-mode -1)
  (tab-bar-history-mode -1)

  (defun prot/tab-bar-select-tab-dwim ()
    "Do-What-I-Mean function for getting to a `tab-bar-mode' tab.
If no other tab exists, create one and switch to it.  If there is
one other tab (so two in total) switch to it without further
questions.  Else use completion to select the tab to switch to."
    (interactive)
    (let ((tabs (mapcar (lambda (tab)
                          (alist-get 'name tab))
                        (tab-bar--tabs-recent))))
      (cond ((eq tabs nil)
             (tab-new))
            ((eq (length tabs) 1)
             (tab-next))
            (t
             (icomplete-vertical-do ()
               (tab-bar-switch-to-tab
                (completing-read "Select tab: " tabs nil t)))))))

  :bind (("C-x t t" . prot/tab-bar-select-tab-dwim)
         ("s-t" . prot/tab-bar-select-tab-dwim)
         ("C-x t s" . tab-switcher)))

;;; Git log with VC (built-in Version Control framework)

(use-package vc
  :config
  (setq vc-find-revision-no-save t)

  (use-package log-view
    :config
    (defun prot/vc-print-log (&amp;optional arg)
      "Like `vc-print-log' but for a custom fileset.

With optional prefix ARG (\\[universal-argument]), query for a
number to limit the log to.  Then prompt the user for matching
files in the `default-directory'.  A literal space delimits
multiple files (inserting a space will renew the prompt, asking
for another file match).

In a `dired-mode' buffer, print log for the file at point, or any
marked files, except for when a double prefix argument is passed.
A single prefix arg still provides for a limit to the log.

If a double prefix ARG is passed, prompt for a limit and produce
a log that covers all files in the present directory."
      (interactive "P")
      (let* ((lim (if arg
                      (read-number "Limit log to N entries: " 5)
                    20))
             (dir default-directory)
             (dotless directory-files-no-dot-files-regexp)
             (files (directory-files dir nil dotless t))
             (crm-separator " ")
             (set (cond
                   ((equal arg '(16))
                    files)
                   ((eq major-mode 'dired-mode)
                    (dired-get-marked-files t nil))
                   (t
                    (icomplete-vertical-do ()
                      (completing-read-multiple
                       "Select files in current dir: " files nil t)))))
             (backend (vc-backend set)))
        (vc-print-log-internal backend set nil nil lim 'with-diff)))

    (defun prot/log-view-extract-commit ()
      "Kill commit from around point in `vc-print-log'."
      (interactive)
      (let ((commit (cadr (log-view-current-entry (point) t))))
        (kill-new (format "%s" commit))
        (message "Copied: %s" commit)))

    :bind (("C-x v SPC" . prot/vc-print-log)
           :map log-view-mode-map
           ("&lt;tab&gt;" . log-view-toggle-entry-display)
           ("&lt;return&gt;" . log-view-find-revision)
           ("w" . prot/log-view-extract-commit)
           ("s" . vc-log-search)
           ("o" . vc-log-outgoing)
           ("f" . vc-log-incoming)
           ("F" . vc-update)
           ("P" . vc-push)))

  :bind (("C-x v b" . vc-retrieve-tag)  ; "branch" switch
         ("C-x v t" . vc-create-tag)
         ("C-x v f" . vc-log-incoming)  ; the actual git fetch
         ("C-x v F" . vc-update)        ; "F" because "P" is push
         ("C-x v d" . vc-diff)))

;;; Diff functions

(use-package diff
  :commands prot/diff-refine-buffer
  :config
  (setq diff-default-read-only t)
  (setq diff-advance-after-apply-hunk t)
  (setq diff-update-on-the-fly t)
  ;; The following are from Emacs 27.1
  (setq diff-refine nil)                ; I do it on demand
  (setq diff-font-lock-prettify nil)    ; better for patches
  (setq diff-font-lock-syntax nil)      ; good for accessibility

  (defun prot/diff-buffer-with-file (&amp;optional arg)
    "Compare buffer to its file, else run `vc-diff'.
With \\[universal-argument] also enable highlighting of word-wise
changes, local to the current buffer."
    (interactive "P")
    (let ((buf nil))     ; this method will "fail" if multi diff buffers
      (if (buffer-modified-p)
          (progn
            (diff-buffer-with-file (current-buffer))
            (setq buf "*Diff*"))
        (vc-diff)
        (setq buf "*vc-diff*"))
      (when arg
        (with-current-buffer (get-buffer buf)
          (setq-local diff-refine 'font-lock)))))

  (defun prot/diff-refine-buffer ()
    "Produce word-wise, 'refined' diffs in `diff-mode' buffer.
Also see `prot/diff-refine-hunk-or-buf' that is a wrapper for the
current command."
    (interactive)
    (let ((position (point)))
      (when (derived-mode-p 'diff-mode)
        (setq-local diff-refine 'font-lock)
        (font-lock-flush (point-min) (point-max))
        (goto-char position))))

  (defun prot/diff-refine-hunk-or-buf (&amp;optional arg)
    "Apply word-wise, 'refined' diffs to hunk or buffer.
With prefix ARG (\\[universal-argument]), refine the entire
buffer, else the diff hunk at point.

This is a wrapper around `prot/diff-refine-buffer' and
`diff-refine-hunk', meant to economise on key bindings."
    (interactive "P")
    (if arg
        (prot/diff-refine-buffer)
      (diff-refine-hunk)))

  (defun prot/diff-restrict-view-dwim (&amp;optional arg)
    "Use `diff-restrict-view', or widen when already narrowed.
By default the narrowing effect applies to the focused diff hunk.
With \\[universal-argument] do it for the current file instead."
    (interactive "P")
    (when (derived-mode-p 'diff-mode)
      (if (buffer-narrowed-p)
          (progn
            (widen)
            (message "Widened the view"))
        (if arg
            (progn
              (diff-restrict-view arg)
              (message "Narrowed to file"))
          (diff-restrict-view)
          (message "Narrowed to diff hunk")))))

  ;; `prot/diff-buffer-with-file' replaces the default for `vc-diff'
  ;; (which I bind to another key---see VC section).
  :bind (("C-x v =" . prot/diff-buffer-with-file)
         :map diff-mode-map
         ("C-c C-b" . prot/diff-refine-hunk-or-buf) ; replace `diff-refine-hunk'
         ("C-c C-n" . prot/diff-restrict-view-dwim)))

;;; Insert delimiters and text headings

(use-package emacs
  :config
  ;; Got those numbers from `string-to-char'
  (defconst prot/insert-pair-alist
    '(("' Single quote" . (39 39))           ; ' '
      ("\" Double quotes" . (34 34))         ; " "
      ("` Elisp quote" . (96 39))            ; ` '
      ("‘ Single apostrophe" . (8216 8217))  ; ‘ ’
      ("“ Double apostrophes" . (8220 8221)) ; “ ”
      ("( Parentheses" . (40 41))            ; ( )
      ("{ Curly brackets" . (123 125))       ; { }
      ("[ Square brackets" . (91 93))        ; [ ]
      ("&lt; Angled brackets" . (60 62))        ; &lt; &gt;
      ("« Εισαγωγικά Gr quote" . (171 187))) ; « »
    "Alist of pairs for use with `prot/insert-pair-completion'.")

  (defun prot/insert-pair-completion (&amp;optional arg)
    "Insert pair from `prot/insert-pair-alist'."
    (interactive "P")
    (let* ((data prot/insert-pair-alist)
           (chars (mapcar #'car data))
           (choice (completing-read "Select character: " chars nil t))
           (left (cadr (assoc choice data)))
           (right (caddr (assoc choice data))))
      (insert-pair arg left right)))
  
  ;; Based on `org--line-empty-p'.
  (defmacro prot/line-p (name regexp)
    "Make NAME function to match REGEXP on line n from point."
    `(defun ,name (n)
       (save-excursion
         (and (not (bobp))
	          (or (beginning-of-line n) t)
	          (save-match-data
	            (looking-at ,regexp))))))

  (prot/line-p
   prot/empty-line-p
   "[\s\t]*$")

  (prot/line-p
   prot/indent-line-p
   "^[\s\t]+")

  (prot/line-p
   prot/non-empty-line-p
   "^.*$")

  (prot/line-p
   prot/text-list-line-p
   "^\\([\s\t#*+]+\\|[0-9]+[).]+\\)")

  (prot/line-p
   prot/text-heading-line-p
   "^[=-]+")

  (defun prot/text-mode-heading (&amp;optional arg)
    "Insert equal length heading delimiter below current line.

A heading delimiter is drawn as a series of dashes (-).  With
optional ARG, i.e. by prefixing \\[universal-argument], draw the
heading delimiter with equals signs (=).  The latter is
considered a heading level 1, while the former is level 2.

A heading delimiter is inserted only when that would not mess up
with existing headings or lists.  In such cases, point will move
to the next line.  For the purposes of this command, text that
starts with a number and no further delimiter is not consider a
list element.

This command is meant to be used in `text-mode' buffers and
derivatives, such as `markdown-mode', though not in `org-mode'."
    (interactive "P")
    (cond
     ((eq major-mode 'org-mode)
      (user-error "Do not use `prot/text-mode-heading' in `org-mode'!"))
     ((derived-mode-p 'text-mode)
      (let* ((count (- (point-at-eol) (point-at-bol)))
             (char (string-to-char (if arg "=" "-"))))
          (cond
           ((and (eobp)
                 (or (prot/text-list-line-p 1)
                     (prot/text-heading-line-p 1)
                     (prot/empty-line-p 1)
                     (prot/indent-line-p 1)))
            (newline 1))
           ((or (prot/empty-line-p 1)
                (prot/indent-line-p 1))
            (prot/new-line-below))
           ((or (prot/text-list-line-p 1)
                (prot/text-heading-line-p 2))
            (if (prot/empty-line-p 3)
                (beginning-of-line 3)
              (prot/new-line-below)))
           (t
            (prot/new-line-below)
            (insert-char char count nil)
            (newline 2)))))))

  :bind (("C-'" . prot/insert-pair-completion)
         ("M-'" . prot/insert-pair-completion)
         ("&lt;C-M-backspace&gt;" . backward-kill-sexp)
         ("M-c" . capitalize-dwim)
         ("M-l" . downcase-dwim)        ; "lower" case
         ("M-u" . upcase-dwim)
         :map text-mode-map
         ("&lt;M-return&gt;" . prot/text-mode-heading)))

;;; Search for files, directories, buffers

(use-package dired-aux
  :config
  (setq dired-isearch-filenames 'dwim)
  ;; The following variables were introduced in Emacs 27.1
  (setq dired-create-destination-dirs 'ask)
  (setq dired-vc-rename-file t)

  (defmacro prot/dired-fd (name doc prompt &amp;rest flags)
    "Make commands for selecting 'fd' results with completion.
NAME is how the function should be named.  DOC is the function's
documentation string.  PROMPT describes the scope of the query.
FLAGS are the command-line arguments passed to the 'fd'
executable, each of which is a string."
    `(defun ,name (&amp;optional arg)
       ,doc
       (interactive "P")
       (let* ((vc (vc-root-dir))
              (dir (expand-file-name (if vc vc default-directory)))
              (regexp (read-regexp
                       (format "%s matching REGEXP in %s: " ,prompt
                               (propertize dir 'face 'bold))))
              (names (process-lines "fd" ,@flags regexp dir))
              (buf "*FD Dired*"))
         (if names
             (if arg
                 (dired (cons (generate-new-buffer-name buf) names))
               (icomplete-vertical-do ()
                 (find-file
                  (completing-read (format "Items matching %s (%s): "
                                           (propertize regexp 'face 'success)
                                           (length names))
                                   names nil t)))))
         (user-error (format "No matches for « %s » in %s" regexp dir)))))

  (prot/dired-fd
   prot/dired-fd-dirs
   "Search for directories in VC root or PWD.
With \\[universal-argument] put the results in a `dired' buffer.
This relies on the external 'fd' executable."
   "Subdirectories"
   "-i" "-H" "-a" "-t" "d" "-c" "never")

  (prot/dired-fd
   prot/dired-fd-files-and-dirs
   "Search for files and directories in VC root or PWD.
With \\[universal-argument] put the results in a `dired' buffer.
This relies on the external 'fd' executable."
   "Files and dirs"
    "-i" "-H" "-a" "-t" "d" "-t" "f" "-c" "never")

  :bind (("M-s d" .  prot/dired-fd-dirs)
         ("M-s z" . prot/dired-fd-files-and-dirs)
         :map dired-mode-map
         ("C-+" . dired-create-empty-file)
         ("M-s f" . nil)))

(use-package ibuffer
  :config
  (setq ibuffer-expert t)
  (setq ibuffer-display-summary nil)
  (setq ibuffer-use-other-window nil)
  (setq ibuffer-show-empty-filter-groups nil)
  (setq ibuffer-movement-cycle nil)
  (setq ibuffer-default-sorting-mode 'filename/process)
  (setq ibuffer-use-header-line t)
  (setq ibuffer-default-shrink-to-minimum-size nil)
  (setq ibuffer-formats
        '((mark modified read-only locked " "
                (name 30 30 :left :elide)
                " "
                (size 9 -1 :right)
                " "
                (mode 16 16 :left :elide)
                " " filename-and-process)
          (mark " "
                (name 16 -1)
                " " filename)))
  (setq ibuffer-saved-filter-groups nil)
  (setq ibuffer-old-time 48)

  (defun prot/buffers-major-mode (&amp;optional arg)
    "Select buffers that match the current buffer's major mode.
With \\[universal-argument] produce an `ibuffer' filtered
accordingly.  Else use standard completion."
    (interactive "P")
    (let* ((major major-mode)
           (prompt "Buffers for ")
           (mode-string (format "%s" major))
           (mode-string-pretty (propertize mode-string 'face 'success)))
      (if arg
          (ibuffer t (concat "*" prompt mode-string "*")
                   (list (cons 'used-mode major)))
        (switch-to-buffer
         (read-buffer
          (concat prompt mode-string-pretty ": ") nil t
          (lambda (pair) ; pair is (name-string . buffer-object)
            (with-current-buffer (cdr pair) (derived-mode-p major))))))))

  (defun prot/buffers-vc-root (&amp;optional arg)
    "Select buffers that match the present `vc-root-dir'.
With \\[universal-argument] produce an `ibuffer' filtered
accordingly.  Else use standard completion.

When no VC root is available, use standard `switch-to-buffer'."
    (interactive "P")
    (let* ((root (vc-root-dir))
           (prompt "Buffers for VC ")
           (vc-string (format "%s" root))
           (vc-string-pretty (propertize vc-string 'face 'success)))
      (if root
          (if arg
              (ibuffer t (concat "*" prompt vc-string "*")
                       (list (cons 'filename (expand-file-name root))))
            (switch-to-buffer
             (read-buffer
              (concat prompt vc-string-pretty ": ") nil t
              (lambda (pair) ; pair is (name-string . buffer-object)
                (with-current-buffer (cdr pair) (string= (vc-root-dir) root))))))
        (call-interactively 'switch-to-buffer))))

  :hook (ibuffer-mode-hook . hl-line-mode)
  :bind (("M-s b" . prot/buffers-major-mode)
         ("M-s v" . prot/buffers-vc-root)
         ("C-x C-b" . ibuffer)
         :map ibuffer-mode-map
         ("* f" . ibuffer-mark-by-file-name-regexp)
         ("* g" . ibuffer-mark-by-content-regexp) ; "g" is for "grep"
         ("* n" . ibuffer-mark-by-name-regexp)
         ("s n" . ibuffer-do-sort-by-alphabetic)  ; "sort name" mnemonic
         ("/ g" . ibuffer-filter-by-content)))
</code></pre>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Released Modus themes 0.11.0</title>
      <description>Information about the latest release of my highly-accessible themes for Emacs.</description>
      <pubDate>Fri, 31 Jul 2020 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2020-07-31-modus-themes-0-11-0/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2020-07-31-modus-themes-0-11-0/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>I just published version <code>0.11.0</code> of the Modus themes.  These are my
highly-accessible themes for GNU Emacs.  They conform with the WCAG AAA
standard for colour contrast accessibility (a minimum contrast ratio of
7:1 between the foreground and background values).  You can find the
packages on GNU ELPA, MELPA, MELPA Stable:</p>

<ul>
  <li><code>modus-operandi-theme</code> (light)</li>
  <li><code>modus-vivendi-theme</code> (dark)</li>
</ul>

<p>Below are the release notes.</p>

<hr />

<h2>Modus Operandi and Modus Vivendi version 0.11.0</h2>

<p>By Protesilaos Stavrou <a href="mailto:info@protesilaos.com">info@protesilaos.com</a> on 2020-07-31</p>

<p>This entry records the changes since version 0.10.0 (2020-06-24).  The
present release covers close to 100 commits, some of which introduce
far-reaching changes.  It is not just the quantity that matters.
Sometimes even a minor tweak requires lots of testing and forethought.
This release represents another month of intense work and attention to
detail.</p>

<h2>Palette review of “nuanced” colours</h2>

<p>The themes contain a subset of palette variables that have a two-fold
utility:</p>

<ol>
  <li>
    <p>Provide a subtle coloured background that can be combined with all
foreground colours that are intended for text/code highlighting.</p>
  </li>
  <li>
    <p>Produce variegated text in cases where complementary information
needs to be displayed alongside some more prominent construct
(e.g. Org table formulas).</p>
  </li>
</ol>

<p>In early July 2020, these colours went through a comprehensive review to
improve their intended use.  The complete report is available on my
website:
<a href="https://protesilaos.com/codelog/2020-07-08-modus-themes-nuanced-colours/">https://protesilaos.com/codelog/2020-07-08-modus-themes-nuanced-colours/</a></p>

<p>This formed the preparatory work that enabled several of the changes
documented herein, most noticeable among which is the “Org blocks”
customisation option.</p>

<h2>Customisation options</h2>

<h3>Org blocks</h3>

<ol>
  <li>
    <p>The symbols <code>modus-operandi-theme-distinct-org-blocks</code> and
<code>modus-vivendi-theme-distinct-org-blocks</code> are DEPRECATED.  They are
now REPLACED by the general-purpose <code>modus-operandi-theme-org-blocks</code>
and <code>modus-vivendi-theme-org-blocks</code> respectively.</p>
  </li>
  <li>
    <p>The aforementioned new symbols allow users to configure different
styles for Org blocks.</p>

    <ul>
      <li>
        <p>Option <code>greyscale</code> (which you must quote like this: ‘greyscale)
will apply a subtle grey background to the contents of the block,
while it will extend its beginning and end lines to ensure that the
area is distinct from the rest of the buffer.  This is the style
you would normally get with the old customisation options.</p>
      </li>
      <li>
        <p>Option <code>rainbow</code> (again, must be quoted) will instead apply a
colour-coded subtle background in the main area of the block.  The
exact colour depends on the programming language being used.  You
would need to check the source code for how these are currently
mapped (search for “org-src-block-faces”).  The basic idea is to
have different colours that make it easier for mixing the
input/output of multiple programming languages.  Users who engage
in literate programming may find this particularly useful.  Because
the block is already quite apparent, the beginning and end lines
are not extended to the edge of the window, to avoid exaggerations
that could create distractions.</p>
      </li>
    </ul>
  </li>
</ol>

<h3>Variable pitch headings (proportionately-spaced headings)</h3>

<p>The symbols <code>modus-operandi-theme-proportional-fonts</code> and
<code>modus-vivendi-theme-proportional-fonts</code> are DEPRECATED.  They are now
REPLACED by the more appropriately-named
<code>modus-operandi-theme-variable-pitch-headings</code> and
<code>modus-vivendi-theme-variable-pitch-headings</code> respectively.</p>

<p>The intended effect is exactly the same as before, namely, to let
headings in Org and relevant modes use a proportionately-spaced font
regardless of what the default is (typically a monospaced typeface).</p>

<p>Remember that to configure the exact font family for the generic
<code>variable-pitch</code> face, you can use something like this:</p>

<pre><code>(set-face-attribute 'variable-pitch nil :family "FiraGO")
</code></pre>

<p>Check the README for further details on setting and mixing fonts.</p>

<h3>Faint syntax for programming</h3>

<p>Users can now enable <code>modus-operandi-theme-faint-syntax</code> or
<code>modus-vivendi-theme-faint-syntax</code>.  The intended effect is to tone down
all syntax highlighting in programming modes, while always respecting
the overarching objective of these themes for a minimum contrast ratio
of 7:1 (highest accessibility standard for colour contrast—WCAG AAA).</p>

<p>The default is to use more saturated colours.</p>

<h3>Intense hl-line</h3>

<p>Toggling on <code>modus-operandi-theme-intense-hl-line</code> or
<code>modus-vivendi-theme-intense-hl-line</code> will apply a more pronounced grey
to the background of faces that highlight the current line.  This
affects tools such as the built-in <code>hl-line-mode</code>, which is in turn
enabled automatically by lots of other packages, like <code>elfeed</code> and
<code>mu4e</code>.</p>

<p>The default is to use a subtle grey.</p>

<h3>Intense paren-match</h3>

<p>Same principle as above.  <code>modus-operandi-theme-intense-paren-match</code> and
<code>modus-vivendi-theme-intense-paren-match</code> will make the matching
parentheses more intense than the default subtle warm background.  This
concerns modes such as that of the <code>smartparens</code> package as well as the
built-in <code>show-paren-mode</code>.</p>

<h2>Refactored the use of bold</h2>

<p>A major review of the themes now makes it possible to specify the exact
weight of what a “bold” typeface is.  This is only meaningful for cases
where a font family has variants such as “semibold”.</p>

<p>Evaluate this, replacing “semibold” with the one your typeface supports:</p>

<pre><code>(set-face-attribute 'bold nil :weight 'semibold)
</code></pre>

<p>The default is to use a standard bold weight.</p>

<h2>Packages and face groups</h2>

<h3>Refine already-supported faces</h3>

<ul>
  <li>
    <p>The following packages now use more appropriate colour combinations:</p>

    <ul>
      <li>diary</li>
      <li>annotate</li>
      <li>transient (magit pop-up menu, though also used elsewhere)</li>
      <li>fountain</li>
      <li>calendar</li>
      <li>mu4e</li>
      <li>markdown-mode</li>
      <li>outline-minor-faces</li>
    </ul>
  </li>
  <li>
    <p>Other changes:</p>

    <ul>
      <li>
        <p>org-agenda has undergone a thoroughgoing review to improve the
semantics of colour for scheduled tasks, deadlines, modeline
filters, current date etc.</p>
      </li>
      <li>
        <p>org and outline-mode headings have been refined to look better with
the “rainbow headings” option that was introduced in an earlier
release (check the README).</p>
      </li>
      <li>
        <p>org-quote now works properly with the “Org blocks” option mentioned
above.</p>
      </li>
      <li>
        <p>org-checkbox-statistics uses the same foreground colour as org-todo,
for the sake of consistency.</p>
      </li>
      <li>
        <p>org-date now always inherits from <code>fixed-pitch</code>, to ensure proper
alignment of elements when a mixed fonts setup is used (tools for
achieving this effect are documented at length in the README).  The
relevant patch was contributed by Matthew Stevenson.</p>
      </li>
      <li>
        <p>org-meta-line no longer looks like a comment, which helps denote its
special utility (e.g. when evaluating a table’s formula).</p>
      </li>
      <li>
        <p>org-warning now uses a variant of red for its text, which works
better in the contexts this face is used (e.g. the agenda or the
export dispatcher).</p>
      </li>
      <li>
        <p>We now apply a slightly more accented colour combination for
<code>secondary-selection</code>, which is chiefly used by Org and Calendar in
various contexts.</p>
      </li>
      <li>
        <p>Gnus group level faces make more considerate use of colour to better
denote their significance.</p>
      </li>
      <li>
        <p>Cited text in message buffers has a better sequence of colours.</p>
      </li>
      <li>
        <p>Two new Helm faces are supported.</p>
      </li>
      <li>
        <p>Let <code>keycast</code> use a different border colour when the “3D modeline”
option is enabled (refer to the README for that option).</p>
      </li>
      <li>
        <p>Extend <code>hl-todo-keyword-faces</code> with the “bug” keyword.</p>
      </li>
      <li>
        <p>More intense colour for <code>diff-hl-reverted-hunk-highlight</code>.</p>
      </li>
      <li>
        <p>Tone down the focused modeline’s border colour.</p>
      </li>
      <li>
        <p>Define new bespoke faces that the themes use internally.</p>
      </li>
      <li>
        <p>Use more appropriate colours for <code>header-line-highlight</code>.</p>
      </li>
      <li>
        <p>Apply greyscale line highlight for flycheck current line in the
diagnostics buffer, instead of the warmer colour combination it had
before.</p>
      </li>
      <li>
        <p>Tweak text colour difference between MU4E read and unread messages.</p>
      </li>
    </ul>
  </li>
</ul>

<h3>Added support for new packages</h3>

<ul>
  <li>bongo</li>
  <li>boon</li>
  <li>dictionary</li>
  <li>eshell-fringe-status</li>
  <li>eshell-git-prompt</li>
  <li>eshell-prompt-extras</li>
  <li>highlight-tail</li>
  <li>hl-defined</li>
  <li>notmuch</li>
  <li>tty-menu</li>
</ul>

<h2>Miscellaneous</h2>

<ul>
  <li>
    <p>Expand the README with new documentation and clarify parts of the
existing one.</p>
  </li>
  <li>
    <p>Update the Wiki page with screenshots and their descriptions (this in
itself is a day’s worth of work):
https://gitlab.com/protesilaos/modus-themes/-/wikis/Screenshots</p>
  </li>
  <li>
    <p>Make the source code of each theme work better with the built-in
<code>outline-minor-mode</code>.  Check my video if you need a demo on how I use
this in tandem with <code>imenu</code>:
https://protesilaos.com/codelog/2020-07-20-emacs-outline-imenu/</p>
  </li>
</ul>

<p>Thanks to, in no particular order:</p>

<ul>
  <li>
    <p>Shreyas Ragavan (https://gitlab.com/shrysr) for introducing me to the
idea that derived the “rainbow” Org blocks and for providing valuable
feedback in several issues.</p>
  </li>
  <li>
    <p>Matthew Stevenson (https://gitlab.com/matth0204) for contributing the
aforementioned patch for the <code>org-date</code> face.</p>
  </li>
  <li>
    <p>Manuel Uberti (https://gitlab.com/muberti) for offering valuable
feedback in a number of issues (and special thanks for doing this for
several months now).</p>
  </li>
  <li>
    <p>Dinko (https://gitlab.com/dinkonin) for noticing a not-so-obvious bug
in the initial implementation of the “rainbow Org blocks” option.</p>
  </li>
  <li>
    <p>okamsn (https://gitlab.com/okamsn) for providing the necessary
feedback that allowed me to refactor the use of “bold”, mentioned
above.</p>
  </li>
</ul>

<p>Refer to the issue tracker (or commit log) for further details:
https://gitlab.com/protesilaos/modus-themes/-/issues</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Emacs: demo of outline-minor-mode and imenu</title>
      <description>Video presentation of built-in Emacs tools for efficiently navigating large files.</description>
      <pubDate>Mon, 20 Jul 2020 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2020-07-20-emacs-outline-imenu/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2020-07-20-emacs-outline-imenu/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=UHk3FbieW0w">https://www.youtube.com/watch?v=UHk3FbieW0w</a></p>
         
         <p>In this video I demonstrate two built-in tools for navigating large
files in a manner that is both efficient and convenient.</p>

<ul>
  <li>
    <p><code>outline-minor-mode</code> can be combined with a major mode for
programming, such as <code>emacs-lisp-mode</code>, to produce headings that may
then be expanded or contracted (same idea as with Org mode).</p>
  </li>
  <li>
    <p><code>imenu</code> presents a dynamically-generated index with points of interest
in the given buffer (e.g. headings), allowing you to jump to one using
completion methods.</p>
  </li>
</ul>

<p>Both tools are complemented by other packages as well as my own
functions and minor extras.</p>

<p>Check <a href="https://protesilaos.com/dotemacs">my dotemacs</a> for all the code
and relevant documentation.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Emacs proof-of-concept: tweaked focused writing for Org</title>
      <description>Screenshot demo of a tweaked version of my “focused editing” tools for Emacs.</description>
      <pubDate>Sat, 18 Jul 2020 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2020-07-18-emacs-concept-org-tweaked-focus/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2020-07-18-emacs-concept-org-tweaked-focus/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>I was asked whether it would be possible to reproduce this aesthetic:
<a href="https://lepisma.xyz/2017/10/28/ricing-org-mode/">https://lepisma.xyz/2017/10/28/ricing-org-mode/</a></p>

<p>I do not want to use <code>writeroom-mode</code> because it assumes far more things
than the narrower-in-scope <code>olivetti-mode</code>.  So I am sticking with the
tools I presented in my last two videos:</p>

<ul>
  <li><a href="https://protesilaos.com/codelog/2020-07-16-emacs-focused-editing/">Emacs: configuring mixed fonts in Org mode</a></li>
  <li><a href="https://protesilaos.com/codelog/2020-07-17-emacs-mixed-fonts-org/">“Focused editing” tools for Emacs</a></li>
</ul>

<h2>Screenshots</h2>

<p>So here are my two themes, Modus Operandi and Modus Vivendi, showcasing
the result.</p>

<p><strong>Remember to visit the image’s direct link</strong> to see it full size.  The
smaller view may distort some of its details.  Also bear in mind that
<em>this is a proof-of-concept</em> that is done on an existing document.  I
did not prepare a fake environment that would make things look good.</p>

<p><img alt="Modus Operandi single window" src="https://protesilaos.com/assets/images/attachments/modus-operandi-org-focus-demo-single-2020-07-18.png" /></p>

<p><img alt="Modus Operandi side-by-side windows" src="https://protesilaos.com/assets/images/attachments/modus-operandi-org-focus-demo-dual-2020-07-18.png" /></p>

<p><img alt="Modus Vivendi single window" src="https://protesilaos.com/assets/images/attachments/modus-vivendi-org-focus-demo-single-2020-07-18.png" /></p>

<p><img alt="Modus Vivendi side-by-side windows" src="https://protesilaos.com/assets/images/attachments/modus-vivendi-org-focus-demo-dual-2020-07-18.png" /></p>

<p>Note that here I also enable a few theme-specific customisation options,
such as scaled headings and distinct org blocks (there are <em>a lot of
options</em>).  For Org blocks, you may also consider the “rainbow” symbol
that you can pass to the relevant variable (check <a href="https://gitlab.com/protesilaos/modus-themes">the project’s
README</a>), which applies a
colour-coded background on a per-programming-language basis (useful for
those who work with multiple languages in an Org buffer).</p>

<h2>The new state of affairs</h2>

<p>Overview of what is new for this proof-of-concept when
<code>prot/olivetti-mode</code> is enabled:</p>

<ul>
  <li>Hides the leading stars from Org headings.  This is done by enabling
<code>org-superstar-mode</code> and by making sure that the heading marks are
empty, thus: <code>(setq org-superstar-headline-bullets-list '(" "))</code></li>
  <li>Configures the built-in <code>window-divider-mode</code> to draw 1px wide borders
to the bottom and right sides of the windows.</li>
</ul>

<p>To make the text look more book-like, I use the <a href="https://huertatipografica.com/en/fonts/alegreya-ht-pro">Alegreya font by Huerta
Typografica</a>,
employing the methods I already explained in my video for mixing fonts.</p>

<p>If you want to force Olivetti to push the contents of the buffer off
centre, you could increase the values of <code>olivetti-body-width</code> and/or
<code>olivetti-minimum-body-width</code> variable.  That would, however, not
produce a good effect when you have two windows side-by-side, so please
experiment accordingly.</p>

<p>For me this result is <em>prima facie</em> both usable and visually pleasing.
If you really want to control more things with padding, then do consider
<code>writeroom-mode</code> instead of <code>olivetti-mode</code>.</p>

<p>If you wish to use the Modus themes but tweak some of their colours,
then I have good news for you: it is possible and supported!  Check the
README for the tools that the themes provide.</p>

<h2>New code snippets</h2>

<p>Below are the little extras you would need (always in addition to what I
covered in the last two videos).  I already had configurations for
those, but I tweaked them a bit for the sake of this demo:</p>

<pre><code class="language-elisp">(use-package org-superstar              ; supersedes `org-bullets'
  :ensure
  :after org
  :config
  (setq org-superstar-remove-leading-stars t)
  (setq org-superstar-headline-bullets-list '(" ")) ;; '("🞛" "◉" "○" "▷")
  (setq org-superstar-item-bullet-alist
        '((?+ . ?•)
          (?* . ?➤)
          (?- . ?–)))
  (org-superstar-mode -1))

(use-package emacs
  :config
  (setq window-divider-default-right-width 1)
  (setq window-divider-default-bottom-width 1)
  (setq window-divider-default-places t)
  (window-divider-mode -1))
</code></pre>

<p>And this is the new <code>prot/olivetti-mode</code>:</p>

<pre><code class="language-elisp">(use-package olivetti
  :ensure
  :diminish
  :config
  (setq olivetti-body-width 0.65)
  (setq olivetti-minimum-body-width 72)
  (setq olivetti-recall-visual-line-mode-entry-state t)

  (define-minor-mode prot/olivetti-mode
    "Toggle buffer-local `olivetti-mode' with additional parameters.

Fringes are disabled.  The modeline is hidden, except for
`prog-mode' buffers (see `prot/hidden-mode-line-mode').  The
default typeface is set to a proportionately-spaced family,
except for programming modes (see `prot/variable-pitch-mode').
The cursor becomes a blinking bar, per `prot/cursor-type-mode'."
    :init-value nil
    :global nil
    (if prot/olivetti-mode
        (progn
          (olivetti-mode 1)
          (set-window-fringes (selected-window) 0 0)
          (prot/variable-pitch-mode 1)
          (prot/cursor-type-mode 1)
          (unless (derived-mode-p 'prog-mode)
            (prot/hidden-mode-line-mode 1))
          (window-divider-mode 1)
          (when (eq major-mode 'org-mode)
            (org-superstar-mode 1)))
      (olivetti-mode -1)
      (set-window-fringes (selected-window) nil) ; Use default width
      (prot/variable-pitch-mode -1)
      (prot/cursor-type-mode -1)
      (unless (derived-mode-p 'prog-mode)
        (prot/hidden-mode-line-mode -1))
      (window-divider-mode -1)
      (when (eq major-mode "org-mode")
        (org-superstar-mode -1))))

  :bind ("C-c o" . prot/olivetti-mode))
</code></pre>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Emacs: configuring mixed fonts in Org mode</title>
      <description>Video presentation of the basics for configuring font families in Emacs, in order to mix different typefaces for Org.</description>
      <pubDate>Fri, 17 Jul 2020 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2020-07-17-emacs-mixed-fonts-org/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2020-07-17-emacs-mixed-fonts-org/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=Oiu3LFK_rX8">https://www.youtube.com/watch?v=Oiu3LFK_rX8</a></p>
         
         <p>In this presentation I talk about the workflow of mixing different font
families inside of the same buffer.  The idea is to use this for
<code>org-mode</code> so that you can have some text use a monospaced font to keep
its alignment properties in tact, while the rest of the buffer switched
to a proportionately-spaced font that is more natural to read for large
portions of text.</p>

<p>The information shared here is complementary to what I talked about
yesterday on the topic of <a href="https://protesilaos.com/codelog/2020-07-16-emacs-focused-editing/">“Focused editing” tools for
Emacs</a></p>

<p>Note that mixed font settings for <code>org-mode</code>, <code>markdown-mode</code>, and
others will depend on the theme that you use.  My <a href="https://gitlab.com/protesilaos/modus-themes">Modus
themes</a> are designed to
cope well with such demands.</p>

<p>Check <a href="https://protesilaos.com/dotemacs">my dotemacs</a> for more code and
relevant documentation.</p>

<h2>Text of the presentation</h2>

<p>The following is a standard Org buffer.</p>

<pre><code class="language-org">#+TITLE: Emacs: mixed font faces for Org mode
#+AUTHOR: Protesilaos Stavrou · https://protesilaos.com

** Basic concepts

The idea here is to show you how to configure your fonts so that you can
optimise for mixed-typeface scenaria.  You can use these for focused
writing (see my previous video) or to do presentations such as this one!

You can already tell that paragraph text is allowed to use a typeface
that is proportionately-spaced.  This is because it reads from the
=default= face (more on that later).  Whereas inline code is configured to
always use the more specialised =fixed-pitch= face that applies a
monospaced font.  /Notice the difference?/

This principle applies to all spacing-sensitive constructs, such as
tables and special lines.  Otherwise you would be seeing misalignments.

#+NAME: Sample of contrast ratios
| Colour name   |         | #fff1f0 | #ecf7ed |
|---------------+---------+---------+---------|
| red           | #a60000 |    7.28 |    7.28 |
| red-alt       | #972500 |    7.40 |    7.40 |
| red-alt-other | #a0132f |    7.26 |    7.26 |
#+TBLFM: $3='(clr $2 @1$3);%0.2f::$4='(clr $2 @1$4);%0.2f

** Configuring “face” attributes for fonts

There are multiple ways to set your font in Emacs.  I find that doing so
at the “face” level is effective and yields consistent results.

I will show you how to do it, but we must briefly cover the basics
before we deal with the actual code.

In Emacs parlance a “face” is a display construct that contains data
such as an associated foreground and background colour, as well as all
typographic properties (height, weight, font family, slant, etc.).

Couched in those terms, an Emacs theme is, in essence, a program that
controls such faces.  You can already spot several faces on display here
(the current theme is my Modus Vivendi---in some of my other videos I
use its light counterpart: Modus Operandi).

*** The three faces we need to take care of

To make things work, we will be using the =set-face-attribute= function.
And we need to configure three faces:

1. =default= :: This one is the standard font family that all other faces
   refer to when they have no font specification of their own.  In
   general, faces *should not* have a typeface spec, unless they need to.

2. =fixed-pitch= :: This should be given a monospaced typeface and is
   meant to be inherited by faces that must always be presented with
   fixed-spacing.

3. =variable-pitch= :: Whereas this should be a proportionately-spaced
   font.  Again, it is meant to be inhereted by faces that are supposed
   to be presented with such a typeface (though you do not need to
   specify those faces, as =M-x variable-pitch-mode= does it
   automatically).

For me a monospaced font should be the standard, so in practice I
configure =default= and =fixed-pitch= to use the same typeface.

*** Using ~set-face-attribute~

Let us do this together.

#+begin_src emacs-lisp
(set-face-attribute 'default nil :font "Hack-16")
(set-face-attribute 'fixed-pitch nil :font "Hack-16")
(set-face-attribute 'variable-pitch nil :font "FiraGO-18")

(dolist (face '(default fixed-pitch))
  (set-face-attribute `,face nil :font "Hack-16"))
#+end_src

When you are on your own, you can start by consulting Emacs /itself/ on
how to use this function.  Do it with =C-h f set-face-attribute=.  Or
place the point over that symbol (the unique name of the function), type
=C-h f= and then =M-n= to select it.

Make a habit of using these help functions (and checking the source code
they provide via a link): I would argue this is the difference between
understanding Emacs and merely using it.

** Themes will affect your results

Note that your theme must have configured everything properly for this
to work.  More specifically, you must make sure that all indentation or
spacing-sensitive faces are designed to always inherit from =fixed-pitch=.
Petition your theme's developer to account for this workflow of mixing
fonts.

Or use my Modus themes which are designed to meet the highest
accessibility standard for colour contrast.  Basically this is about
readability, while the technical spec is called “WCAG AAA”: it
corresponds to a *minimum contrast ratio* between background and
foreground values of 7:1.

The themes are /highly customisable/ and have wide package coverage.

See  https://gitlab.com/protesilaos/modus-themes for details.

*** Notes for theme devs and DIY users

These are the faces for =org-mode= that your theme needs to configure with
the =:inherit fixed-pitch= attribute.  Special thanks to Gitlab user “Ben”
for bringing these to my attention a while ago!

+ org-block
+ org-block-begin-line
+ org-block-end-line
+ org-code
+ org-document-info-keyword
+ org-meta-line
+ org-table
+ org-verbatim

Optionally also consider these for =markdown-mode=:

+ markdown-code-face
+ markdown-html-attr-name-face
+ markdown-html-attr-value-face
+ markdown-html-entity-face
+ markdown-html-tag-delimiter-face
+ markdown-html-tag-name-face
+ markdown-inline-code-face
+ markdown-language-info-face
+ markdown-language-keyword-face
+ markdown-pre-face
+ markdown-table-face
</code></pre>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>“Focused editing” tools for Emacs</title>
      <description>Video demo of my configurations for distraction-free writing/coding in GNU Emacs.</description>
      <pubDate>Thu, 16 Jul 2020 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2020-07-16-emacs-focused-editing/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2020-07-16-emacs-focused-editing/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=SLyierm-vyU">https://www.youtube.com/watch?v=SLyierm-vyU</a></p>
         
         <p>In this video I showcase the various tools I have pieced together into a
coherent paradigm for a distraction-free writing workflow.  These are
simple toggles or minor modes that combine built-in and third party
packages with my tweaks and configurations.  The end result is a state
that allows me to concentrate more effectively on the task at hand,
whether it is composing prose or coding.</p>

<p>Note that mixed-font settings for <code>org-mode</code> will depend on the theme
that you use.  My <a href="https://gitlab.com/protesilaos/modus-themes">Modus
themes</a> are designed to
cope well with such demands.</p>

<p>The following code block is excerpted from <a href="https://protesilaos.com/dotemacs">my
dotemacs</a>.  Please bear in mind that I
will not be updating it, so check my dotemacs for the most up-to-date
code I distribute.</p>

<pre><code class="language-elisp">(use-package olivetti
  :ensure
  :defer
  :diminish
  :config
  (setq olivetti-body-width 0.65)
  (setq olivetti-minimum-body-width 72)
  (setq olivetti-recall-visual-line-mode-entry-state t)

  (define-minor-mode prot/olivetti-mode
    "Toggle buffer-local `olivetti-mode' with additional parameters.

Fringes are disabled.  The modeline is hidden, except for
`prog-mode' buffers (see `prot/hidden-mode-line-mode').  The
default typeface is set to a proportionately-spaced family,
except for programming modes (see `prot/variable-pitch-mode').
The cursor becomes a blinking bar, per `prot/cursor-type-mode'."
    :init-value nil
    :global nil
    (if prot/olivetti-mode
        (progn
          (olivetti-mode 1)
          (set-window-fringes (selected-window) 0 0)
          (prot/variable-pitch-mode 1)
          (prot/cursor-type-mode 1)
          (unless (derived-mode-p 'prog-mode)
            (prot/hidden-mode-line-mode 1)))
      (olivetti-mode -1)
      (set-window-fringes (selected-window) nil) ; Use default width
      (prot/variable-pitch-mode -1)
      (prot/cursor-type-mode -1)
      (unless (derived-mode-p 'prog-mode)
        (prot/hidden-mode-line-mode -1))))
  :bind ("C-c o" . prot/olivetti-mode))


(use-package emacs
  :commands prot/hidden-mode-line-mode
  :config
  (setq mode-line-percent-position '(-3 "%p"))
  (setq mode-line-defining-kbd-macro
        (propertize " Macro" 'face 'mode-line-emphasis))
  (setq-default mode-line-format
                '("%e"
                  mode-line-front-space
                  mode-line-mule-info
                  mode-line-client
                  mode-line-modified
                  mode-line-remote
                  mode-line-frame-identification
                  mode-line-buffer-identification
                  "  "
                  mode-line-position
                  (vc-mode vc-mode)
                  " "
                  mode-line-modes
                  " "
                  mode-line-misc-info
                  mode-line-end-spaces))

  (define-minor-mode prot/hidden-mode-line-mode
    "Toggle modeline visibility in the current buffer."
    :init-value nil
    :global nil
    (if prot/hidden-mode-line-mode
        (setq-local mode-line-format nil)
      (kill-local-variable 'mode-line-format)
      (force-mode-line-update))))


(use-package face-remap
  :diminish buffer-face-mode            ; the actual mode
  :commands prot/variable-pitch-mode
  :config
  (define-minor-mode prot/variable-pitch-mode
    "Toggle `variable-pitch-mode', except for `prog-mode'."
    :init-value nil
    :global nil
    (if prot/variable-pitch-mode
        (unless (derived-mode-p 'prog-mode)
          (variable-pitch-mode 1))
      (variable-pitch-mode -1))))


(use-package emacs
  :config
  (setq-default scroll-preserve-screen-position t)
  (setq-default scroll-conservatively 1) ; affects `scroll-step'
  (setq-default scroll-margin 0)

  (define-minor-mode prot/scroll-centre-cursor-mode
    "Toggle centred cursor scrolling behaviour."
    :init-value nil
    :lighter " S="
    :global nil
    (if prot/scroll-centre-cursor-mode
        (setq-local scroll-margin (* (frame-height) 2)
                    scroll-conservatively 0
                    maximum-scroll-margin 0.5)
      (dolist (local '(scroll-preserve-screen-position
                       scroll-conservatively
                       maximum-scroll-margin
                       scroll-margin))
        (kill-local-variable `,local))))

  ;; C-c l is used for `org-store-link'.  The mnemonic for this is to
  ;; focus the Line and also works as a variant of C-l.
  :bind ("C-c L" . prot/scroll-centre-cursor-mode))


(use-package display-line-numbers
  :defer
  :config
  ;; Set absolute line numbers.  A value of "relative" is also useful.
  (setq display-line-numbers-type t)

  (define-minor-mode prot/display-line-numbers-mode
    "Toggle `display-line-numbers-mode' and `hl-line-mode'."
    :init-value nil
    :global nil
    (if prot/display-line-numbers-mode
        (progn
          (display-line-numbers-mode 1)
          (hl-line-mode 1))
      (display-line-numbers-mode -1)
      (hl-line-mode -1)))
  :bind ("&lt;f7&gt;" . prot/display-line-numbers-mode))


(use-package frame
  :commands prot/cursor-type-mode
  :config
  (setq-default cursor-type 'box)
  (setq-default cursor-in-non-selected-windows '(bar . 2))
  (setq-default blink-cursor-blinks 50)
  (setq-default blink-cursor-interval nil) ; 0.75 would be my choice
  (setq-default blink-cursor-delay 0.2)

  (blink-cursor-mode -1)

  (define-minor-mode prot/cursor-type-mode
    "Toggle between static block and pulsing bar cursor."
    :init-value nil
    :global t
    (if prot/cursor-type-mode
        (progn
          (setq-local blink-cursor-interval 0.75
                      cursor-type '(bar . 2)
                      cursor-in-non-selected-windows 'hollow)
          (blink-cursor-mode 1))
      (dolist (local '(blink-cursor-interval
                       cursor-type
                       cursor-in-non-selected-windows))
        (kill-local-variable `,local))
      (blink-cursor-mode -1))))
</code></pre>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Modus themes (Emacs): major review of “nuanced” colours</title>
      <description>Complete report on the thoroughgoing review of some accented background values.</description>
      <pubDate>Wed, 08 Jul 2020 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2020-07-08-modus-themes-nuanced-colours/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2020-07-08-modus-themes-nuanced-colours/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>The following is intended to be read inside of an <code>org-mode</code> buffer, so
I provide the text verbatim for you to read locally.</p>

<p>The short version of this report is that the “nuanced” backgrounds have
undergone a thoroughgoing review.  Now they are more consistent and
better suited to their intended role, which is to provide a subtle
coloured backdrop on which all existing foreground values can be used
without prejudice to the overarching accessibility objective of the
themes (namely, a contrast ratio that is &gt;= 7:1, which corresponds to
the highest standard of its kind: WCAG AAA).</p>

<p>UPDATE 2020-07-16: <a href="https://gitlab.com/protesilaos/modus-themes/-/commit/3306e4bd7d6b9cc880dff6966c4f02352af8beb8">Commit
3306e4bd7</a>
further refines the relevant colours.  The tweaks are subtle, so the
tables in this report are edited accordingly, without further
references.</p>

<hr />

<pre><code class="language-org">#+TITLE: Modus themes: major review of "nuanced" palette subset
#+AUTHOR: Protesilaos Stavrou

* Scope of the review

The palette of each of the Modus themes (Modus Operandi, Modus Vivendi)
contains a subset of accent values that are meant to provide "nuanced"
colouration where appropriate.

Prior to the present review, the "nuanced" colours were inconsistent
and, at times, failed to fulfil their intended role.

The changes documented herein are three-fold:

+ Make all "nuanced" backgrounds more pronounced.
+ Disambiguate and normalise certain "nuanced" foregrounds.
+ Ensure consistency of relevant luminance ratios between all "nuanced"
  colours.

* Tools for measuring relative luminance and previewing colours

This is the formula for the subsequent calculations.  A resulting value
that is &gt;= 7 means that the colour combination is highly accessible and
receives a AAA rating in the WCAG standard (what the Modus themes must
always conform with):

#+begin_src emacs-lisp
;; Code is courtesy of Omar Antolín Camarena:
;; https://github.com/oantolin/emacs-config
(defun wcag (hex)
  (apply #'+
         (cl-mapcar
          (lambda (k x)
            (* k (if (&lt;= x 0.03928)
                     (/ x 12.92)
                   (expt (/ (+ x 0.055) 1.055) 2.4))))
          '(0.2126 0.7152 0.0722)
          (color-name-to-rgb hex))))

(defun clr (c1 c2)
  (let ((ct (/ (+ (wcag c1) 0.05)
               (+ (wcag c2) 0.05))))
    (max ct (/ ct))))
#+end_src

Use =rainbow-mode= to preview the colour values presented below.

#+begin_src emacs-lisp
(use-package rainbow-mode
  :ensure
  :commands rainbow-mode
  :config
  (setq rainbow-ansi-colors nil)
  (setq rainbow-x-colors nil))
#+end_src

* Tables: contrast ratios of foreground colours against "nuanced" backgrounds

The following tables compare all colour values that are intended for
foreground text in a regular buffer against all "nuanced" backgrounds.
The top row has the following (in this order): =red-nuanced=,
=green-nuanced=, =yellow-nuanced=, =blue-nuanced=, =magenta-nuanced=,
=cyan-nuanced=.

The inclusion of the main background values (=bg-main=, =bg-dim=, =bg-alt=) is
only meant to confirm that the "nuanced" backgrounds are close enough to
the base background values and to confirm their newfound consistency
(their ratios are the same in the "new" tables, but not in the "old"
ones).

** Modus Operandi (new vs old)

Pay attention to the different values in the top row and in the
=*-nuanced= set in column 1.

#+NAME: Modus Operandi new
| Colour name             |         | #fff1f0 | #ecf7ed | #fff3da | #f3f3ff | #fdf0ff | #ebf6fa |
|-------------------------+---------+---------+---------+---------+---------+---------+---------|
| red                     | #a60000 |    7.28 |    7.28 |    7.28 |    7.28 |    7.28 |    7.28 |
| red-alt                 | #972500 |    7.40 |    7.40 |    7.40 |    7.39 |    7.40 |    7.40 |
| red-alt-other           | #a0132f |    7.26 |    7.26 |    7.26 |    7.26 |    7.26 |    7.26 |
| green                   | #005e00 |    7.34 |    7.34 |    7.34 |    7.33 |    7.34 |    7.34 |
| green-alt               | #315b00 |    7.27 |    7.27 |    7.26 |    7.26 |    7.26 |    7.27 |
| green-alt-other         | #145c33 |    7.32 |    7.32 |    7.32 |    7.31 |    7.32 |    7.32 |
| yellow                  | #813e00 |    7.28 |    7.28 |    7.28 |    7.27 |    7.28 |    7.28 |
| yellow-alt              | #70480f |    7.28 |    7.28 |    7.28 |    7.27 |    7.28 |    7.28 |
| yellow-alt-other        | #863927 |    7.26 |    7.26 |    7.26 |    7.26 |    7.26 |    7.27 |
| blue                    | #0030a6 |    9.67 |    9.68 |    9.67 |    9.67 |    9.67 |    9.68 |
| blue-alt                | #223fbf |    7.54 |    7.54 |    7.54 |    7.54 |    7.54 |    7.54 |
| blue-alt-other          | #0000bb |   11.12 |   11.12 |   11.11 |   11.11 |   11.11 |   11.12 |
| magenta                 | #721045 |   10.18 |   10.18 |   10.18 |   10.17 |   10.18 |   10.18 |
| magenta-alt             | #8f0075 |    7.87 |    7.87 |    7.87 |    7.87 |    7.87 |    7.87 |
| magenta-alt-other       | #5317ac |    9.15 |    9.15 |    9.15 |    9.14 |    9.15 |    9.15 |
| cyan                    | #00538b |    7.31 |    7.32 |    7.31 |    7.31 |    7.31 |    7.32 |
| cyan-alt                | #30517f |    7.32 |    7.32 |    7.31 |    7.31 |    7.31 |    7.32 |
| cyan-alt-other          | #005a5f |    7.27 |    7.27 |    7.26 |    7.26 |    7.26 |    7.27 |
|-------------------------+---------+---------+---------+---------+---------+---------+---------|
| red-faint               | #7f1010 |    9.62 |    9.62 |    9.62 |    9.61 |    9.62 |    9.62 |
| green-faint             | #104410 |   10.28 |   10.29 |   10.28 |   10.28 |   10.28 |   10.29 |
| yellow-faint            | #5f4400 |    8.25 |    8.25 |    8.25 |    8.25 |    8.25 |    8.25 |
| blue-faint              | #002f88 |   10.83 |   10.84 |   10.83 |   10.83 |   10.83 |   10.84 |
| magenta-faint           | #752f50 |    8.38 |    8.38 |    8.37 |    8.37 |    8.37 |    8.38 |
| cyan-faint              | #12506f |    7.95 |    7.95 |    7.94 |    7.94 |    7.94 |    7.95 |
| red-alt-faint           | #702f00 |    9.11 |    9.11 |    9.11 |    9.10 |    9.11 |    9.11 |
| green-alt-faint         | #30440f |    9.74 |    9.74 |    9.74 |    9.74 |    9.74 |    9.75 |
| yellow-alt-faint        | #5d5000 |    7.31 |    7.31 |    7.30 |    7.30 |    7.30 |    7.31 |
| blue-alt-faint          | #003f78 |    9.63 |    9.63 |    9.63 |    9.62 |    9.63 |    9.63 |
| magenta-alt-faint       | #702565 |    8.92 |    8.92 |    8.91 |    8.91 |    8.91 |    8.92 |
| cyan-alt-faint          | #354f6f |    7.64 |    7.64 |    7.64 |    7.63 |    7.64 |    7.64 |
| red-alt-other-faint     | #7f002f |    9.82 |    9.82 |    9.82 |    9.82 |    9.82 |    9.83 |
| green-alt-other-faint   | #0f443f |    9.95 |    9.95 |    9.95 |    9.94 |    9.95 |    9.95 |
| yellow-alt-other-faint  | #5e3a20 |    9.08 |    9.08 |    9.08 |    9.07 |    9.08 |    9.08 |
| blue-alt-other-faint    | #1f2f6f |   11.27 |   11.27 |   11.26 |   11.26 |   11.26 |   11.27 |
| magenta-alt-other-faint | #5f3f7f |    7.62 |    7.63 |    7.62 |    7.62 |    7.62 |    7.63 |
| cyan-alt-other-faint    | #2e584f |    7.27 |    7.27 |    7.27 |    7.27 |    7.27 |    7.27 |
|-------------------------+---------+---------+---------+---------+---------+---------+---------|
| red-nuanced             | #5f0000 |   12.84 |   12.84 |   12.84 |   12.83 |   12.84 |   12.85 |
| green-nuanced           | #004000 |   11.01 |   11.02 |   11.01 |   11.00 |   11.01 |   11.02 |
| yellow-nuanced          | #3f3000 |   11.68 |   11.68 |   11.68 |   11.67 |   11.68 |   11.69 |
| blue-nuanced            | #201f55 |   13.75 |   13.75 |   13.74 |   13.74 |   13.74 |   13.75 |
| magenta-nuanced         | #541f4f |   11.32 |   11.33 |   11.32 |   11.31 |   11.32 |   11.33 |
| cyan-nuanced            | #0f3360 |   11.48 |   11.48 |   11.48 |   11.47 |   11.48 |   11.48 |
|-------------------------+---------+---------+---------+---------+---------+---------+---------|
| fg-special-cold         | #093060 |   11.91 |   11.91 |   11.90 |   11.90 |   11.90 |   11.91 |
| fg-special-mild         | #184034 |   10.48 |   10.48 |   10.48 |   10.47 |   10.48 |   10.48 |
| fg-special-warm         | #5d3026 |    9.96 |    9.96 |    9.96 |    9.95 |    9.96 |    9.97 |
| fg-special-calm         | #61284f |    9.92 |    9.92 |    9.92 |    9.91 |    9.92 |    9.92 |
|-------------------------+---------+---------+---------+---------+---------+---------+---------|
| fg-main                 | #000000 |   19.09 |   19.09 |   19.08 |   19.08 |   19.08 |   19.10 |
| fg-dim                  | #282828 |   13.40 |   13.40 |   13.40 |   13.39 |   13.40 |   13.41 |
| fg-alt                  | #505050 |    7.33 |    7.33 |    7.33 |    7.32 |    7.33 |    7.33 |
|-------------------------+---------+---------+---------+---------+---------+---------+---------|
| bg-main                 | #ffffff |    1.10 |    1.10 |    1.10 |    1.10 |    1.10 |    1.10 |
| bg-dim                  | #f8f8f8 |    1.04 |    1.04 |    1.04 |    1.04 |    1.04 |    1.04 |
| bg-alt                  | #f0f0f0 |    1.04 |    1.04 |    1.04 |    1.04 |    1.04 |    1.04 |
#+TBLFM: $3='(clr $2 @1$3);%0.2f::$4='(clr $2 @1$4);%0.2f::$5='(clr $2 @1$5);%0.2f::$6='(clr $2 @1$6);%0.2f::$7='(clr $2 @1$7);%0.2f::$8='(clr $2 @1$8);%0.2f

#+NAME: Modus Operandi old
| Colour name             |         | #fef2f2 | #f4faf4 | #fcf6f1 | #f4f4ff | #fff4fc | #f0f6fa |
|-------------------------+---------+---------+---------+---------+---------+---------+---------|
| red                     | #a60000 |    7.32 |    7.56 |    7.47 |    7.34 |    7.48 |    7.35 |
| red-alt                 | #972500 |    7.44 |    7.68 |    7.59 |    7.45 |    7.59 |    7.47 |
| red-alt-other           | #a0132f |    7.30 |    7.54 |    7.45 |    7.32 |    7.45 |    7.33 |
| green                   | #005e00 |    7.38 |    7.62 |    7.53 |    7.39 |    7.53 |    7.41 |
| green-alt               | #315b00 |    7.31 |    7.55 |    7.46 |    7.32 |    7.46 |    7.33 |
| green-alt-other         | #145c33 |    7.36 |    7.60 |    7.51 |    7.37 |    7.51 |    7.39 |
| yellow                  | #813e00 |    7.32 |    7.56 |    7.47 |    7.33 |    7.47 |    7.35 |
| yellow-alt              | #70480f |    7.32 |    7.56 |    7.47 |    7.33 |    7.47 |    7.35 |
| yellow-alt-other        | #863927 |    7.30 |    7.54 |    7.45 |    7.32 |    7.46 |    7.33 |
| blue                    | #0030a6 |    9.73 |   10.05 |    9.93 |    9.74 |    9.93 |    9.76 |
| blue-alt                | #223fbf |    7.58 |    7.83 |    7.74 |    7.60 |    7.74 |    7.61 |
| blue-alt-other          | #0000bb |   11.18 |   11.54 |   11.41 |   11.20 |   11.41 |   11.22 |
| magenta                 | #721045 |   10.24 |   10.57 |   10.45 |   10.25 |   10.45 |   10.27 |
| magenta-alt             | #8f0075 |    7.92 |    8.18 |    8.08 |    7.93 |    8.08 |    7.95 |
| magenta-alt-other       | #5317ac |    9.20 |    9.50 |    9.39 |    9.22 |    9.39 |    9.24 |
| cyan                    | #00538b |    7.35 |    7.60 |    7.51 |    7.37 |    7.51 |    7.38 |
| cyan-alt                | #30517f |    7.36 |    7.60 |    7.51 |    7.37 |    7.51 |    7.38 |
| cyan-alt-other          | #005a5f |    7.31 |    7.55 |    7.46 |    7.32 |    7.46 |    7.33 |
|-------------------------+---------+---------+---------+---------+---------+---------+---------|
| red-faint               | #7f1010 |    9.68 |    9.99 |    9.87 |    9.69 |    9.88 |    9.71 |
| green-faint             | #104410 |   10.34 |   10.68 |   10.55 |   10.36 |   10.56 |   10.38 |
| yellow-faint            | #5f4400 |    8.30 |    8.57 |    8.47 |    8.31 |    8.47 |    8.33 |
| blue-faint              | #002f88 |   10.89 |   11.25 |   11.12 |   10.91 |   11.12 |   10.93 |
| magenta-faint           | #752f50 |    8.42 |    8.70 |    8.60 |    8.44 |    8.60 |    8.46 |
| cyan-faint              | #12506f |    7.99 |    8.25 |    8.15 |    8.00 |    8.16 |    8.02 |
| red-alt-faint           | #702f00 |    9.16 |    9.46 |    9.35 |    9.18 |    9.35 |    9.19 |
| green-alt-faint         | #30440f |    9.80 |   10.12 |   10.00 |    9.81 |   10.00 |    9.83 |
| yellow-alt-faint        | #5d5000 |    7.35 |    7.59 |    7.50 |    7.36 |    7.50 |    7.37 |
| blue-alt-faint          | #003f78 |    9.68 |   10.00 |    9.88 |    9.70 |    9.89 |    9.72 |
| magenta-alt-faint       | #702565 |    8.96 |    9.26 |    9.15 |    8.98 |    9.15 |    9.00 |
| cyan-alt-faint          | #354f6f |    7.68 |    7.93 |    7.84 |    7.69 |    7.84 |    7.71 |
| red-alt-other-faint     | #7f002f |    9.88 |   10.20 |   10.08 |    9.90 |   10.08 |    9.91 |
| green-alt-other-faint   | #0f443f |   10.00 |   10.33 |   10.21 |   10.02 |   10.21 |   10.04 |
| yellow-alt-other-faint  | #5e3a20 |    9.13 |    9.43 |    9.32 |    9.15 |    9.32 |    9.17 |
| blue-alt-other-faint    | #1f2f6f |   11.33 |   11.70 |   11.56 |   11.35 |   11.57 |   11.37 |
| magenta-alt-other-faint | #5f3f7f |    7.67 |    7.92 |    7.82 |    7.68 |    7.83 |    7.69 |
| cyan-alt-other-faint    | #2e584f |    7.31 |    7.55 |    7.46 |    7.33 |    7.47 |    7.34 |
|-------------------------+---------+---------+---------+---------+---------+---------+---------|
| red-nuanced             | #4d0006 |   14.56 |   15.04 |   14.86 |   14.59 |   14.87 |   14.62 |
| green-nuanced           | #003000 |   13.49 |   13.94 |   13.77 |   13.52 |   13.77 |   13.54 |
| yellow-nuanced          | #3a2a00 |   12.70 |   13.12 |   12.97 |   12.73 |   12.97 |   12.75 |
| blue-nuanced            | #001170 |   14.61 |   15.09 |   14.91 |   14.63 |   14.91 |   14.66 |
| magenta-nuanced         | #381050 |   14.14 |   14.60 |   14.43 |   14.16 |   14.43 |   14.19 |
| cyan-nuanced            | #003434 |   12.46 |   12.87 |   12.72 |   12.48 |   12.72 |   12.51 |
|-------------------------+---------+---------+---------+---------+---------+---------+---------|
| fg-special-cold         | #093060 |   11.97 |   12.37 |   12.22 |   11.99 |   12.22 |   12.02 |
| fg-special-mild         | #184034 |   10.54 |   10.88 |   10.75 |   10.56 |   10.76 |   10.58 |
| fg-special-warm         | #5d3026 |   10.02 |   10.35 |   10.22 |   10.04 |   10.23 |   10.06 |
| fg-special-calm         | #61284f |    9.97 |   10.30 |   10.18 |    9.99 |   10.18 |   10.01 |
|-------------------------+---------+---------+---------+---------+---------+---------+---------|
| fg-main                 | #000000 |   19.20 |   19.83 |   19.59 |   19.23 |   19.60 |   19.27 |
| fg-dim                  | #282828 |   13.48 |   13.92 |   13.75 |   13.50 |   13.76 |   13.53 |
| fg-alt                  | #505050 |    7.37 |    7.61 |    7.52 |    7.38 |    7.52 |    7.40 |
|-------------------------+---------+---------+---------+---------+---------+---------+---------|
| bg-main                 | #ffffff |    1.09 |    1.06 |    1.07 |    1.09 |    1.07 |    1.09 |
| bg-dim                  | #f8f8f8 |    1.03 |    1.00 |    1.01 |    1.03 |    1.01 |    1.03 |
| bg-alt                  | #f0f0f0 |    1.04 |    1.08 |    1.06 |    1.04 |    1.06 |    1.05 |
#+TBLFM: $3='(clr $2 @1$3);%0.2f::$4='(clr $2 @1$4);%0.2f::$5='(clr $2 @1$5);%0.2f::$6='(clr $2 @1$6);%0.2f::$7='(clr $2 @1$7);%0.2f::$8='(clr $2 @1$8);%0.2f

** Modus Vivendi (new vs old)

Remembers that different values are used in the following two tables in
the top row and in the =*-nuanced= set of column 1.

#+NAME: Modus Vivendi new
| Colour name             |         | #2c0614 | #001904 | #221000 | #0f0e39 | #230631 | #041529 |
|-------------------------+---------+---------+---------+---------+---------+---------+---------|
| red                     | #ff8059 |    7.42 |    7.44 |    7.43 |    7.43 |    7.43 |    7.41 |
| red-alt                 | #f4923b |    7.89 |    7.91 |    7.90 |    7.90 |    7.90 |    7.88 |
| red-alt-other           | #ff9977 |    8.81 |    8.83 |    8.82 |    8.82 |    8.82 |    8.80 |
| green                   | #44bc44 |    7.45 |    7.47 |    7.46 |    7.46 |    7.46 |    7.45 |
| green-alt               | #80d200 |    9.74 |    9.76 |    9.75 |    9.75 |    9.75 |    9.73 |
| green-alt-other         | #00cd68 |    8.69 |    8.71 |    8.70 |    8.70 |    8.70 |    8.68 |
| yellow                  | #eecc00 |   11.61 |   11.63 |   11.62 |   11.62 |   11.62 |   11.60 |
| yellow-alt              | #cfdf30 |   12.47 |   12.49 |   12.48 |   12.48 |   12.48 |   12.45 |
| yellow-alt-other        | #f0ce43 |   11.91 |   11.93 |   11.92 |   11.92 |   11.92 |   11.90 |
| blue                    | #29aeff |    7.52 |    7.53 |    7.52 |    7.52 |    7.53 |    7.51 |
| blue-alt                | #72a4ff |    7.41 |    7.42 |    7.42 |    7.42 |    7.42 |    7.40 |
| blue-alt-other          | #00bdfa |    8.45 |    8.47 |    8.46 |    8.46 |    8.46 |    8.44 |
| magenta                 | #feacd0 |   10.52 |   10.54 |   10.53 |   10.53 |   10.53 |   10.51 |
| magenta-alt             | #f78fe7 |    8.78 |    8.80 |    8.79 |    8.79 |    8.79 |    8.77 |
| magenta-alt-other       | #b6a0ff |    8.28 |    8.29 |    8.28 |    8.28 |    8.29 |    8.27 |
| cyan                    | #00d3d0 |    9.82 |    9.84 |    9.83 |    9.83 |    9.83 |    9.81 |
| cyan-alt                | #4ae8fc |   12.46 |   12.48 |   12.47 |   12.47 |   12.47 |   12.44 |
| cyan-alt-other          | #6ae4b9 |   11.73 |   11.76 |   11.74 |   11.74 |   11.74 |   11.72 |
|-------------------------+---------+---------+---------+---------+---------+---------+---------|
| red-faint               | #ffa0a0 |    9.44 |    9.46 |    9.45 |    9.44 |    9.45 |    9.43 |
| green-faint             | #88cf88 |    9.91 |    9.93 |    9.92 |    9.92 |    9.92 |    9.90 |
| yellow-faint            | #d2b580 |    9.33 |    9.35 |    9.33 |    9.33 |    9.34 |    9.32 |
| blue-faint              | #92baff |    9.35 |    9.37 |    9.36 |    9.36 |    9.36 |    9.34 |
| magenta-faint           | #e0b2d6 |   10.07 |   10.09 |   10.08 |   10.08 |   10.08 |   10.06 |
| cyan-faint              | #a0bfdf |    9.63 |    9.65 |    9.64 |    9.64 |    9.64 |    9.62 |
| red-alt-faint           | #f5aa80 |    9.57 |    9.59 |    9.58 |    9.58 |    9.58 |    9.56 |
| green-alt-faint         | #a8cf88 |   10.45 |   10.47 |   10.46 |   10.46 |   10.46 |   10.44 |
| yellow-alt-faint        | #cabf77 |    9.82 |    9.84 |    9.83 |    9.83 |    9.83 |    9.81 |
| blue-alt-faint          | #a4b0ff |    8.95 |    8.97 |    8.96 |    8.96 |    8.96 |    8.94 |
| magenta-alt-faint       | #ef9fe4 |    9.40 |    9.42 |    9.41 |    9.41 |    9.41 |    9.39 |
| cyan-alt-faint          | #90c4ed |    9.89 |    9.91 |    9.90 |    9.90 |    9.90 |    9.88 |
| red-alt-other-faint     | #ff9fbf |    9.59 |    9.61 |    9.60 |    9.60 |    9.60 |    9.58 |
| green-alt-other-faint   | #88cfaf |   10.14 |   10.16 |   10.15 |   10.15 |   10.15 |   10.13 |
| yellow-alt-other-faint  | #d0ba95 |    9.74 |    9.76 |    9.75 |    9.75 |    9.76 |    9.73 |
| blue-alt-other-faint    | #8fc5ff |   10.15 |   10.17 |   10.16 |   10.15 |   10.16 |   10.13 |
| magenta-alt-other-faint | #d0b4ff |   10.19 |   10.22 |   10.20 |   10.20 |   10.21 |   10.18 |
| cyan-alt-other-faint    | #a4d0bb |   10.77 |   10.80 |   10.79 |   10.78 |   10.79 |   10.76 |
|-------------------------+---------+---------+---------+---------+---------+---------+---------|
| red-nuanced             | #ffcccc |   12.91 |   12.94 |   12.92 |   12.92 |   12.93 |   12.90 |
| green-nuanced           | #b8e2b8 |   12.78 |   12.81 |   12.79 |   12.79 |   12.79 |   12.76 |
| yellow-nuanced          | #dfdfb0 |   13.40 |   13.43 |   13.41 |   13.41 |   13.42 |   13.39 |
| blue-nuanced            | #bfd9ff |   12.76 |   12.78 |   12.77 |   12.77 |   12.77 |   12.74 |
| magenta-nuanced         | #e5cfef |   12.69 |   12.71 |   12.70 |   12.70 |   12.70 |   12.67 |
| cyan-nuanced            | #a8e5e5 |   13.12 |   13.15 |   13.14 |   13.14 |   13.14 |   13.11 |
|-------------------------+---------+---------+---------+---------+---------+---------+---------|
| fg-special-cold         | #c6eaff |   14.53 |   14.56 |   14.55 |   14.55 |   14.55 |   14.52 |
| fg-special-mild         | #bfebe0 |   14.15 |   14.18 |   14.16 |   14.16 |   14.17 |   14.13 |
| fg-special-warm         | #f8dec0 |   14.17 |   14.20 |   14.18 |   14.18 |   14.19 |   14.16 |
| fg-special-calm         | #fbd6f4 |   14.02 |   14.05 |   14.03 |   14.03 |   14.04 |   14.00 |
|-------------------------+---------+---------+---------+---------+---------+---------+---------|
| fg-main                 | #ffffff |   18.37 |   18.41 |   18.39 |   18.39 |   18.39 |   18.35 |
| fg-dim                  | #e0e6f0 |   14.65 |   14.68 |   14.66 |   14.66 |   14.67 |   14.63 |
| fg-alt                  | #a8a8a8 |    7.72 |    7.74 |    7.73 |    7.73 |    7.73 |    7.72 |
|-------------------------+---------+---------+---------+---------+---------+---------+---------|
| bg-main                 | #000000 |    1.14 |    1.14 |    1.14 |    1.14 |    1.14 |    1.14 |
| bg-dim                  | #110b11 |    1.06 |    1.06 |    1.06 |    1.06 |    1.06 |    1.06 |
| bg-alt                  | #181a20 |    1.06 |    1.06 |    1.06 |    1.06 |    1.06 |    1.06 |
#+TBLFM: $3='(clr $2 @1$3);%0.2f::$4='(clr $2 @1$4);%0.2f::$5='(clr $2 @1$5);%0.2f::$6='(clr $2 @1$6);%0.2f::$7='(clr $2 @1$7);%0.2f::$8='(clr $2 @1$8);%0.2f

#+NAME: Modus Vivendi old
| Colour name             |         | #180505 | #061206 | #18140a | #070722 | #160616 | #091620 |
|-------------------------+---------+---------+---------+---------+---------+---------+---------|
| red                     | #ff8059 |    7.98 |    7.73 |    7.42 |    7.98 |    7.92 |    7.40 |
| red-alt                 | #f4923b |    8.49 |    8.22 |    7.89 |    8.49 |    8.42 |    7.86 |
| red-alt-other           | #ff9977 |    9.48 |    9.18 |    8.81 |    9.48 |    9.40 |    8.78 |
| green                   | #44bc44 |    8.02 |    7.77 |    7.45 |    8.02 |    7.95 |    7.43 |
| green-alt               | #80d200 |   10.48 |   10.15 |    9.74 |   10.48 |   10.39 |    9.71 |
| green-alt-other         | #00cd68 |    9.35 |    9.06 |    8.69 |    9.35 |    9.27 |    8.66 |
| yellow                  | #eecc00 |   12.49 |   12.10 |   11.61 |   12.49 |   12.38 |   11.57 |
| yellow-alt              | #cfdf30 |   13.41 |   12.99 |   12.46 |   13.41 |   13.30 |   12.42 |
| yellow-alt-other        | #f0ce43 |   12.81 |   12.41 |   11.91 |   12.81 |   12.70 |   11.87 |
| blue                    | #29aeff |    8.09 |    7.83 |    7.52 |    8.09 |    8.02 |    7.49 |
| blue-alt                | #72a4ff |    7.97 |    7.72 |    7.41 |    7.97 |    7.90 |    7.38 |
| blue-alt-other          | #00bdfa |    9.09 |    8.81 |    8.45 |    9.09 |    9.01 |    8.42 |
| magenta                 | #feacd0 |   11.32 |   10.96 |   10.52 |   11.32 |   11.22 |   10.48 |
| magenta-alt             | #f78fe7 |    9.45 |    9.15 |    8.78 |    9.45 |    9.37 |    8.75 |
| magenta-alt-other       | #b6a0ff |    8.90 |    8.63 |    8.28 |    8.90 |    8.83 |    8.25 |
| cyan                    | #00d3d0 |   10.57 |   10.24 |    9.82 |   10.57 |   10.48 |    9.79 |
| cyan-alt                | #4ae8fc |   13.40 |   12.98 |   12.45 |   13.40 |   13.29 |   12.41 |
| cyan-alt-other          | #6ae4b9 |   12.62 |   12.23 |   11.73 |   12.62 |   12.51 |   11.69 |
|-------------------------+---------+---------+---------+---------+---------+---------+---------|
| red-faint               | #ffa0a0 |   10.15 |    9.83 |    9.44 |   10.15 |   10.07 |    9.40 |
| green-faint             | #88cf88 |   10.66 |   10.33 |    9.91 |   10.66 |   10.57 |    9.87 |
| yellow-faint            | #d2b580 |   10.03 |    9.72 |    9.33 |   10.03 |    9.95 |    9.29 |
| blue-faint              | #92baff |   10.06 |    9.75 |    9.35 |   10.06 |    9.97 |    9.32 |
| magenta-faint           | #e0b2d6 |   10.83 |   10.49 |   10.07 |   10.83 |   10.74 |   10.03 |
| cyan-faint              | #a0bfdf |   10.36 |   10.04 |    9.63 |   10.36 |   10.28 |    9.60 |
| red-alt-faint           | #f5aa80 |   10.30 |    9.98 |    9.57 |   10.30 |   10.21 |    9.54 |
| green-alt-faint         | #a8cf88 |   11.24 |   10.89 |   10.45 |   11.24 |   11.15 |   10.41 |
| yellow-alt-faint        | #cabf77 |   10.57 |   10.24 |    9.82 |   10.57 |   10.48 |    9.79 |
| blue-alt-faint          | #a4b0ff |    9.63 |    9.33 |    8.95 |    9.63 |    9.55 |    8.92 |
| magenta-alt-faint       | #ef9fe4 |   10.12 |    9.80 |    9.40 |   10.12 |   10.03 |    9.37 |
| cyan-alt-faint          | #90c4ed |   10.64 |   10.31 |    9.89 |   10.64 |   10.55 |    9.85 |
| red-alt-other-faint     | #ff9fbf |   10.32 |   10.00 |    9.59 |   10.32 |   10.23 |    9.56 |
| green-alt-other-faint   | #88cfaf |   10.91 |   10.57 |   10.14 |   10.91 |   10.82 |   10.10 |
| yellow-alt-other-faint  | #d0ba95 |   10.48 |   10.16 |    9.74 |   10.48 |   10.39 |    9.71 |
| blue-alt-other-faint    | #8fc5ff |   10.91 |   10.57 |   10.14 |   10.92 |   10.82 |   10.11 |
| magenta-alt-other-faint | #d0b4ff |   10.97 |   10.62 |   10.19 |   10.97 |   10.87 |   10.16 |
| cyan-alt-other-faint    | #a4d0bb |   11.59 |   11.23 |   10.77 |   11.59 |   11.49 |   10.74 |
|-------------------------+---------+---------+---------+---------+---------+---------+---------|
| red-nuanced             | #ffcccc |   13.89 |   13.46 |   12.91 |   13.89 |   13.77 |   12.87 |
| green-nuanced           | #b0f0b0 |   15.00 |   14.53 |   13.94 |   15.00 |   14.87 |   13.89 |
| yellow-nuanced          | #e0e0bb |   14.63 |   14.18 |   13.60 |   14.63 |   14.51 |   13.55 |
| blue-nuanced            | #ccccff |   12.84 |   12.44 |   11.94 |   12.85 |   12.73 |   11.90 |
| magenta-nuanced         | #eeccee |   13.65 |   13.23 |   12.69 |   13.65 |   13.54 |   12.65 |
| cyan-nuanced            | #aaeeee |   15.22 |   14.74 |   14.15 |   15.22 |   15.09 |   14.10 |
|-------------------------+---------+---------+---------+---------+---------+---------+---------|
| fg-special-cold         | #c6eaff |   15.63 |   15.15 |   14.53 |   15.64 |   15.50 |   14.48 |
| fg-special-mild         | #bfebe0 |   15.22 |   14.75 |   14.15 |   15.22 |   15.09 |   14.10 |
| fg-special-warm         | #f8dec0 |   15.24 |   14.77 |   14.17 |   15.25 |   15.12 |   14.12 |
| fg-special-calm         | #fbd6f4 |   15.08 |   14.61 |   14.02 |   15.08 |   14.95 |   13.97 |
|-------------------------+---------+---------+---------+---------+---------+---------+---------|
| fg-main                 | #ffffff |   19.76 |   19.14 |   18.37 |   19.76 |   19.59 |   18.30 |
| fg-dim                  | #e0e6f0 |   15.76 |   15.27 |   14.65 |   15.76 |   15.63 |   14.60 |
| fg-alt                  | #a8a8a8 |    8.31 |    8.05 |    7.72 |    8.31 |    8.24 |    7.70 |
|-------------------------+---------+---------+---------+---------+---------+---------+---------|
| bg-main                 | #000000 |    1.06 |    1.10 |    1.14 |    1.06 |    1.07 |    1.15 |
| bg-dim                  | #110b11 |    1.02 |    1.02 |    1.06 |    1.02 |    1.01 |    1.06 |
| bg-alt                  | #181a20 |    1.14 |    1.10 |    1.06 |    1.14 |    1.13 |    1.05 |
#+TBLFM: $3='(clr $2 @1$3);%0.2f::$4='(clr $2 @1$4);%0.2f::$5='(clr $2 @1$5);%0.2f::$6='(clr $2 @1$6);%0.2f::$7='(clr $2 @1$7);%0.2f::$8='(clr $2 @1$8);%0.2f
</code></pre>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Modus themes (Emacs): new “faint syntax” option</title>
      <description>Report on the new user-facing option for desaturated syntax highlighting.</description>
      <pubDate>Sat, 04 Jul 2020 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2020-07-04-modus-themes-faint-colours/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2020-07-04-modus-themes-faint-colours/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>The following is intended to be read inside of an <code>org-mode</code> buffer, so
I provide the text verbatim for you to read locally.</p>

<p>The gist is that users of my highly-accessible (and highly-customisable)
themes for Emacs now have the option to reduce the saturation in modes
where syntax highlighting takes place.</p>

<hr />

<pre><code class="language-org">#+TITLE: Initial implementation of the "faint syntax colours" option
#+AUTHOR: Protesilaos Stavrou

* Description of the new user-facing option

Users can now opt in to the customisation option that desaturates the
colours that are used to highlight code syntax.  This is made possible
by a new palette subset that consists of carefully-selected colours.
The idea is to make code less intense, but retain a sense of visual
order.

The new =defcustom= symbols:

+ =modus-operandi-theme-faint-syntax=
+ =modus-vivendi-theme-faint-syntax=

While the current implementation is considered "good enough", there may
still be improvements to be made.  Feedback is always welcome!

* Tools for measuring relative luminance and previewing colours

This is the formula for the subsequent calculations.  A resulting value
that is &gt;= 7 means that the colour combination is highly accessible and
receives a AAA rating in the WCAG standard (what the Modus themes must
always conform with):

#+begin_src emacs-lisp
;; Code is courtesy of Omar Antolín Camarena:
;; https://github.com/oantolin/emacs-config
(defun wcag (hex)
  (apply #'+
         (cl-mapcar
          (lambda (k x)
            (* k (if (&lt;= x 0.03928)
                     (/ x 12.92)
                   (expt (/ (+ x 0.055) 1.055) 2.4))))
          '(0.2126 0.7152 0.0722)
          (color-name-to-rgb hex))))

(defun clr (c1 c2)
  (let ((ct (/ (+ (wcag c1) 0.05)
               (+ (wcag c2) 0.05))))
    (max ct (/ ct))))
#+end_src

Use =rainbow-mode= to preview the colour values presented below.

#+begin_src emacs-lisp
(use-package rainbow-mode
  :ensure
  :commands rainbow-mode
  :config
  (setq rainbow-ansi-colors nil)
  (setq rainbow-x-colors nil))
#+end_src

* Tables with new "faint" colours

The following tables show the contrast ratio of the new "faint" accent
values relative to: =bg-main=, =bg-dim=, =bg-alt=, =bg-hl-line= (in this
order).

#+NAME: Modus Operandi faint accent values
| Colour name             |         | #ffffff | #f8f8f8 | #f0f0f0 | #f2eff3 |
|-------------------------+---------+---------+---------+---------+---------|
| red-faint               | #7f1010 |   10.58 |    9.97 |    9.29 |    9.28 |
| red-alt-faint           | #702f00 |   10.02 |    9.44 |    8.79 |    8.79 |
| red-alt-other-faint     | #7f002f |   10.81 |   10.17 |    9.48 |    9.48 |
| green-faint             | #1f441f |   11.02 |   10.38 |    9.67 |    9.67 |
| green-alt-faint         | #30440f |   10.72 |   10.09 |    9.40 |    9.40 |
| green-alt-other-faint   | #0f443f |   10.94 |   10.30 |    9.60 |    9.60 |
| yellow-faint            | #5f4400 |    9.08 |    8.55 |    7.97 |    7.96 |
| yellow-alt-faint        | #5d5000 |    8.04 |    7.57 |    7.05 |    7.05 |
| yellow-alt-other-faint  | #5e3a20 |    9.99 |    9.41 |    8.77 |    8.76 |
| blue-faint              | #002f88 |   11.92 |   11.22 |   10.46 |   10.45 |
| blue-alt-faint          | #003f78 |   10.59 |    9.98 |    9.30 |    9.29 |
| blue-alt-other-faint    | #1f2f6f |   12.39 |   11.67 |   10.88 |   10.87 |
| magenta-faint           | #752f50 |    9.22 |    8.68 |    8.09 |    8.08 |
| magenta-alt-faint       | #702565 |    9.81 |    9.23 |    8.60 |    8.60 |
| magenta-alt-other-faint | #5f3f7f |    8.39 |    7.90 |    7.36 |    7.35 |
| cyan-faint              | #12506f |    8.74 |    8.23 |    7.67 |    7.66 |
| cyan-alt-faint          | #354f6f |    8.40 |    7.91 |    7.37 |    7.37 |
| cyan-alt-other-faint    | #2e584f |    8.00 |    7.53 |    7.02 |    7.02 |
#+TBLFM: $3='(clr $2 @1$3);%0.2f :: $4='(clr $2 @1$4);%0.2f :: $5='(clr $2 @1$5);%0.2f :: $6='(clr $2 @1$6);%0.2f

#+NAME: Modus Vivendi faint accent values
| Colour name             |         | #000000 | #110b11 | #181a20 | #151823 |
|-------------------------+---------+---------+---------+---------+---------|
| red-faint               | #ffa0a0 |   10.79 |    9.99 |    8.93 |    9.09 |
| red-alt-faint           | #f5aa80 |   10.94 |   10.14 |    9.06 |    9.22 |
| red-alt-other-faint     | #ff9fbf |   10.96 |   10.15 |    9.08 |    9.24 |
| green-faint             | #88cf88 |   11.33 |   10.49 |    9.38 |    9.54 |
| green-alt-faint         | #a8cf88 |   11.95 |   11.06 |    9.89 |   10.07 |
| green-alt-other-faint   | #88cfaf |   11.59 |   10.73 |    9.60 |    9.77 |
| yellow-faint            | #d2b580 |   10.66 |    9.87 |    8.83 |    8.98 |
| yellow-alt-faint        | #cabf77 |   11.23 |   10.40 |    9.30 |    9.46 |
| yellow-alt-other-faint  | #d0ba95 |   11.14 |   10.32 |    9.23 |    9.39 |
| blue-faint              | #92baff |   10.69 |    9.90 |    8.85 |    9.01 |
| blue-alt-faint          | #a4b0ff |   10.23 |    9.48 |    8.47 |    8.62 |
| blue-alt-other-faint    | #8fc5ff |   11.60 |   10.74 |    9.61 |    9.77 |
| magenta-faint           | #e0b2d6 |   11.51 |   10.66 |    9.53 |    9.70 |
| magenta-alt-faint       | #ef9fe4 |   10.75 |    9.96 |    8.90 |    9.06 |
| magenta-alt-other-faint | #d0b4ff |   11.65 |   10.79 |    9.65 |    9.82 |
| cyan-faint              | #a0bfdf |   11.01 |   10.20 |    9.12 |    9.28 |
| cyan-alt-faint          | #90c4ed |   11.30 |   10.47 |    9.36 |    9.53 |
| cyan-alt-other-faint    | #a4d0bb |   12.32 |   11.41 |   10.20 |   10.38 |
#+TBLFM: $3='(clr $2 @1$3);%0.2f :: $4='(clr $2 @1$4);%0.2f :: $5='(clr $2 @1$5);%0.2f :: $6='(clr $2 @1$6);%0.2f

* Tables with all accent values for code syntax

For the sake of completeness, the following tables present all colours
that are meant to be used by =font-lock= and relevant modes.  The method
is the same as above, with the regard to the background values these are
compared against.

#+NAME: Modus Operandi accent values
| Colour name             |         | #ffffff | #f8f8f8 | #f0f0f0 | #f2eff3 |
|-------------------------+---------+---------+---------+---------+---------|
| red                     | #a60000 |    8.01 |    7.54 |    7.03 |    7.03 |
| red-alt                 | #972500 |    8.14 |    7.66 |    7.14 |    7.14 |
| red-alt-other           | #a0132f |    7.99 |    7.52 |    7.01 |    7.01 |
| green                   | #005e00 |    8.07 |    7.60 |    7.08 |    7.08 |
| green-alt               | #315b00 |    7.99 |    7.53 |    7.01 |    7.01 |
| green-alt-other         | #145c33 |    8.05 |    7.58 |    7.06 |    7.06 |
| yellow                  | #813e00 |    8.01 |    7.54 |    7.03 |    7.02 |
| yellow-alt              | #70480f |    8.01 |    7.54 |    7.03 |    7.02 |
| yellow-alt-other        | #863927 |    7.99 |    7.52 |    7.01 |    7.01 |
| blue                    | #0030a6 |   10.64 |   10.02 |    9.34 |    9.33 |
| blue-alt                | #223fbf |    8.30 |    7.81 |    7.28 |    7.28 |
| blue-alt-other          | #0000bb |   12.23 |   11.51 |   10.73 |   10.72 |
| magenta                 | #721045 |   11.20 |   10.54 |    9.83 |    9.82 |
| magenta-alt             | #8f0075 |    8.66 |    8.15 |    7.60 |    7.59 |
| magenta-alt-other       | #5317ac |   10.07 |    9.48 |    8.83 |    8.83 |
| cyan                    | #00538b |    8.05 |    7.58 |    7.06 |    7.06 |
| cyan-alt                | #30517f |    8.05 |    7.58 |    7.06 |    7.06 |
| cyan-alt-other          | #005a5f |    7.99 |    7.53 |    7.01 |    7.01 |
|-------------------------+---------+---------+---------+---------+---------|
| red-faint               | #7f1010 |   10.58 |    9.97 |    9.29 |    9.28 |
| red-alt-faint           | #702f00 |   10.02 |    9.44 |    8.79 |    8.79 |
| red-alt-other-faint     | #7f002f |   10.81 |   10.17 |    9.48 |    9.48 |
| green-faint             | #1f441f |   11.02 |   10.38 |    9.67 |    9.67 |
| green-alt-faint         | #30440f |   10.72 |   10.09 |    9.40 |    9.40 |
| green-alt-other-faint   | #0f443f |   10.94 |   10.30 |    9.60 |    9.60 |
| yellow-faint            | #5f4400 |    9.08 |    8.55 |    7.97 |    7.96 |
| yellow-alt-faint        | #5d5000 |    8.04 |    7.57 |    7.05 |    7.05 |
| yellow-alt-other-faint  | #5e3a20 |    9.99 |    9.41 |    8.77 |    8.76 |
| blue-faint              | #002f88 |   11.92 |   11.22 |   10.46 |   10.45 |
| blue-alt-faint          | #003f78 |   10.59 |    9.98 |    9.30 |    9.29 |
| blue-alt-other-faint    | #1f2f6f |   12.39 |   11.67 |   10.88 |   10.87 |
| magenta-faint           | #752f50 |    9.22 |    8.68 |    8.09 |    8.08 |
| magenta-alt-faint       | #702565 |    9.81 |    9.23 |    8.60 |    8.60 |
| magenta-alt-other-faint | #5f3f7f |    8.39 |    7.90 |    7.36 |    7.35 |
| cyan-faint              | #12506f |    8.74 |    8.23 |    7.67 |    7.66 |
| cyan-alt-faint          | #354f6f |    8.40 |    7.91 |    7.37 |    7.37 |
| cyan-alt-other-faint    | #2e584f |    8.00 |    7.53 |    7.02 |    7.02 |
#+TBLFM: $3='(clr $2 @1$3);%0.2f :: $4='(clr $2 @1$4);%0.2f :: $5='(clr $2 @1$5);%0.2f :: $6='(clr $2 @1$6);%0.2f

#+NAME: Modus Vivendi accent values
| Colour name             |         | #000000 | #110b11 | #181a20 | #151823 |
|-------------------------+---------+---------+---------+---------+---------|
| red                     | #ff8059 |    8.48 |    7.86 |    7.03 |    7.15 |
| red-alt                 | #f4923b |    9.02 |    8.35 |    7.47 |    7.60 |
| red-alt-other           | #ff9977 |   10.07 |    9.33 |    8.34 |    8.49 |
| green                   | #44bc44 |    8.52 |    7.89 |    7.06 |    7.18 |
| green-alt               | #80d200 |   11.14 |   10.31 |    9.22 |    9.38 |
| green-alt-other         | #00cd68 |    9.93 |    9.20 |    8.23 |    8.37 |
| yellow                  | #eecc00 |   13.27 |   12.29 |   10.99 |   11.18 |
| yellow-alt              | #cfdf30 |   14.25 |   13.20 |   11.80 |   12.01 |
| yellow-alt-other        | #f0ce43 |   13.61 |   12.61 |   11.28 |   11.47 |
| blue                    | #29aeff |    8.59 |    7.96 |    7.12 |    7.24 |
| blue-alt                | #72a4ff |    8.47 |    7.84 |    7.01 |    7.14 |
| blue-alt-other          | #00bdfa |    9.66 |    8.95 |    8.00 |    8.14 |
| magenta                 | #feacd0 |   12.03 |   11.14 |    9.96 |   10.13 |
| magenta-alt             | #f78fe7 |   10.04 |    9.30 |    8.31 |    8.46 |
| magenta-alt-other       | #b6a0ff |    9.46 |    8.76 |    7.84 |    7.97 |
| cyan                    | #00d3d0 |   11.23 |   10.40 |    9.30 |    9.46 |
| cyan-alt                | #4ae8fc |   14.24 |   13.19 |   11.79 |   12.00 |
| cyan-alt-other          | #6ae4b9 |   13.41 |   12.42 |   11.11 |   11.30 |
|-------------------------+---------+---------+---------+---------+---------|
| red-faint               | #ffa0a0 |   10.79 |    9.99 |    8.93 |    9.09 |
| red-alt-faint           | #f5aa80 |   10.94 |   10.14 |    9.06 |    9.22 |
| red-alt-other-faint     | #ff9fbf |   10.96 |   10.15 |    9.08 |    9.24 |
| green-faint             | #88cf88 |   11.33 |   10.49 |    9.38 |    9.54 |
| green-alt-faint         | #a8cf88 |   11.95 |   11.06 |    9.89 |   10.07 |
| green-alt-other-faint   | #88cfaf |   11.59 |   10.73 |    9.60 |    9.77 |
| yellow-faint            | #d2b580 |   10.66 |    9.87 |    8.83 |    8.98 |
| yellow-alt-faint        | #cabf77 |   11.23 |   10.40 |    9.30 |    9.46 |
| yellow-alt-other-faint  | #d0ba95 |   11.14 |   10.32 |    9.23 |    9.39 |
| blue-faint              | #92baff |   10.69 |    9.90 |    8.85 |    9.01 |
| blue-alt-faint          | #a4b0ff |   10.23 |    9.48 |    8.47 |    8.62 |
| blue-alt-other-faint    | #8fc5ff |   11.60 |   10.74 |    9.61 |    9.77 |
| magenta-faint           | #e0b2d6 |   11.51 |   10.66 |    9.53 |    9.70 |
| magenta-alt-faint       | #ef9fe4 |   10.75 |    9.96 |    8.90 |    9.06 |
| magenta-alt-other-faint | #d0b4ff |   11.65 |   10.79 |    9.65 |    9.82 |
| cyan-faint              | #a0bfdf |   11.01 |   10.20 |    9.12 |    9.28 |
| cyan-alt-faint          | #90c4ed |   11.30 |   10.47 |    9.36 |    9.53 |
| cyan-alt-other-faint    | #a4d0bb |   12.32 |   11.41 |   10.20 |   10.38 |
#+TBLFM: $3='(clr $2 @1$3);%0.2f :: $4='(clr $2 @1$4);%0.2f :: $5='(clr $2 @1$5);%0.2f :: $6='(clr $2 @1$6);%0.2f
</code></pre>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Released Modus themes 0.10.0</title>
      <description>Information about the latest release of my highly-accessible themes for Emacs.</description>
      <pubDate>Wed, 24 Jun 2020 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2020-06-24-modus-themes-0-10-0/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2020-06-24-modus-themes-0-10-0/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>I just published version <code>0.10.0</code> of the Modus themes.  These are my
highly-accessible themes for GNU Emacs.  They conform with the WCAG AAA
standard for colour contrast accessibility (a minimum contrast ratio of
7:1 between the foreground and background values).  You can find the
packages on GNU ELPA, MELPA, MELPA stable:</p>

<ul>
  <li><code>modus-operandi-theme</code> (light)</li>
  <li><code>modus-vivendi-theme</code> (dark)</li>
</ul>

<p>Below are the release notes.</p>

<hr />

<h2>Modus Operandi and Modus Vivendi version 0.10.0</h2>

<p>By Protesilaos Stavrou <a href="mailto:info@protesilaos.com">info@protesilaos.com</a> on 2020-06-24</p>

<p>This entry records the changes since version 0.9.0 (2020-06-03).  The
present release is focused on stability and internal improvements.</p>

<h2>Fixes and adjustments</h2>

<p>Basil L. Contovounisios, aka @basil-conto, (and also a contributor to
core Emacs) sent several patches that do the following:</p>

<ul>
  <li>
    <p>Fix top-level parentheses so that the results of
<code>custom-theme-set-faces</code> and <code>custom-theme-set-variables</code> are not
passed as arguments to the first <code>custom-theme-set-faces</code>.</p>
  </li>
  <li>
    <p>Fix the docstrings of the custom <code>modus-theme-*</code> faces.</p>
  </li>
  <li>
    <p>Simplify the syntax of properties assigned to each face.</p>
  </li>
  <li>
    <p>Improve the way styles are inherited by Dired and Ibuffer.</p>
  </li>
</ul>

<p>Basil also pointed out an inconsistency with regard to an unwanted
underline effect for the <code>doom-modeline-urgent</code> face in Modus Vivendi.
It was promptly removed.</p>

<p>From my part, I fixed issues 46 and 51 that concerned the way the
compiler would evaluate each theme’s palette.  The palette is now
defined as a constant.  Further information:</p>

<ul>
  <li>https://gitlab.com/protesilaos/modus-themes/-/issues/46</li>
  <li>https://gitlab.com/protesilaos/modus-themes/-/issues/51</li>
</ul>

<h2>Improvements to existing faces</h2>

<p>André Alexandre Gomes (@aadcg) provided valuable feedback and
suggestions in issue 50 on the redesign of several <code>org-mode</code> faces.</p>

<p>The thread is long and contains lots of screenshots:
https://gitlab.com/protesilaos/modus-themes/-/issues/50</p>

<p>The changes in outline:</p>

<ul>
  <li>
    <p>Org checkboxes have a subtle background which gives them a more
pronounced appearance while retaining their overall simplicity.</p>
  </li>
  <li>
    <p>Org dates use a more saturated variant of cyan than they did before.
It helps distinguish them from their context.  Especially true for
dates inside of tables.</p>
  </li>
  <li>
    <p>Org agenda dates have also undergone a slight review to match the
above.</p>
  </li>
  <li>
    <p>Org time grid now uses a more appropriate foreground colour, which has
been designed specifically for unfocused context.</p>
  </li>
  <li>
    <p>Org todo keywords use a more semantically-correct variant of red,
rather than the purple one they had before.</p>
  </li>
  <li>
    <p>Org statistics’ cookies for pending tasks use a red variant as well
rather than the previous yellow one, in the interest of consistency
and to avoid exaggerations.</p>
  </li>
</ul>

<h2>Other internal refinements</h2>

<ul>
  <li>
    <p>Subtle review of the Modus Vivendi palette.  In short, it addresses:</p>

    <ul>
      <li>
        <p>Imbalanced levels of luminance and inconsistent differences in hue
between them and their neighbouring colours (e.g. the greens between
them, and the greens next to the yellows in the context of syntax
highlighting).  The result was that they would create an undesirable
emphatic “pop out” effect when placed close to more moderate
colours.</p>
      </li>
      <li>
        <p>Differences in luminance and hue could lead to scenaria where two
colours could be conflated with each other or otherwise fail to
perform their intended function.</p>
      </li>
      <li>
        <p>The complete report is on my website:
https://protesilaos.com/codelog/2020-06-13-modus-vivendi-palette-review/</p>
      </li>
    </ul>
  </li>
  <li>
    <p>Major review of the <code>diredfl</code> faces, in the interest of improved
readability and harmony between the various colours.  This benefits
from the palette changes in Modus Vivendi, but also from a similar
review to Modus Operandi that was documented in version 0.9.0.</p>
  </li>
  <li>
    <p>Refactor the names of dedicates colours for “marking” purposes.  These
are used in Dired, Ibuffer, Proced, etc.  Then apply them consistently
throughout each theme.</p>
  </li>
  <li>
    <p>Make sure that <code>stripes</code> uses the same colours as <code>hl-line-mode</code>.</p>
  </li>
  <li>
    <p>Let symlinks use a more appropriate colour in Dired and Trashed.</p>
  </li>
  <li>
    <p>Refine the use of colour in <code>magit-tag</code>, <code>eshell-prompt</code>,
<code>message-header-name</code>, <code>log-edit-header</code>, <code>change-log-function</code>,
<code>message-mml</code>, <code>message-header-name</code>, <code>message-separator</code>.  These are
subtle (i.e. difficult) tweaks that improve the overall presentation
in context.</p>
  </li>
  <li>
    <p>Make diff indicators not use an unnecessary background when the
user-facing option for “subtle diffs” is enabled (check the README for
the exact name of this option).  This ensures consistency between the
indicators and the actual scope of the diffs.</p>
  </li>
  <li>
    <p>Add support for the <code>minibuffer-line</code> package and extend existing
support of the faces used in the built-in Emacs info pages.</p>
  </li>
</ul>

<p>My thanks to Basil and André for their contributions!</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Modus Vivendi theme subtle palette review (Emacs)</title>
      <description>Report on the subtle refinements to some of Modus Vivendi' colours.</description>
      <pubDate>Sat, 13 Jun 2020 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2020-06-13-modus-vivendi-palette-review/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2020-06-13-modus-vivendi-palette-review/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>The following is intended to be read inside of an <code>org-mode</code> buffer, so
I provide the text verbatim for you to read locally.</p>

<p>The changes are subtle.  The point is that minor tweaks like these
require a lot of testing.  Read the report below for the technicalities.
These changes will be pushed to <code>master</code> later today (2020-06-13).</p>

<hr />

<pre><code class="language-org">#+TITLE: Modus Vivendi minor palette review for 2020-06-13
#+AUTHOR: Protesilaos Stavrou

* Scope of these refinements

This review tackles two types of subtle, yet important, inconsistencies
in five values:

1. Imbalanced levels of luminance and inconsistent differences in hue
   between them and their neighbouring colours (e.g. the greens between
   them, and the greens next to the yellows in the context of syntax
   highlighting).  The result was that they would create an undesirable
   emphatic 'pop out' effect when placed close to more moderate colours.

2. Differences in luminance and hue could lead to scenaria where two
   colours could be conflated with each other or otherwise impede fail
   to perform their intended function.

* Affected colours

The following table presents the affected colour values.  To visualise
the hexadecimal RGB values, you need to enable the =rainbow-mode= package
and then type in =M-x rainbow-mode=.

| Colour name       | Old     | New     |
|-------------------+---------+---------|
| green-alt         | #58dd13 | #80d200 |
| green-alt-other   | #90d800 | #00cd68 |
| yellow-alt        | #e5f040 | #cfdf30 |
| blue-alt-other    | #00baf4 | #00bdfa |

Sample configuration for the external package you may want to use:

#+begin_src emacs-lisp
(use-package rainbow-mode
  :ensure
  :commands rainbow-mode
  :config
  (setq rainbow-ansi-colors nil)
  (setq rainbow-x-colors nil))
#+end_src

* New contrast ratios against relevant background values

These tables show the differences in contrast between the main accent
values and all backgrounds that are meant to be combined with them.  The
backgrounds are, in order: =bg-main=, =bg-dim=, =bg-alt=, =bg-hl-line=.

** WCAG formula

This is the piece of Elisp used to perform these calculations, which
implements the WCAG formula (courtesy of [[https://github.com/oantolin/live-completions/issues/2][Omar Antolín Camarena]]):

#+begin_src emacs-lisp
(defun wcag (hex)
  (apply #'+
         (cl-mapcar
          (lambda (k x)
            (* k (if (&lt;= x 0.03928)
                     (/ x 12.92)
                   (expt (/ (+ x 0.055) 1.055) 2.4))))
          '(0.2126 0.7152 0.0722)
          (color-name-to-rgb hex))))

(defun clr (c1 c2)
  (let ((ct (/ (+ (wcag c1) 0.05)
               (+ (wcag c2) 0.05))))
    (max ct (/ ct))))
#+end_src

** Table with changed colours

Old and new colour values, with their respective contrast ratios.

| Colour name     |         | #000000 | #110b11 | #181a20 | #151823 |
|-----------------+---------+---------+---------+---------+---------|
| green-alt       | #58dd13 |   11.77 |   10.90 |    9.75 |    9.91 |
| green-alt-other | #90d800 |   12.01 |   11.12 |    9.95 |   10.12 |
| yellow-alt      | #e5f040 |   16.87 |   15.62 |   13.97 |   14.21 |
| blue            | #33beff |    9.95 |    9.21 |    8.24 |    8.38 |
| blue-alt-other  | #00baf4 |    9.33 |    8.64 |    7.73 |    7.86 |
|-----------------+---------+---------+---------+---------+---------|
| green-alt       | #80d200 |   11.14 |   10.31 |    9.22 |    9.38 |
| green-alt-other | #00cd68 |    9.93 |    9.20 |    8.23 |    8.37 |
| yellow-alt      | #cfdf30 |   14.25 |   13.20 |   11.80 |   12.01 |
| blue            | #29aeff |    8.59 |    7.96 |    7.12 |    7.24 |
| blue-alt-other  | #00bdfa |    9.66 |    8.95 |    8.00 |    8.14 |
#+TBLFM: $3='(clr $2 @1$3);%0.2f::$4='(clr $2 @1$4);%0.2f::$5='(clr $2 @1$5);%0.2f::$6='(clr $2 @1$6);%0.2f


** Old palette with main accent values

Complete picture of the original palette for the main accent values.

| Colour name       |         | #000000 | #110b11 | #181a20 | #151823 |
|-------------------+---------+---------+---------+---------+---------|
| red               | #ff8059 |    8.48 |    7.86 |    7.03 |    7.15 |
| red-alt           | #f4923b |    9.02 |    8.35 |    7.47 |    7.60 |
| red-alt-other     | #ff9977 |   10.07 |    9.33 |    8.34 |    8.49 |
| green             | #44bc44 |    8.52 |    7.89 |    7.06 |    7.18 |
| green-alt         | #58dd13 |   11.77 |   10.90 |    9.75 |    9.91 |
| green-alt-other   | #90d800 |   12.01 |   11.12 |    9.95 |   10.12 |
| yellow            | #eecc00 |   13.27 |   12.29 |   10.99 |   11.18 |
| yellow-alt        | #e5f040 |   16.87 |   15.62 |   13.97 |   14.21 |
| yellow-alt-other  | #f0ce43 |   13.61 |   12.61 |   11.28 |   11.47 |
| blue              | #33beff |    9.95 |    9.21 |    8.24 |    8.38 |
| blue-alt          | #72a4ff |    8.47 |    7.84 |    7.01 |    7.14 |
| blue-alt-other    | #00baf4 |    9.33 |    8.64 |    7.73 |    7.86 |
| magenta           | #feacd0 |   12.03 |   11.14 |    9.96 |   10.13 |
| magenta-alt       | #f78fe7 |   10.04 |    9.30 |    8.31 |    8.46 |
| magenta-alt-other | #b6a0ff |    9.46 |    8.76 |    7.84 |    7.97 |
| cyan              | #00d3d0 |   11.23 |   10.40 |    9.30 |    9.46 |
| cyan-alt          | #4ae8fc |   14.24 |   13.19 |   11.79 |   12.00 |
| cyan-alt-other    | #6ae4b9 |   13.41 |   12.42 |   11.11 |   11.30 |
#+TBLFM: $3='(clr $2 @1$3);%0.2f::$4='(clr $2 @1$4);%0.2f::$5='(clr $2 @1$5);%0.2f::$6='(clr $2 @1$6);%0.2f

** New palette with main accent values

Complete picture of the revised palette for the main accent values.

| Colour name       |         | #000000 | #110b11 | #181a20 | #151823 |
|-------------------+---------+---------+---------+---------+---------|
| red               | #ff8059 |    8.48 |    7.86 |    7.03 |    7.15 |
| red-alt           | #f4923b |    9.02 |    8.35 |    7.47 |    7.60 |
| red-alt-other     | #ff9977 |   10.07 |    9.33 |    8.34 |    8.49 |
| green             | #44bc44 |    8.52 |    7.89 |    7.06 |    7.18 |
| green-alt         | #80d200 |   11.14 |   10.31 |    9.22 |    9.38 |
| green-alt-other   | #00cd68 |    9.93 |    9.20 |    8.23 |    8.37 |
| yellow            | #eecc00 |   13.27 |   12.29 |   10.99 |   11.18 |
| yellow-alt        | #cfdf30 |   14.25 |   13.20 |   11.80 |   12.01 |
| yellow-alt-other  | #f0ce43 |   13.61 |   12.61 |   11.28 |   11.47 |
| blue              | #29aeff |    8.59 |    7.96 |    7.12 |    7.24 |
| blue-alt          | #72a4ff |    8.47 |    7.84 |    7.01 |    7.14 |
| blue-alt-other    | #00bdfa |    9.66 |    8.95 |    8.00 |    8.14 |
| magenta           | #feacd0 |   12.03 |   11.14 |    9.96 |   10.13 |
| magenta-alt       | #f78fe7 |   10.04 |    9.30 |    8.31 |    8.46 |
| magenta-alt-other | #b6a0ff |    9.46 |    8.76 |    7.84 |    7.97 |
| cyan              | #00d3d0 |   11.23 |   10.40 |    9.30 |    9.46 |
| cyan-alt          | #4ae8fc |   14.24 |   13.19 |   11.79 |   12.00 |
| cyan-alt-other    | #6ae4b9 |   13.41 |   12.42 |   11.11 |   11.30 |
#+TBLFM: $3='(clr $2 @1$3);%0.2f::$4='(clr $2 @1$4);%0.2f::$5='(clr $2 @1$5);%0.2f::$6='(clr $2 @1$6);%0.2f
</code></pre>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Emacs demo of Elfeed and my extras</title>
      <description>Elfeed is a standalone feed reader for Emacs with sane defaults and a good design. I have lots of custom extensions for it.</description>
      <pubDate>Tue, 09 Jun 2020 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2020-06-09-emacs-elfeed-demo/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2020-06-09-emacs-elfeed-demo/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=oHfAht9uTx8">https://www.youtube.com/watch?v=oHfAht9uTx8</a></p>
         
         <p>Elfeed is a third-party standalone feed reader (RSS/Atom) for Emacs.  It
ships with good defaults and is well designed overall.</p>

<p>In this video I describe the main principles of Elfeed’s interaction
model, specifically its expressive and efficient tagging system.  I also
demonstrate the custom extensions I have written for it, which leverage
other parts of the Emacs ecosystem.</p>

<p>Everything is in <a href="https://protesilaos.com/dotemacs">my dotemacs</a>.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Released Modus themes 0.9.0</title>
      <description>Information about the latest release of my highly-accessible themes for Emacs.</description>
      <pubDate>Thu, 04 Jun 2020 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2020-06-04-modus-themes-0-9-0/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2020-06-04-modus-themes-0-9-0/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>I just published version <code>0.9.0</code> of the Modus themes.  These are my
highly-accessible themes for GNU Emacs.  They conform with the WCAG AAA
standard for colour contrast accessibility (a minimum contrast ratio of
7:1 between the foreground and background values).  You can find the
packages on GNU ELPA, MELPA, MELPA stable:</p>

<ul>
  <li><code>modus-operandi-theme</code> (light)</li>
  <li><code>modus-vivendi-theme</code> (dark)</li>
</ul>

<p>Below are the release notes copied verbatim.</p>

<hr />

<h2>Modus Operandi and Modus Vivendi version 0.9.0</h2>

<p>By Protesilaos Stavrou <a href="mailto:info@protesilaos.com">info@protesilaos.com</a> on 2020-06-03</p>

<p>This entry records the changes since version 0.8.0 (2020-04-28).  The
present release contains about 50 commits, covering a month of active
development.</p>

<p>All changes are aligned with the primary objective of this project,
which is conformance with the WCAG AAA accessibility standard for colour
contrast.  This translates to a minimum contrast ratio of 7:1 between a
given combination of foreground and background colours.  The highest
standard of its kind.</p>

<p>All customisation options that are booleans are off (<code>nil</code>) by default.
The project’s policy is to offer such features on an “opt-in” basis,
while always respecting the principle of least surprise.</p>

<p>Refer to the README for further information on the exact names of
symbols and the like.</p>

<h2>New customisation options</h2>

<ul>
  <li>
    <p>It is now possible to make the faces of Icomplete, Ido, and a few
other related tools such as <code>orderless</code>, use coloured backgrounds to
style their feedback.  This is the aesthetic already in effect for
Ivy, Helm, and Selectrum.  The default is more subtle, in that it uses
just an accented foreground value without any added background.</p>
  </li>
  <li>
    <p>Advanced users can now override both the exact values of colour
variables, as well as the mapping of properties/variables to faces.
In practice this means that it is possible to completely change parts
of the theme (or the entirety of it for that matter).  It also means
that users can simply access the theme’s palette for the sake of
correctly passing the appropriate value to some bespoke face of
theirs.</p>
  </li>
  <li>
    <p>An extra increment for scaled headings is now available.  This should
hold the highest value on the scale.  Such variables only take effect
when the user opts for the “scaled headings” option.</p>
  </li>
</ul>

<h2>Overview of changes</h2>

<ul>
  <li>
    <p>A set of internal reforms were carried through in order to allow the
colour palette to be accessed from user configuration files.  This
required a lot of debugging work to make sure the themes compile
properly and performance is not affected.</p>

    <ul>
      <li>
        <p>The original idea for this redesign was suggested by Len Trigg in
issue 39: https://gitlab.com/protesilaos/modus-themes/-/issues/39.
Len also provided a real-world implementation of this new option,
which is included in the project’s README.</p>
      </li>
      <li>
        <p>André Alexandre Gomes helped figure out the problems caused by the
initial design of this feature.  In particular, André identified a
performance penalty as well as errors pertaining to byte
compilation.  Everything was eventually resolved.  For more see
issue 44: https://gitlab.com/protesilaos/modus-themes/-/issues/44.</p>
      </li>
    </ul>
  </li>
  <li>
    <p>Several org-mode faces were reviewed in order to cope well with mixed
font settings.  This is about use-cases where the main typeface is
proportionately-spaced, either by default or by some minor mode like
the built-in <code>variable-pitch-mode</code>.  The intent of configuring those
faces is to make them always inherit a fixed-pitch (monospace) font
family, in the interest of preserving the alignment of elements.  The
idea, suggested code, as well as user feedback were offered by Ben in
issue 40: https://gitlab.com/protesilaos/modus-themes/-/issues/40.</p>
  </li>
  <li>
    <p>Mixed font settings may have some side-effects depending on user
configurations.  This is unavoidable as we cannot control how users
define their fonts.  Mark Barton reported one such case, while he was
able to fix it by making use of the suggested typeface definitions.
See issue 42: https://gitlab.com/protesilaos/modus-themes/-/issues/42.</p>
  </li>
  <li>
    <p>The faces for the <code>tab-bar-mode</code> and <code>tab-line-mode</code> that ship with
Emacs 27 were written anew.  Same for those of <code>centaur-tabs</code>.  The
ideas for the redesign as well as the overall aesthetic are Ben’s, per
issue 41: https://gitlab.com/protesilaos/modus-themes/-/issues/41.</p>
  </li>
  <li>
    <p>An edge case with Helm’s interpretation of colour values for its
ripgrep interface was reported by Manuel Uberti in issue 49:
https://gitlab.com/protesilaos/modus-themes/-/issues/49.  It
essentially had to do with the syntax for the regexp engine as read by
the underlying <code>rg</code> executable.  Collaboration on that front
eventually led to fixes in Helm itself, committed by its maintainer.
Note that the README for the Modus themes already contains information
on how Helm applies a face to the matches of grep or grep-like
commands.  Issue 49 confirmed what was already known in that regard
(i.e. that the “–color=never” command-line option is required to use
the Helm face, else a colour value from the ANSI colour vector is
used—both are supported by the themes).</p>
  </li>
  <li>
    <p>The faces for Flycheck, Flymake, and Flyspell that would apply an
underline effect were completely rewritten to account for relevant
differences between GUI and TUI Emacs.</p>

    <ul>
      <li>
        <p>For GUI Emacs, all affected faces will now just use a colour-coded
wavy underline.  Empowered by the introduction of dedicated
linter-related colours in prior commits (for version 0.8.0), we no
longer have to change the foreground value of the offending text in
addition to applying the underline effect.  Whereas before the text
would also get repainted, which was too intrusive in most
circumstances.</p>
      </li>
      <li>
        <p>If support for wavy underlines is not available, we assume the
presence of a TUI, which generally is relatively more limited in its
ability to reproduce colours with precision (meaning that the
dedicated linter colour could be distorted, potentially producing
inaccessible combinations).  So for those cases we apply a straight
underline combined with a colour-coded foreground for the affected
text.  This makes it more intense compared to the GUI equivalent,
but is the necessary course of action to overcome the constraints
imposed by the underlying terminal.</p>
      </li>
    </ul>
  </li>
  <li>
    <p>The palette of Modus Operandi underwent lots of subtle changes to make
the background value of hl-line-mode more visible while retaining the
overall style and character of the theme.  In principle, you should
not be able to tell the difference, unless presented with a careful
side-by-side comparison.  This is the comprehensive report, including
a reproducible org-mode document with all the relevant contrast ratios:
https://protesilaos.com/codelog/2020-05-10-modus-operandi-palette-review/.</p>
  </li>
  <li>
    <p>Fixed `org-hide’ to actually “hide” by using the appropriate colour
value.</p>
  </li>
  <li>
    <p>Several other face groups received minor tweaks.</p>
  </li>
  <li>
    <p>The README was improved to better present the available customisation
options and to cover other topics of interest.</p>
  </li>
  <li>
    <p>Updated the screen shots and their description in the relevant Wiki
page: https://gitlab.com/protesilaos/modus-themes/-/wikis/Screenshots.</p>
  </li>
</ul>

<h2>Added support for</h2>

<ul>
  <li>circe</li>
  <li>el-search</li>
  <li>eros</li>
  <li>golden-ratio-scroll-screen</li>
  <li>highlight-indentation</li>
  <li>hyperlist</li>
  <li>indium</li>
  <li>journalctl-mode</li>
  <li>minimap</li>
  <li>nxml-mode</li>
  <li>vdiff</li>
  <li>yasnippet</li>
</ul>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Modus Operandi theme subtle palette review (Emacs)</title>
      <description>Report on the subtle refinements to some of Modus Operandi's colours.</description>
      <pubDate>Sun, 10 May 2020 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2020-05-10-modus-operandi-palette-review/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2020-05-10-modus-operandi-palette-review/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>The following is intended to be read inside of an <code>org-mode</code> buffer, so
I provide the text verbatim for you to copy-paste.</p>

<p>The gist is that picking colours in accordance with <a href="https://protesilaos.com/codelog/2020-03-17-design-modus-themes-emacs/">the design
principles of the Modus
themes</a>
is inherently tricky.</p>

<p>Read the report below for the technicalities.  These changes will be
pushed to <code>master</code> later today (2020-05-10).</p>

<hr />

<pre><code>* Modus Operandi theme palette refinements 2020-05-10

This review redefines the value of =bg-alt= from =f3f1f3= to =f0f0f0=, which
then allows =bg-hl-line= to be refashioned from =f1f2f6= to =f2eff3=.  The
latter's contrast vis-à-vis =bg-main= jumps from =1.11= to =1.14= (which is
intended for improved functionality of =hl-line-mode=).  Several
foreground colours have been redefined accordingly to pass the WCAG AAA
accessibility test against the new background values.

Remember that the minimum contrast ratio between background and
foreground values is 7:1.

The following table compares all foreground colours (column 2) with
their intended background values (some colours are designed to be
combined only with specific backgrounds, so they are excluded from this
list).

The variables for the background colours are =bg-main=, =bg-dim=, =bg-alt=,
and =bg-hl-line=, represented in this exact sequence in the table's
columns 3-6.

Use =M-x rainbow-mode= to preview all colour values (see sample package
declaration below).

| Foreground colour name   |         | #ffffff | #f8f8f8 | #f0f0f0 | #f2eff3 |
|--------------------------+---------+---------+---------+---------+---------|
| fg-main                  | #000000 |   21.00 |   19.77 |   18.43 |   18.42 |
| fg-dim                   | #282828 |   14.74 |   13.88 |   12.94 |   12.93 |
| fg-alt                   | #505050 |    8.06 |    7.59 |    7.08 |    7.07 |
| fg-active                | #191919 |   17.58 |   16.56 |   15.43 |   15.42 |
| fg-inactive              | #424242 |   10.05 |    9.46 |    8.82 |    8.81 |
| fg-special-cold          | #093060 |   13.10 |   12.33 |   11.49 |   11.49 |
| fg-special-mild          | #184034 |   11.53 |   10.85 |   10.12 |   10.11 |
| fg-special-warm          | #5d3026 |   10.96 |   10.32 |    9.62 |    9.61 |
| fg-special-calm          | #61284f |   10.91 |   10.27 |    9.57 |    9.57 |
| red                      | #a60000 |    8.01 |    7.54 |    7.03 |    7.03 |
| green                    | #005e00 |    8.07 |    7.60 |    7.08 |    7.08 |
| yellow                   | #813e00 |    8.01 |    7.54 |    7.03 |    7.02 |
| blue                     | #0030a6 |   10.64 |   10.02 |    9.34 |    9.33 |
| magenta                  | #721045 |   11.20 |   10.54 |    9.83 |    9.82 |
| cyan                     | #00538b |    8.05 |    7.58 |    7.06 |    7.06 |
| red-alt                  | #972500 |    8.14 |    7.66 |    7.14 |    7.14 |
| green-alt                | #315b00 |    7.99 |    7.53 |    7.01 |    7.01 |
| yellow-alt               | #70480f |    8.01 |    7.54 |    7.03 |    7.02 |
| blue-alt                 | #223fbf |    8.30 |    7.81 |    7.28 |    7.28 |
| magenta-alt              | #8f0075 |    8.66 |    8.15 |    7.60 |    7.59 |
| cyan-alt                 | #30517f |    8.05 |    7.58 |    7.06 |    7.06 |
| red-alt-other            | #a0132f |    7.99 |    7.52 |    7.01 |    7.01 |
| green-alt-other          | #0f5c33 |    8.08 |    7.61 |    7.09 |    7.09 |
| yellow-alt-other         | #863927 |    7.99 |    7.52 |    7.01 |    7.01 |
| blue-alt-other           | #0000bb |   12.23 |   11.51 |   10.73 |   10.72 |
| magenta-alt-other        | #5317ac |   10.07 |    9.48 |    8.83 |    8.83 |
| cyan-alt-other           | #005a5f |    7.99 |    7.53 |    7.01 |    7.01 |
| red-nuanced              | #4d0006 |   15.93 |   15.00 |   13.98 |   13.97 |
| green-nuanced            | #003000 |   14.76 |   13.90 |   12.95 |   12.94 |
| yellow-nuanced           | #3a2a00 |   13.90 |   13.09 |   12.19 |   12.19 |
| blue-nuanced             | #001170 |   15.98 |   15.05 |   14.02 |   14.01 |
| magenta-nuanced          | #381050 |   15.46 |   14.56 |   13.57 |   13.56 |
| cyan-nuanced             | #003434 |   13.63 |   12.83 |   11.96 |   11.95 |
| red-refine-fg            | #780000 |   11.68 |   10.99 |   10.25 |   10.24 |
| green-refine-fg          | #004c00 |   10.33 |    9.72 |    9.06 |    9.06 |
| yellow-refine-fg         | #604000 |    9.41 |    8.86 |    8.26 |    8.26 |
| blue-refine-fg           | #002288 |   13.25 |   12.48 |   11.63 |   11.62 |
| magenta-refine-fg        | #770077 |   10.24 |    9.64 |    8.99 |    8.98 |
| cyan-refine-fg           | #004850 |   10.28 |    9.68 |    9.02 |    9.02 |
| red-active               | #930000 |    9.37 |    8.83 |    8.22 |    8.22 |
| green-active             | #005300 |    9.39 |    8.84 |    8.24 |    8.23 |
| yellow-active            | #703700 |    9.39 |    8.85 |    8.24 |    8.24 |
| blue-active              | #0033c0 |    9.40 |    8.85 |    8.25 |    8.24 |
| magenta-active           | #6320a0 |    9.36 |    8.81 |    8.21 |    8.20 |
| cyan-active              | #004882 |    9.34 |    8.79 |    8.19 |    8.19 |
| fg-escape-char-construct | #8b1030 |    9.48 |    8.93 |    8.32 |    8.32 |
| fg-escape-char-backslash | #654d0f |    8.01 |    7.54 |    7.03 |    7.02 |
| fg-lang-error            | #9f004f |    8.12 |    7.64 |    7.12 |    7.12 |
| fg-lang-warning          | #604f0f |    8.01 |    7.54 |    7.03 |    7.02 |
| fg-lang-note             | #4040ae |    8.19 |    7.72 |    7.19 |    7.19 |
#+TBLFM: $3='(clr $2 @1$3);%0.2f
#+TBLFM: $4='(clr $2 @1$4);%0.2f
#+TBLFM: $5='(clr $2 @1$5);%0.2f
#+TBLFM: $6='(clr $2 @1$6);%0.2f

The Elisp to perform these calculations, which implements the WCAG AAA
formula (the code is courtesy of [[https://github.com/oantolin/live-completions/issues/2][Omar Antolín Camarena]]):

#+begin_src emacs-lisp
(defun wcag (hex)
  (apply #'+
         (cl-mapcar
          (lambda (k x)
            (* k (if (&lt;= x 0.03928)
                     (/ x 12.92)
                   (expt (/ (+ x 0.055) 1.055) 2.4))))
          '(0.2126 0.7152 0.0722)
          (color-name-to-rgb hex))))

(defun clr (c1 c2)
  (let ((ct (/ (+ (wcag c1) 0.05)
               (+ (wcag c2) 0.05))))
    (max ct (/ ct))))
#+end_src

The diff for =modus-operandi-theme.el=:

#+begin_src diff
 emacs/.emacs.d/modus-operandi-theme.el | 26 +++++++++++++-------------
 1 file changed, 13 insertions(+), 13 deletions(-)

diff --git a/emacs/.emacs.d/modus-operandi-theme.el b/emacs/.emacs.d/modus-operandi-theme.el
index 10b39cd..674eaab 100644
--- a/emacs/.emacs.d/modus-operandi-theme.el
+++ b/emacs/.emacs.d/modus-operandi-theme.el
@@ -555,7 +555,7 @@ AMOUNT is a customisation option."
 (defvar modus-operandi-theme-default-colors-alist
   '(;; base values
     ("bg-main" . "#ffffff") ("fg-main" . "#000000")
-    ("bg-alt" . "#f3f1f3") ("fg-alt" . "#505050")
+    ("bg-alt" . "#f0f0f0") ("fg-alt" . "#505050")
     ("bg-dim" . "#f8f8f8") ("fg-dim" . "#282828")
     ;; specifically for on/off states (e.g. `mode-line')
     ;;
@@ -572,21 +572,21 @@ AMOUNT is a customisation option."
     ;; styles for the main constructs
     ;;
     ;; must be combined with: `bg-main', `bg-alt', `bg-dim'
-    ("red" . "#a80000") ("green" . "#005f00")
-    ("yellow" . "#8b3800") ("blue" . "#0030a6")
-    ("magenta" . "#721045") ("cyan" . "#005589")
+    ("red" . "#a60000") ("green" . "#005e00")
+    ("yellow" . "#813e00") ("blue" . "#0030a6")
+    ("magenta" . "#721045") ("cyan" . "#00538b")
     ;; styles for common, but still specialised constructs
     ;;
     ;; must be combined with: `bg-main', `bg-alt', `bg-dim'
-    ("red-alt" . "#972500") ("green-alt" . "#305c00")
-    ("yellow-alt" . "#714900") ("blue-alt" . "#223fbf")
-    ("magenta-alt" . "#8f0075") ("cyan-alt" . "#185870")
+    ("red-alt" . "#972500") ("green-alt" . "#315b00")
+    ("yellow-alt" . "#70480f") ("blue-alt" . "#223fbf")
+    ("magenta-alt" . "#8f0075") ("cyan-alt" . "#30517f")
     ;; same purpose as above, just slight differences
     ;;
     ;; must be combined with: `bg-main', `bg-alt', `bg-dim'
-    ("red-alt-other" . "#a0132f") ("green-alt-other" . "#095f1c")
-    ("yellow-alt-other" . "#804000") ("blue-alt-other" . "#0000bb")
-    ("magenta-alt-other" . "#5317ac") ("cyan-alt-other" . "#005a68")
+    ("red-alt-other" . "#a0132f") ("green-alt-other" . "#145c33")
+    ("yellow-alt-other" . "#863927") ("blue-alt-other" . "#0000bb")
+    ("magenta-alt-other" . "#5317ac") ("cyan-alt-other" . "#005a5f")
     ;; styles for elements that should be very subtle
     ;;
     ;; must be combined with: `bg-main', `bg-alt', `bg-dim'
@@ -677,7 +677,7 @@ AMOUNT is a customisation option."
     ;; the window divider colours apply to faces with just an fg value
     ;;
     ;; all pairs are combinable with themselves
-    ("bg-hl-line" . "#f1f2f6")
+    ("bg-hl-line" . "#f2eff3")
     ("bg-paren-match" . "#efcabf")
     ("bg-region" . "#bcbcbc")
 
@@ -687,10 +687,10 @@ AMOUNT is a customisation option."
     ("fg-tab-active" . "#30169e")
 
     ("fg-escape-char-construct" . "#8b1030")
-    ("fg-escape-char-backslash" . "#644f00")
+    ("fg-escape-char-backslash" . "#654d0f")
 
     ("fg-lang-error" . "#9f004f")
-    ("fg-lang-warning" . "#605000")
+    ("fg-lang-warning" . "#604f0f")
     ("fg-lang-note" . "#4040ae")
 
     ("fg-window-divider-inner" . "#888888")
#+end_src

The sample package declaration:

#+begin_src emacs-lisp
(use-package rainbow-mode
  :ensure
  :commands rainbow-mode
  :config
  (setq rainbow-ansi-colors nil)
  (setq rainbow-x-colors nil))
#+end_src
</code></pre>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Demo of Emacs Shell (ESHELL)</title>
      <description>Eshell is a line-oriented command shell that is deeply integrated with the rest of Emacs. And it is extensible in true Emacs fashion.</description>
      <pubDate>Fri, 08 May 2020 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2020-05-08-emacs-eshell-demo/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2020-05-08-emacs-eshell-demo/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=L1f2tulD9N8">https://www.youtube.com/watch?v=L1f2tulD9N8</a></p>
         
         <p>Eshell is a line-oriented command shell that is deeply integrated with
the rest of Emacs.  And it is extensible in true Emacs fashion.</p>

<p>In this video I showcase the extensions I have programmed for it.  The
idea is that you can see in action the value of using Elisp for your
regular command-line needs.</p>

<p>Refer to <a href="https://protesilaos.com/dotemacs">my dotemacs</a> for all the
configurations for this and other tools.</p>

<p>And these are some valuable resources you could also check (and don’t
forget the official manual):</p>

<ul>
  <li><a href="https://cestlaz.github.io/post/using-emacs-66-eshell-elisp">Mike Zamansky’s video demo</a> that also shows how to program an Eshell switcher.</li>
  <li><a href="https://www.youtube.com/watch?v=RhYNu6i_uY4">Howard Abrahams’ video</a> that covers the features of Eshell.</li>
  <li><a href="https://ambrevar.xyz/emacs-eshell/">Pierre Neidhardt’s detailed blog post</a> on the pros and cons of Eshell.</li>
</ul>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Released Modus themes 0.8.0</title>
      <description>Information about the latest release of my highly-accessible themes for Emacs.</description>
      <pubDate>Tue, 28 Apr 2020 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2020-04-28-modus-themes-0-8-0/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2020-04-28-modus-themes-0-8-0/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>I just published version <code>0.8.0</code> of the Modus themes.  These are my
highly-accessible themes for GNU Emacs.  They conform with the WCAG AAA
standard for colour contrast accessibility (a minimum contrast ratio of
7:1 between the foreground and background values).  You can find the
packages on ELPA, MELPA, MELPA stable:</p>

<ul>
  <li><code>modus-operandi-theme</code> (light)</li>
  <li><code>modus-vivendi-theme</code> (dark)</li>
</ul>

<p>Below are the release notes copied verbatim.</p>

<hr />

<h2>Modus Operandi and Modus Vivendi version 0.8.0</h2>

<p>By Protesilaos Stavrou <a href="mailto:info@protesilaos.com">info@protesilaos.com</a> on 2020-04-28</p>

<p>This entry records the changes since version 0.7.0 (2020-03-30).  The
present release contains a little more than a hundred commits, covering
one month of intense work.</p>

<p>All changes are aligned with the primary objective of this project,
which is conformance with the WCAG AAA accessibility standard for colour
contrast.  This translates to a minimum contrast ratio of 7:1 between a
given combination of foreground and background colours.</p>

<p>All customisation options mentioned herein are off (<code>nil</code>) by default.
The project’s policy is to offer such features on an “opt-in” basis,
while always respecting the principle of least surprise.</p>

<p>Refer to the README for further information.</p>

<h2>Four new customisation options</h2>

<p>The options in outline, with their detailed description below:</p>

<ul>
  <li>Rainbow headings</li>
  <li>Section headings</li>
  <li>3D modeline</li>
  <li>Subtle diffs</li>
</ul>

<ol>
  <li>
    <p>“Rainbow headings” will apply more vivid colours to headings in
<code>org-mode</code> and <code>outline-mode</code>.  The gradation is similar to that of a
rainbow’s colour spectrum.</p>

    <p>The default is to use colour values that are closer to the grey
scale.</p>
  </li>
  <li>
    <p>“Section headings” also apply to <code>org-mode</code> and <code>outline-mode</code>.  They
will draw an overline over each heading and use a nuanced background
colour that is appropriate for each level.  For Org, this option has
some additional effects, where it will render keywords and priority
cookies in a box and add to them a subtle background.  This is to
make sure that everything feels consistent (to the extent possible).</p>

    <p>The default is to not use overlines, backgrounds, boxes in any of the
relevant faces.  This is consistent with the standard austere
colouration of headings: to not deviate too much from a “plain text”
aesthetic.</p>
  </li>
</ol>

<p>NOTE: “rainbow headings” and “section headings” can work on their own or
be combined together.</p>

<ol>
  <li>
    <p>“3D modeline” will use a faux unpressed button style for the current
window’s modeline (like the standard looks of <code>emacs -Q</code>).  The
colours used for the active and inactive modelines are tweaked
accordingly to maximise the effect while retaining the visual
distinction between them.</p>

    <p>The default is to draw the modelines in a two-dimensional style, with
the active one having a more noticeable border around it.</p>
  </li>
  <li>
    <p>“Subtle diffs” will use colour-coded text for line-wise differences
without applying any appropriately-coded background value or, where
necessary, by using only a subtle greyscale background.  This affects
<code>diff-mode</code>, <code>magit</code>, <code>ediff</code>, and <code>smerge-mode</code>.  For Magit an extra
set of tweaks is implemented to account for the differentiation
between the focused and unfocused diff hunks.</p>

    <p>Due to their unique requirements, word-wise or refined changes are
always drawn with a colour-coded background, though it is less
intense when this option is enabled.</p>

    <p>The default is to use a colour-coded background and foreground
combination (e.g. light green text on a dark green backdrop) and to
make appropriate adjustments for refined diffs and modes of
interaction such as Magit’s focused/unfocused diff states.</p>
  </li>
</ol>

<h2>Other major refinements</h2>

<ul>
  <li>
    <p>Thoroughly revise the colours of <code>ediff</code> and <code>smerge-mode</code>, so that
they are aligned with those of <code>diff-mode</code> and <code>magit</code>.  This is in
addition to the “subtle diffs” options mentioned in the previous
section.</p>
  </li>
  <li>
    <p>Review the faces used by Flycheck and Flymake.  A wavy/curly underline
is now used in all terminals that support it.  The underlined text is
drawn with a more nuanced foreground than before.  The previous design
was exaggerating an already clear effect and could make things more
difficult under certain circumstances.</p>
  </li>
  <li>
    <p>All language checkers, including the aforementioned linter front-ends,
now benefit from a new set of colours that are designed specifically
for this particular purpose.  Makes the affected faces feel more
different than their context.</p>
  </li>
  <li>
    <p>Use dedicated colours for escape sequences, regular expression
constructs, and quoted characters.  The goal is to better
differentiate them from their surroundings.</p>
  </li>
  <li>
    <p>Tweak the colours of <code>hydra</code> to improve the distinction between its
various types of behaviour.</p>
  </li>
  <li>
    <p>Reduce the overall luminance of the background colours used in the
fringes by the likes of <code>flycheck</code>, <code>flymake</code>, <code>diff-hl</code>, etc.  They
should now not stand out more than they should, while retaining their
intended role.</p>
  </li>
  <li>
    <p>Implement more saturated colours in Elfeed.  The previous choices
could make it harder to differentiate the various parts of the
presentation.</p>
  </li>
  <li>
    <p>Make better use of the customisation options for bold and slanted
constructs where that is allowed.  If a face is not tied to the
semantics of these styles then it is drawn without them, unless the
user specifically opts for the relevant customisation options.</p>
  </li>
</ul>

<h2>Added support for packages (A-Z)</h2>

<ul>
  <li>ag</li>
  <li>color-rg</li>
  <li>ctrlf</li>
  <li>debbugs</li>
  <li>eglot</li>
  <li>forge</li>
  <li>helpful</li>
  <li>highlight-symbol</li>
  <li>ibuffer</li>
  <li>icomplete</li>
  <li>iflipb</li>
  <li>magit-imerge</li>
  <li>man</li>
  <li>orderless</li>
  <li>page-break-lines</li>
  <li>parrot</li>
  <li>phi-grep</li>
  <li>phi-search</li>
  <li>pomidor</li>
  <li>rcirc</li>
  <li>spell-fu</li>
  <li>switch-window</li>
  <li>swoop</li>
  <li>tab-bar-mode</li>
  <li>tab-line-mode</li>
  <li>trashed</li>
  <li>tomatinho</li>
  <li>tuareg</li>
  <li>vimish-fold</li>
  <li>visible-mark</li>
  <li>vterm</li>
  <li>wcheck-mode</li>
  <li>winum</li>
  <li>woman</li>
</ul>

<h2>Miscellaneous changes and concluding remarks</h2>

<ul>
  <li>
    <p>Rewrote large parts of the README to make the customisation options
easier to discover and understand.</p>
  </li>
  <li>
    <p>Updated the screen shots and their description in the relevant Wiki
page: https://gitlab.com/protesilaos/modus-themes/-/wikis/Screenshots</p>
  </li>
</ul>

<hr />

<p>For more information, check the <a href="https://gitlab.com/protesilaos/modus-themes">git repository of the
modus-themes</a>.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Emacs: use SMERGE and EDIFF to resolve file conflicts</title>
      <description>Video demo of two built-in Emacs tools for handling file differences and dealing with merge conflicts (such as when working with Git).</description>
      <pubDate>Fri, 10 Apr 2020 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2020-04-10-emacs-smerge-ediff/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2020-04-10-emacs-smerge-ediff/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=9S2pMZ6U5Tc">https://www.youtube.com/watch?v=9S2pMZ6U5Tc</a></p>
         
         <p>In this video I run a real-world scenario of a failed merge in a
Git-controlled project.  The idea is that one branch cannot be merged
cleanly into the other because there are conflicting differences between
a few files.  Git cannot choose on its own, so it is leaving things to
us.</p>

<p>This is where <code>smerge-mode</code> and <code>ediff</code> can into the picture.  Both
tools are built into Emacs and can be used in tandem with Magit or the
standard Version Control framework (VC).  The workflow is practically
the same.</p>

<p>Check <a href="https://protesilaos.com/dotemacs">my dotemacs</a> for more on these.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Introduction to Magit (Emacs)</title>
      <description>Magit is an Emacs package that implements an interface to Git. It is absolutely great!</description>
      <pubDate>Sat, 04 Apr 2020 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2020-04-04-emacs-intro-magit/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2020-04-04-emacs-intro-magit/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=2-0OwGTt0dI">https://www.youtube.com/watch?v=2-0OwGTt0dI</a></p>
         
         <p>In this video I offer an introduction to the main features of Magit:
staging, committing, diffing, logging, branching, merging, etc.</p>

<p>Magit implements a modal interface to Git, the version control system.
It clearly is one of the best packages in the Emacs space.</p>

<hr />

<p>This is the link to <code>icomplete-vertical</code>:
<a href="https://github.com/oantolin/icomplete-vertical">https://github.com/oantolin/icomplete-vertical</a></p>

<p>Refer to <a href="https://protesilaos.com/dotemacs">my dotemacs</a> for all my
configurations.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Introduction to Ibuffer (Emacs)</title>
      <description>Video demo of "Ibuffer". Use it to manage Emacs buffers efficiently.</description>
      <pubDate>Thu, 02 Apr 2020 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2020-04-02-emacs-intro-ibuffer/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2020-04-02-emacs-intro-ibuffer/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=6KN_oSLFf-k">https://www.youtube.com/watch?v=6KN_oSLFf-k</a></p>
         
         <p><code>ibuffer</code> is a library that is built into Emacs.  It allows us to
operate on the buffer list in a number of ways.  We can sort, mark,
filter using several predicates such as buffer name, major mode,
filesystem path.</p>

<p>Furthermore, <code>ibuffer</code> provides convenient access to other built-in
commands, such as <code>query-replace</code> and <code>occur</code>.  You can use these to
operate on a subset of marked buffers.</p>

<p>Check <a href="https://protesilaos.com/dotemacs">my dotemacs</a> for configurations
on this and other tools.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Released Modus themes 0.7.0</title>
      <description>Information about the latest release of my highly-accessible themes for Emacs.</description>
      <pubDate>Mon, 30 Mar 2020 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2020-03-30-modus-themes-0-7-0/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2020-03-30-modus-themes-0-7-0/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>I just published version <code>0.7.0</code> of the Modus themes.  These are my
highly-accessible themes for GNU Emacs.  They conform with the WCAG AAA
standard for colour contrast accessibility (a minimum contrast ratio of
7:1 between the foreground and background values).  You can find the
packages on ELPA, MELPA, MELPA stable:</p>

<ul>
  <li><code>modus-operandi-theme</code> (light)</li>
  <li><code>modus-vivendi-theme</code> (dark)</li>
</ul>

<p>Below are the release notes copied verbatim.</p>

<hr />

<h2>Modus Operandi and Modus Vivendi version 0.7.0</h2>

<p>By Protesilaos Stavrou <a href="mailto:info@protesilaos.com">info@protesilaos.com</a> on 2020-03-30</p>

<p>This entry documents the changes since version 0.6.0 (2020-03-01).  The
present release is the largest to date containing 110 commits.</p>

<p>All changes conform with the primary objective of this project, which is
conformance with the WCAG AAA accessibility standard for colour
contrast.  This represents a minimum contrast ratio of 7:1 between a
given combination of foreground and background colours.</p>

<p>All customisation options mentioned herein are off (<code>nil</code>) by default.
The project’s policy is to offer such features on an “opt-in” basis.
Refer to the README or each theme’s source code for the names of these
user-facing symbols.</p>

<h2>Major refinements to existing face groups</h2>

<ul>
  <li>
    <p>The headline feature of this release is a refined set of colours for
visualising version-control-system differences (“diffs”).  The new
colours are less intense than before and are designed to better convey
the meaning of the constructs they apply to.  Affected face groups are
those of <code>magit</code> and <code>diff-mode</code>.  A future release will assess how
similar packages, such as <code>ediff</code>, can benefit from this work.</p>
  </li>
  <li>
    <p>The other major set of changes concerns the colours that apply to
fringes (see <code>fringe-mode</code>).  A new customisation option allows for a
distinct background for the fringes (courtesy of Anders Johansson in
commit 80fb704).  The default uses the same colours as the main
buffer’s background.  Building on this effort, fringe indicators, such
as those of <code>flycheck</code> now benefit from an entirely new set of
background+foreground colour combinations that are designed
specifically for the fringes.</p>
  </li>
  <li>
    <p>A new customisation option allows users to render <code>org-mode</code> source
blocks in a distinct background colour.  The default is to use the
same background as the rest of the buffer.  When this option is
enabled, the background colour for the beginning and end line of such
blocks is extended to the end of the window (using the <code>:extend t</code>
attribute for &gt;= Emacs 27).  Older Emacs versions already extend to
the end of the window.</p>
  </li>
  <li>
    <p>The colour combination that shows the matching parentheses or
delimiters has been reviewed.  The commit is fairly small and the
changes are immediately noticeable only to the most discerning of
eyes.  Still, the considerations informing the review imposed a
rigorous method.  Rather than summarise the findings, interested
readers are advised to refer to commit af3a327: it offers a
comprehensive analysis on the matter.</p>
  </li>
</ul>

<h2>Added support for packages (A-Z)</h2>

<ul>
  <li>auctex/tex</li>
  <li>bm</li>
  <li>buffer-expose</li>
  <li>centaur-tabs</li>
  <li>cider (tentative, feedback is much appreciated)</li>
  <li>csv-mode</li>
  <li>dynamic-ruler</li>
  <li>ebdb</li>
  <li>elfeed-score</li>
  <li>flyspell-correct</li>
  <li>fold-this</li>
  <li>freeze-it</li>
  <li>frog-menu</li>
  <li>git-walktree</li>
  <li>helm-switch-shell</li>
  <li>highlight-defined</li>
  <li>highlight-escape-sequences (hes-mode)</li>
  <li>highlight-numbers</li>
  <li>highlight-thing</li>
  <li>hl-todo</li>
  <li>ioccur</li>
  <li>julia</li>
  <li>kaocha-runner</li>
  <li>markup-faces (adoc-mode)</li>
  <li>multiple-cursors</li>
  <li>num3-mode</li>
  <li>org-roam</li>
  <li>org-superstar</li>
  <li>org-treescope</li>
  <li>outline-minor-mode</li>
  <li>paradox</li>
  <li>rainbow-identifiers</li>
  <li>rg</li>
  <li>ripgrep</li>
  <li>sallet (tentative, feedback is much appreciated)</li>
  <li>selectrum</li>
  <li>sesman</li>
  <li>side-notes</li>
  <li>skewer-mode</li>
  <li>stripes</li>
  <li>symbol-overlay</li>
  <li>syslog-mode</li>
  <li>vc-annotate (C-x v g)</li>
  <li>volatile-highlights</li>
  <li>web-mode</li>
  <li>yaml-mode</li>
</ul>

<h3>Note about VC-annotate</h3>

<p>Quoting from the relevant note in the project’s README:</p>

<pre><code>Due to the unique way `vc-annotate' (`C-x v g') applies colours,
support for its background mode (`vc-annotate-background-mode') is
disabled at the theme level.

Normally, such a drastic measure should not belong in a theme:
assuming the user's preferences is bad practice.  However, it has
been deemed necessary in the interest of preserving colour contrast
accessibility while still supporting a useful built-in tool.

If there actually is a way to avoid such a course of action, without
prejudice to the accessibility standard of this project, then please
report as much (or contribute as per the information in the
Contributing section).
</code></pre>

<h2>Overview of refinements to already supported packages</h2>

<p>In this section the notion of “dedicated colours” pertains to colour
values that are reserved for special faces.  They are never used for
syntax highlighting or other common scenaria.</p>

<ul>
  <li>
    <p>Define new background colours for fringe indicators (as noted in the
first section).  Apply them to <code>bm</code>, <code>diff-hl</code>, <code>git-gutter</code>,
<code>flycheck</code> fringe indicators.  All such indicators are now made more
visible and work better with the new customisation option for
rendering the fringes in a distinct background.</p>
  </li>
  <li>
    <p>Define dedicated colours for tab-like interfaces.  Currently these
apply only to <code>centaur-tabs</code>.  The intention is to eventually
implement them to the tab modes that ship with Emacs 27, as well as
any other package that offers such functionality.</p>
  </li>
  <li>
    <p>Define dedicated colours for actions that “mark” items.  Use them in
<code>dired</code>, <code>proced</code>, <code>gnus</code>. An accented background is combined with an
accented foreground.  The intention is to make the underlying
construct distinct even under circumstances where the mark’s
background changes, such as when it intersects with <code>hl-line-mode</code> or
<code>stripes</code>: the accented foreground will still be recognisable as a
colour that differs from the main foreground.  The use of a bold font
weight further reinforces the intended action.</p>
  </li>
  <li>
    <p>Refine <code>dired</code> faces to account for the new “mark” styles.
Directories are no longer rendered in a bold weight.</p>
  </li>
  <li>
    <p>Tweak the colours used in the built-in <code>diary</code> and <code>calendar</code> for
better usability.</p>
  </li>
  <li>
    <p>Tweak <code>deadgrep</code> colours for consistency with packages that offer
similar functionality.</p>
  </li>
  <li>
    <p>Tweak <code>compilation-line-number</code> in the interest of consistency with
similar interfaces.</p>
  </li>
  <li>
    <p>Use a more appropriate colour for <code>trailing-whitespace</code>.  It now is a
colour value that was designed specifically as a background.</p>
  </li>
  <li>
    <p>Expand <code>fountain-mode</code> support by covering its new heading faces.  The
headings will be presented in larger font sizes, or using proportional
fonts, should the user enable the relevant theme customisation options
(see README or source code).</p>
  </li>
  <li>
    <p>Remove bold weight from matching parentheses in <code>show-paren-mode</code> and
<code>smartparens</code>.  The temporarily applied bold weight can cause
misalignments while using certain fonts.  Also apply the new colours
for matching delimiters, as documented in the first section.</p>
  </li>
  <li>
    <p>Refine <code>outline-mode</code> colours to be consistent with those of Org’s
headings.</p>
  </li>
  <li>
    <p>Several usability and colour refinements for <code>helm</code> and related
packages in that milieu.</p>
  </li>
  <li>
    <p>Remove box property from emphasis markers in the mode line.  It
created inconsistencies with other faces.</p>
  </li>
  <li>
    <p>Refine the colours used in Magit logs, <code>change-log</code>, <code>log-view</code>.  They
are meant to be more distinct from their context, without drawing too
much attention to themselves.</p>
  </li>
  <li>
    <p>Minor internal fixes for indentation and the like.</p>
  </li>
</ul>

<h2>Miscellaneous changes and concluding remarks</h2>

<ul>
  <li>
    <p>Add section in the README which documents a legal requirement for all
potential non-trivial code contributions: the need to assign copyright
to the Free Software Foundation.  The Modus Themes are now distributed
via the official GNU ELPA repository and copyright over them is
assigned to the FSF.</p>
  </li>
  <li>
    <p>Add CHANGELOG file which consolidates all tagged release notes such as
this one.</p>
  </li>
  <li>
    <p>Add new screen shots to the relevant Wiki page, together with detailed
descriptions on what is being demonstrated:
https://gitlab.com/protesilaos/modus-themes/-/wikis/Screenshots</p>
  </li>
</ul>

<p>Special thanks to Manuel Uberti for reporting several issues and
offering feedback where appropriate.  I was able to add support for lots
of new packages.  While a few among the already supported face groups
underwent tweaks and refinements.  The <code>helm</code> ecosystem benefited the
most.</p>

<p>Thanks to Anders Johansson for the patch that introduced the
fringes-related customisation option.  It inspired me to reconsider the
use of this particular area of the interface, which eventually led to
the barrage of commits that refashioned the fringe indicators.  A major
win overall.</p>

<p>Thanks to Jonathan Otsuka for fixing an error of mine on the naming of
some symbols.  My apologies for missing it: I will be more careful from
now on.</p>

<p>Note: both patches were small, requiring no copyright assignment.
Larger contributions are always welcome, though make sure you read the
section in the README with regard to assigning copyright to the Free
Software Foundation.</p>

<hr />

<p>For more information, check the <a href="https://gitlab.com/protesilaos/modus-themes">git repository of the
modus-themes</a>.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Introduction to the Emacs Version Control framework</title>
      <description>Video demo of VC, the version control framework that is built into Emacs.</description>
      <pubDate>Mon, 30 Mar 2020 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2020-03-30-emacs-intro-vc/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2020-03-30-emacs-intro-vc/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=SQ3Beqn2CEc">https://www.youtube.com/watch?v=SQ3Beqn2CEc</a></p>
         
         <p>In this video I showcase the main features and workflows of <code>vc</code>.  This
is a generic framework that can be used with several version control
systems, one of which is <code>git</code>.</p>

<p>I am using VC in parallel with the more powerful <code>magit</code>.  The former is
for smaller, simpler operations.  The latter is for the advanced
features that <code>git</code> provides.</p>

<p>Check <a href="https://protesilaos.com/dotemacs">my dotemacs</a> for all relevant
configurations.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Ripgrep inside of Emacs with “rg.el”</title>
      <description>Video demo of how to use the ripgrep tool inside of Emacs.</description>
      <pubDate>Wed, 25 Mar 2020 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2020-03-25-emacs-ripgrep-rg/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2020-03-25-emacs-ripgrep-rg/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=4qLD4oHOrlc">https://www.youtube.com/watch?v=4qLD4oHOrlc</a></p>
         
         <p>In this video I offer an introduction to <code>rg.el</code>, an interface to the
<code>ripgrep</code> command line tool.  I like this package because it remains
faithful to the interface paradigms that are implemented by similar
tools inside of Emacs, such as the built-in <code>grep</code> or <code>occur</code>.  I also
appreciate the fact that it interfaces with <code>ibuffer</code>, another built-in
library.</p>

<p>Check <a href="https://protesilaos.com/dotemacs">my dotemacs</a> for configurations
on <code>rg.el</code> and more.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>On the design of the Modus themes (Emacs)</title>
      <description>Technical notes on the design of my highly-accessible Modus themes for Emacs.</description>
      <pubDate>Tue, 17 Mar 2020 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2020-03-17-design-modus-themes-emacs/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2020-03-17-design-modus-themes-emacs/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>The “Modus themes” are a pair of themes for Emacs that conform with the
WCAG AAA accessibility standard for colour contrast between background
and foreground values.  This is the highest standard of its kind for
making text readable, representing a minimum contrast ratio of 7:1.</p>

<p>There is a light and a dark theme.  The former is called “Modus
Operandi”, while the latter is “Modus Vivendi”.</p>

<p>In this article I document the principles that inform my decision-making
in the design of these themes, though the insights apply more generally.</p>

<p>If you want to see how the themes look in practice, you can watch some
of my <a href="https://protesilaos.com/code-casts/">videos on Emacs</a> or refer to
this <a href="https://protesilaos.com/modus-themes-pictures">collection of screenshots</a>.</p>

<h2>What is colour</h2>

<p>For our purposes, “colour” is the amalgamation of three distinct
channels of light: red, green, blue.  By combining them in different
amounts we get what we understand as orange, turquoise, violet, etc.</p>

<p>Red, in the sense of “pure red”, is a combination of the three channels
of light where only the red component is at its fullest, while the
others are contributing nothing.  Same for the other colours that
correspond to the remaining light channels.</p>

<p>White, in its purest, is the combination of the three channels with each
contributing as much as possible.  Whereas black is derived by having
the channels contribute zero.</p>

<p>Couched in those terms, white and black are “colours” (in other domains
they are described as “tones” that produce “tints” or “shades” when
combined with hues).</p>

<p>I distinguish between “base” and “accent” values.  The grey scale is
part of the base group, while any other colour that derives from the
accentuation of one or two light channels belongs to the accent’s group.</p>

<p>At its core, a palette consists of eight colours.  Six accents plus
white and black.  The six are: red, green, blue, yellow, cyan, magenta.</p>

<p>To be clear about the accents that result from the three channels of
light, consider these possibilities:</p>

<pre><code>red   + green = yellow
green + blue  = cyan
blue  + red   = magenta
</code></pre>

<h2>Colour notation</h2>

<p>The total number of colours is a function of the amount that each
channel of light can accept.  With current technology this is 256, which
means:</p>

<pre><code>256 × 256 × 256 = 16,777,216
</code></pre>

<p>We can represent a colour using zero-based decimal notation, so values
from 0 to 255 for each channel of light (e.g. <code>255,0,0</code> is pure red), or
we can use hexadecimal notation, where possible values are 0-9 and a-f
with each of the RGB channels having either one or two entries.</p>

<p>A hexadecimal representation of <code>#f00</code> is interpreted as equivalent to
<code>#ff0000</code>.  To avoid confusion and allow for more possible combinations,
I always use the six-digit-long format.</p>

<h2>Choosing colours</h2>

<p>The design of the palette’s main colours is governed by the inherent
luminance of the six primary accent values.  The following table shows
the contrast ratio of each of them relative to pure white and pure black
respectively.  The colour values are written in hexadecimal RGB notation
with <code>#ffffff</code> representing the maximum (white) and <code>#000000</code> the
minimum (black).</p>

<table>
  <thead>
    <tr>
      <th>Hexadecimal (name)</th>
      <th>ffffff (white)</th>
      <th>000000 (black)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>ff0000 (red)</td>
      <td>3.99</td>
      <td>5.25</td>
    </tr>
    <tr>
      <td>00ff00 (green)</td>
      <td>1.37</td>
      <td>15.3</td>
    </tr>
    <tr>
      <td>0000ff (blue)</td>
      <td>8.59</td>
      <td>2.44</td>
    </tr>
    <tr>
      <td>ffff00 (yellow)</td>
      <td>1.07</td>
      <td>19.5</td>
    </tr>
    <tr>
      <td>00ffff (cyan)</td>
      <td>1.25</td>
      <td>16.7</td>
    </tr>
    <tr>
      <td>ff00ff (magenta)</td>
      <td>3.13</td>
      <td>6.69</td>
    </tr>
  </tbody>
</table>

<p>For reference, the maximum contrast ratio is 21:1 between black and
white, while the minimum is always 1:1.  These ratios are derived from a
<a href="https://www.w3.org/TR/WCAG20-TECHS/G18.html">scientific formula</a> that
underpins the WCAG standard (you can use an online tool to perform the
calculations or try my <code>clr</code> shell script that is distributed as part of
<a href="https://gitlab.com/protesilaos/dotfiles">my dotfiles</a>).</p>

<p>The table shows us indirectly that each channel of light is assigned a
unique weight in the calculation of the final luminance, which is
reflected in the different contrast ratios of red, green, blue.  This
means that for the purposes of colour contrast we cannot equate the
amount of each channel with its total contribution.  Our intuition that
<code>#ff0000</code> is the same as <code>#0000ff</code> in terms of distance relative to zero
cannot guide us by itself in selecting between the two.</p>

<p>We need a more qualified understanding of the mechanics of these three
channels of light, predicated on the relative weights that the formula
defines for red, green, blue respectively.  These are the precise
numbers:</p>

<pre><code>L = 0.2126 * R + 0.7152 * G + 0.0722 * B
</code></pre>

<p>The general rules for luminance that we can deduce from the
aforementioned are outlined thus:</p>

<ul>
  <li>“More green” means “lighter”.</li>
  <li>“More green” and “more red” means “even lighter”.</li>
  <li>“More blue” and to a lesser extent “more red” is the right way to
tweak colours without completely changing their luminance.</li>
</ul>

<p>In practice, adding a bit of blue makes virtually no difference to a
colour’s luminance, while a good amount of it can help distinguish two
accent values.  For example <code>#aa0000</code> is a red that has 7.75 contrast
with white, while <code>#aa0077</code> is a magenta that has 7.05 contrast (recall
that 7:1 is our minimum target).  We see how “a lot” of blue added to
our particular red made little difference in the total luminance of the
new colour, while it did have a greater effect on the perception of
these two colours (you can use <code>rainbow-mode</code> for Emacs to preview valid
values).</p>

<p>Now some insights about the choice of colour for use in the themes:</p>

<ul>
  <li>When designing a light theme, all colours need to rely on the blue
channel of light and, to a lesser extent, on the red one.  You cannot
develop a fully fledged accessible light theme that makes extensive
use of green, yellow, cyan, while also trying to keep colours fairly
distinct from each other.</li>
  <li>When designing a dark theme, you cannot rely on green, yellow, cyan as
your main colours because they will look much more luminant than other
accents, unless you lower their values to a point where they no longer
approximate their pure representation.</li>
</ul>

<p>These mean that the most common colours for both the light and dark
variants have to be derived by combining blue and red, with green being
the channel that adjusts the relative luminance.  Hence the various
shades of pink, purple, azure, teal that are most used in the Modus
themes to highlight text.</p>

<p>Combined with insights from colour psychology, we must rule out red as a
valid colour for syntax highlighting.  Red calls too much attention to
itself.  It is reserved for cases where such a property is desired, such
as when presenting an error message.  Similar principles apply to the
use of yellow and green: they are used to signify something that has a
special meaning in its context.</p>

<h2>The importance of knowing the background</h2>

<p>It is impossible to pick a colour without knowing the context it will be
used in.  We thus start by identifying our main background value.</p>

<p>When selecting multiple colours for the purposes of developing a theme,
we know that their common point of reference is the background on which
they will be used.  The background is a constant.  For my light theme
the main one is white; for the dark it is black.</p>

<p>There are many cases where a different background needs to be used in
order to render a certain function explicit and unambiguous.  For
example, to represent a matching search term, draw the selected region,
and so on.  For each of these scenaria we use the potentially
purpose-specific background as our guide for choosing the possible
colours that are allowed to be used with it as foreground values.  As
always, our overarching objective is conformance with the WCAG AAA
standard.</p>

<p>It is for this reason that the Modus themes have several palette subsets
with inline commentary on the colours they may be combined with (see
source code).  For instance, the red intended for text on the mode line
differs from the one used in the main buffer because the mode line has a
background that is a particular shade of grey.</p>

<p>Emacs allows for different combinations of text and colour properties:
what is called a “face”.  Such faces empower us to implement these
palette subsets with precision.</p>

<h2>Part art, part science</h2>

<p>Theme development stands at the intersection of art and science:</p>

<ul>
  <li>Science allows us to measure the luminance of colours and decide on
the acceptable values for any given combination of foreground and
background.</li>
  <li>While the choice of one among possible combinations to denote the
function of a given construct (interface or code element) is a matter
of art.</li>
</ul>

<p>It is not pertinent to this essay to investigate the exact proportion of
each of these magnitudes to the delivery of the final outcome.  Perhaps
art is just an imprecise science waiting to be refined further by a
yet-to-be-discovered method.  At any rate, art is also governed by
principles such as consistency, frugality, and temperance.</p>

<p>The Modus themes are designed with an intention to avoid exaggerations
or what may be described as a “rainbow effect”.  There are cases where
science would allow us to combine variants of red, green, blue, yellow,
magenta, cyan all in one place.  Nothing would be technically wrong once
the colour contrast criterion is satisfied.  It would however look ugly
by being excessive, flamboyant.</p>

<p>This is the tacit minimalism of the Modus themes: the visual aspect of a
state of affairs is expressed by using as few colours as deemed
necessary.  There should be no imbalance in the visual “rhythm” of the
highlighted text: a highly-luminant colour next to a considerably darker
one all trying to present parts that are semantically similar or
connatural is a bad choice; and “bad choice” implies the lack of a
thematic thread running through all applicable colour combinations.</p>

<p>I understand minimalism as minimum viable completeness, basically
meaning that “it works” without requiring any further additions to
continue to work well and with such additions delivering diminishing
returns to scale or even being detrimental to the task of avoiding
exaggerations (i.e. the notion of enforcing a <em>theme</em>).</p>

<p>Differences of degree or nuances should also be discernible in the use
of colour, in line with rhythmic consistency.  For example, in the Modus
themes documentation strings are a more subtle blue than literal
strings.  They could have been green, for instance, but that would
introduce too much variation for semantically similar functions:
scientifically correct, artistically sub-optimal.</p>

<h2>Try the themes</h2>

<p>The Modus themes are available in MELPA and MELPA Stable already for a
few months now, while they were recently admitted to the official ELPA
repository.  They are distributed as standalone packages, in case you
want to use one but not the other.</p>

<p>I am continuously refining the themes and expanding support for packages
(face groups) in the Emacs milieu.  This is necessary to ensure a
consistent experience for all users.</p>

<p>I am happy for the feedback I have received, including but not limited
to email messages.  Meanwhile, <a href="https://www.manueluberti.eu//emacs/2020/03/16/modus-themes/">Manuel Uberti has published a blog
entry</a>
detailing how Modus Operandi has addressed a persistent issue with light
themes.  Given this opportunity, I must also thank Manuel for the
valuable issues (and concomitant feedback) reported in the <a href="https://gitlab.com/protesilaos/modus-themes">project’s
git repo</a>.</p>

<p>My commitment to accessibility of the WCAG AAA sort comes from the
realisation that legibility is the single most important characteristic
of any text-heavy interface.  Emacs is all about text; and text should
not pose a barrier to entry.</p>

<p>Use a reliable and unassuming typeface that does not draw too thin
letter forms or demand constant attention to its peculiarities (such as
<a href="https://gitlab.com/protesilaos/hack-font-mod">my patched “Hack”</a>) and
apply a theme that prioritises good colour contrast.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Edit keyboard macros in Emacs</title>
      <description>In this video I show how to use a powerful Emacs facility for editing keyboard macros.</description>
      <pubDate>Sat, 14 Mar 2020 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2020-03-14-emacs-kmacro-edit/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2020-03-14-emacs-kmacro-edit/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=Xm1RmN-wHdg">https://www.youtube.com/watch?v=Xm1RmN-wHdg</a></p>
         
         <p>In this video I show how to use a built-in facility for editing keyboard
macros in Emacs.</p>

<p>This is a specialised piece of functionality that you may not need for
your day-to-day editing tasks.  It can, however, boost your productivity
by allowing you to define more efficient keyboard macros without having
to worry about any typos or mistakes.  You can just edit the macro
rather than start recording a new one from the beginning.</p>

<p>Though I do not have any kind of configuration on this specific topic,
you may want to check <a href="https://protesilaos.com/dotemacs">my dotemacs</a>
for all my other customisations.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>My Modus themes for Emacs are in ELPA</title>
      <description>In this video I announce the immediate availability of my themes for Emacs through the official package archive. Also talk about future plans.</description>
      <pubDate>Tue, 10 Mar 2020 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2020-03-10-emacs-modus-themes-elpa/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2020-03-10-emacs-modus-themes-elpa/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=TIUXYDaq9AY">https://www.youtube.com/watch?v=TIUXYDaq9AY</a></p>
         
         <p>In this video I announce the immediate availability of my themes for
Emacs through the official package archive.  I explain what this means
in practice, how the new legal arrangements stand, and talk about my
plans concerning the ongoing development of this project.</p>

<p>The “Modus themes” are my highly-accessible themes for GNU Emacs. They
conform with the WCAG AAA standard for colour contrast accessibility,
which stands for a minimum contrast ratio of 7:1 between the foreground
and background values.</p>

<p>The two themes are:</p>

<ul>
  <li><code>modus-operandi-theme</code> (light)</li>
  <li><code>modus-vivendi-theme</code> (dark)</li>
</ul>

<p>Here is the link to the <a href="https://gitlab.com/protesilaos/modus-themes">GitLab repo of the Modus themes</a>.</p>

<p>You might want to send your feedback concerning the proposed changes to
<code>diff-mode</code> that I mentioned in the video.  If you do not have a GitLab
account, feel free to <a href="https://protesilaos.com/contact/">contact me</a> via email.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Primer on Emacs “registers”</title>
      <description>In this video tutorial I demonstrate the main uses of "registers" in Emacs.</description>
      <pubDate>Sun, 08 Mar 2020 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2020-03-08-emacs-registers/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2020-03-08-emacs-registers/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=u1YoF4ycLTY">https://www.youtube.com/watch?v=u1YoF4ycLTY</a></p>
         
         <p>In this video tutorial I offer an introduction to Emacs’ special
compartments for storing data, called “registers”.</p>

<p>Use them to save text, numbers, positions, window or frame
configurations.  They are very powerful and can boost your productivity
in various scenarios, such as when recording a keyboard macro.</p>

<p>Check <a href="https://protesilaos.com/dotemacs">my dotemacs</a> for the section I
have on registers (and for everything else, of course).</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Released Modus themes 0.6.0</title>
      <description>Information about the latest release of my highly-accessible themes for Emacs.</description>
      <pubDate>Sun, 01 Mar 2020 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2020-03-01-modus-themes-0-6-0/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2020-03-01-modus-themes-0-6-0/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>I just published version <code>0.6.0</code> of the Modus themes.  These are my
highly-accessible themes for GNU Emacs.  They conform with the WCAG AAA
standard for colour contrast accessibility (a minimum contrast ratio of
7:1 between the foreground and background values).  You can find the
packages on MELPA (and soon on ELPA as well):</p>

<ul>
  <li><code>modus-operandi-theme</code> (light)</li>
  <li><code>modus-vivendi-theme</code> (dark)</li>
</ul>

<hr />

<p>This release contains lots of refinements and additions.</p>

<p>Let me start with an administrative point: I have completed the process
of assigning my copy rights to the Free Software Foundation.  This
covers every contribution I make to GNU Emacs.  In practice, it means
that the Modus themes can now be included in the official ELPA archive
and theoretically be shipped with Emacs itself.  The ELPA inclusion is
ongoing.  Once it is completed, I will update the docs accordingly.</p>

<p>The administrative change has no effect on the way this project is
handled.  I still am the developer/maintainer and will continue to
improve things further.  If you still have questions, feel free to
contact me: https://protesilaos.com/contact</p>

<p>Moving on to the changes since version 0.5.0 (2020-01-26).</p>

<p>Added support for:</p>

<ul>
  <li>alert</li>
  <li>apropos (built-in)</li>
  <li>dap-mode</li>
  <li>deft</li>
  <li>dim-autoload</li>
  <li>dired-git</li>
  <li>enhanced-ruby-mode</li>
  <li>gbd-mi.el (built-in library)</li>
  <li>helm-ls-git</li>
  <li>helm-xref</li>
  <li>imenu-list</li>
  <li>jira (org-jira)</li>
  <li>js2-mode</li>
  <li>jupyter</li>
  <li>org-pomodoro</li>
  <li>origami</li>
  <li>rmail (built-in)</li>
  <li>vc-print-log (built-in)</li>
  <li>window-divider-mode (built-in)</li>
  <li>xref (built-in)</li>
</ul>

<p>Refinements to existing faces:</p>

<ul>
  <li>
    <p>A new subset of “nuanced” accent colours has been introduced.  These
are named {red,green,yellow,blue,magenta,cyan}-nuanced.  Their purpose
is to be used in contexts where lots of structured information is
presented to the user, but each component does not need to draw too much
attention to itself (e.g. Org’s metadata).  As always, their contrast
ratio is designed to always be &gt;= 7:1 relative to the backgrounds they
may be combined with.</p>
  </li>
  <li>
    <p>Greatly improve the support for Gnus, even though most changes are
subtle and are made in the interest of consistency.  The group levels
now make use of the “nuanced” palette where appropriate (to denote
levels of lower importance).</p>
  </li>
  <li>
    <p>Several refinements for Org, including the use of “nuanced” colours
for various metadata tags.  The agenda headers will now be scaled
appropriately and use a variable-pitch font if the user sets the
relevant customisation values of the theme they are using (check the
documentation in each theme file or the repo’s README).</p>
  </li>
  <li>
    <p>Lots of refinements for Helm.  Some of these were introduced to align
the overall aesthetic with equivalent metaphors in Ivy.  Others are
meant to improve the styles of the headers and make various constructs
consistent with their variants in the Helm ecosystem but also with their
non-Helm counterparts (such as xref file names with and without Helm,
but also with Helm’s grep).</p>
  </li>
  <li>
    <p>Improve the colours of buttons in contexts such as M-x customize.
This is especially noticeable in modus-vivendi-theme (the dark theme)
where the buttons are a darker shade of grey rather than the original
lighter one.</p>
  </li>
  <li>
    <p>Keycast now uses styles that are more consistent with the overall
aesthetic of the Modus themes.  This means that the mode line indicators
are blue-ish (blue is generally used for highlights in the mode line,
but also when hovering over an item with the mouse pointer).  The pseudo
button effect (colours + 3d) has been removed in favour of a flat look,
in line with the flatness of the mode line itself.  Whereas before the
keycast faces where designed to be consistent with the package’s
defaults.</p>
  </li>
</ul>

<p>There were also a few minor refinements for:</p>

<ul>
  <li>calendar and diary</li>
  <li>icomplete</li>
  <li>mm-uu-extract</li>
  <li>nobreak-hyphen and nobreak-space</li>
  <li>org-habit</li>
  <li>tooltip-mode</li>
</ul>

<p>Finally, the Commentary section of each theme has been greatly expanded.
It now includes the user-facing customisation options and the complete
list of supported packages.</p>

<hr />

<p>For more information, check the <a href="https://gitlab.com/protesilaos/modus-themes">git repository of the
modus-themes</a>.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Emacs: intro to ICOMPLETE</title>
      <description>In this video tutorial I present the Icomplete framework that is built into Emacs.  It offers incremental completion feedback.</description>
      <pubDate>Wed, 26 Feb 2020 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2020-02-26-emacs-icomplete/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2020-02-26-emacs-icomplete/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=vtwYIKUZwEM">https://www.youtube.com/watch?v=vtwYIKUZwEM</a></p>
         
         <p>In this video tutorial I present the <code>icomplete</code> library that is built
into Emacs.  This is an incremental completion framework that offers
live feedback on the candidates that match your current input.</p>

<p>I have been using Icomplete for a bit less than a month and have made
lots of customisations to it and other parts of the interface (such as
<code>display-buffer-alist</code>).  The result has proven good enough for me to
switch away from the Ivy completion framework (which I had also
configured quite extensively).</p>

<p>Icomplete is simple by design: take it as an opportunity to experiment
and to find your own solutions to problems that involve elisp scripting.</p>

<p>See <a href="https://protesilaos.com/dotemacs">my dotemacs</a> for the actual
implementation.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Primer on “org-capture” (Emacs)</title>
      <description>In this video tutorial I offer a step-by-step introduction to using "org-capture" and defining your templates for it.</description>
      <pubDate>Tue, 04 Feb 2020 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2020-02-04-emacs-org-capture-intro/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2020-02-04-emacs-org-capture-intro/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=qCdScs4YO8k">https://www.youtube.com/watch?v=qCdScs4YO8k</a></p>
         
         <p>In this video tutorial I offer a step-by-step introduction to using
<code>org-capture</code> and defining your templates for it.  There are lots of
possible options for the data you can pass to these templates.  My demo
should be enough to get you started.</p>

<p>Refer to <a href="https://protesilaos.com/dotemacs">my dotemacs</a> for all the
relevant configurations.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Intro to the Gnus newsreader and email client for Emacs</title>
      <description>In this video tutorial I offer a tour around the main interfaces of Gnus, the built-in Emacs newsreader and email client.</description>
      <pubDate>Sun, 02 Feb 2020 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2020-02-02-emacs-gnus-intro/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2020-02-02-emacs-gnus-intro/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=jwz7aYUWIbM">https://www.youtube.com/watch?v=jwz7aYUWIbM</a></p>
         
         <p>In this video tutorial I offer a tour around the main interfaces of
Gnus, the built-in Emacs newsreader and email client.</p>

<p>I switched to Gnus full-time about a week ago.  I use it to keep track
of mailing lists and to handle my email correspondence.  The experience
is quite pleasant and I am excited about the possibilities it opens up.</p>

<p>See <a href="https://protesilaos.com/dotemacs">my dotemacs</a> for the
documentation and package declarations I provide.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Released Modus themes 0.5.0</title>
      <description>Information about the latest release of my highly-accessible themes for Emacs.</description>
      <pubDate>Sun, 26 Jan 2020 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2020-01-26-modus-themes-0-5-0/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2020-01-26-modus-themes-0-5-0/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>I just published version <code>0.5.0</code> of the Modus themes.  These are my
highly-accessible themes for GNU Emacs.  They conform with the WCAG AAA
standard for colour contrast accessibility (a minimum contrast ratio of
7:1 between the foreground and background values).  You can find the
packages on MELPA:</p>

<ul>
  <li><code>modus-operandi-theme</code> (light)</li>
  <li><code>modus-vivendi-theme</code> (dark)</li>
</ul>

<hr />

<p>This release contains support for several new packages and lots of
refinements to existing ones.  A lot of work went into making the
themes more robust by reviewing the inheritance of styles from one
face group to another (in general, the <code>:inherit</code> property should not
be used frivolously).  Several subtle changes were made to the colour
palette of both themes to ensure consistency, enable more possible
combinations, and avoid potential ambiguity under certain potential
circumstances.</p>

<p>Overall, this release gives me confidence that the themes have reached
a fairly stable state.  What follows is an overview of the changes
since version 0.4.0 (2020-01-02).</p>

<p>Added support for:</p>

<ul>
  <li><code>equake</code></li>
  <li><code>flymake</code></li>
  <li><code>focus</code></li>
  <li><code>fountain</code> (aka <code>fountain-mode</code>)</li>
  <li><code>git-lens</code></li>
  <li><code>git-timemachine</code></li>
  <li><code>hi-fill-column</code></li>
  <li><code>highlight-blocks</code></li>
  <li><code>info-colors</code></li>
  <li><code>lsp-mode</code></li>
  <li><code>lsp-ui</code></li>
  <li><code>proced</code> (built-in)</li>
  <li><code>regexp-builder</code> (built-in)</li>
  <li><code>suggest</code></li>
</ul>

<p>Refinements:</p>

<ul>
  <li>The header line uses its own dedicated colours.  Several changes
were made in <code>eww</code>, <code>info</code>, <code>elfeed</code>, <code>magit</code>, <code>flycheck</code> to make
sure that any accent value that appears there conforms with the
overarching accessibility objective of the Modus themes (contrast
ratio of &gt;= 7:1, else WCAG AAA).</li>
  <li><code>ivy</code> no longer uses a box style for the current line, as that was
not always reliable.  Appropriate colours are used instead.</li>
  <li><code>org-mode</code> blocks use a foreground value that distinguishes their
opening and closing tags from source code comments.</li>
  <li>The <code>org-ellipsis</code> face was configured to always inherit the looks
of its respective heading or element, rather than have its own
excessive styling.</li>
  <li><code>paren-match</code> has colours that are designed specifically for it.
This is done to retain their utility while making sure they are not
mistaken for some other type of feedback.</li>
  <li><code>magit</code> has explicit styles for the mode line process indicators,
instead of inheriting from another face.  The intention is to use
foreground values that are designed specifically for use on the mode
line (the minimum contrast ratio requirement).</li>
  <li><code>erc</code> faces have been thoroughly reviewed in the interest of better
usability.  Its mode line indicators now use appropriate colours.</li>
  <li>The faces of the <code>messages</code> library have been thoroughly reviewed.
This affects various email interfaces, but also <code>elfeed</code> entry
metadata headings.</li>
  <li><code>whitespace-mode</code> no longer has a newline character that stands out.
That kind of emphasis was not necessary, given that the symbol used
is a dollar sign, which is already far more visible than a mid dot.</li>
  <li><code>font-lock</code> (generic syntax highlighting) has better colour
combinations for regexp grouping constructs.</li>
  <li><code>rainbow-delimiters</code> was given its missing base error face.</li>
  <li><code>git-commit</code> comment action uses a slightly different foreground
value than before to better match its context.</li>
  <li><code>isearch</code> and <code>query-replace</code> use colours that properly denote each
action’s utility.</li>
  <li><code>visual-regexp</code> has been reviewed to make the matching groups more
distinct from each other.</li>
  <li><code>occur</code> and any other buffer that relies on the <code>match</code> face can now
benefit from the new colour combinations, in that its results cannot
be confused for the active <code>isearch</code> or <code>query-replace</code> or even
their lazily highlighted results (or, indeed, of any other search
tool).</li>
  <li><code>company</code> uses faces for its search feedback that are consistent
with other search metaphors.</li>
  <li>Emacs 27’s new <code>:extend</code> property is only implemented where
necessary (note that the latest release is version 26.3).</li>
</ul>

<hr />

<p>For more information, check the <a href="https://gitlab.com/protesilaos/modus-themes">git repository of the
modus-themes</a>.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Primer on regular expressions inside of Emacs</title>
      <description>In this video tutorial I show how to use regexp notation to solve practical problems in Emacs.</description>
      <pubDate>Thu, 23 Jan 2020 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2020-01-23-emacs-regexp-primer/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2020-01-23-emacs-regexp-primer/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=TxYGHjKBMUg">https://www.youtube.com/watch?v=TxYGHjKBMUg</a></p>
         
         <p>In this video tutorial I show how to use regular expression syntax to
solve various practical problems in Emacs.</p>

<p>Knowledge of regexp notation is not a prerequisite to using Emacs
effectively.  In fact, you can be very productive without knowing
anything about regular expressions.  However, knowing those things
will certainly boost your productivity and make Emacs an even more
powerful tool at your hands.</p>

<p>See <a href="https://protesilaos.com/dotemacs">my dotemacs</a> for the
documentation and package declarations I provide.</p>

<hr />

<p>This is the full text of my presentation, which was done using
<code>org-mode</code> (check my dotemacs for presentations with Org).</p>

<pre><code>* Emacs regular expressions in practice

Emacs has a few ways to operate on regexp matches, such as:

+ =isearch=
+ =query-replace=
+ =keep-lines=
+ =flush-lines=

To make our life easier, we can practice with the built-in
=regexp-builder= or the third-party package =visual-regexp=.  This demo
will rely on the latter.

If you have the manual you can run =C-h r i regexp= to get to the
relevant chapter.  *Do it!*

** Line boundaries

The caret =^= denotes the beginning of the line.

The dollar sign =$= marks the end.

Match all lines that start with a space:

Emacs
Emacs
 Emacs
Emacs
 Emacs

And all that end with a capital =S=:

emacs emacS
emacS emacs
emacs emacs
emacS emacS

** Remove or keep lines

Remove the empty lines.  Then keep the ones that contain "username".

&lt;username&gt;&lt;![CDATA[name]]&gt;&lt;/username&gt;
emacs emacS
emacS emacs
emacs emacs
emacS emacS



&lt;userName&gt;&lt;![CDATA[nom]]&gt;&lt;/userName&gt;
emacs emacS
emacS emacs
emacs emacs
emacS emacS




&lt;username&gt;&lt;![CDATA[name]]&gt;&lt;/username&gt;
emacs emacS
emacS emacs
emacs emacs
emacS emacS

** The dot character

The dot or full stop =.= means matches every character except the
newline.

Match these words using their common part =ired= as a string.

dired
fired
mired
tired
wired

** Character sets and ranges

A set of individual characters is marked between brackets =[]=.

Sets can be written as ranges:

| Range      | Scope                                      |
|------------+--------------------------------------------|
| [a-z]      | all lower cases alphabetic characters      |
| [A-Za-z]   | all upper or lower case letters            |
| [a-z0-9]   | lower case alphabet or numbers 0 through 9 |
| [abcd1234] | letters a,b,c,d and numbers 1,2,3,4        |

Match both of those using a character set for the first letter:

emacs
Emacs

Match those that end with a number:

Emacs
emacs-27
emacs-26
GNU emacs

** Difference between postfix operators ?, +, *

"Postfix" means that it comes after a given set and alters its scope.

=?= match the previous term zero or one time.
=+= match the previous term one or more times.
=*= match the previous term zero or as many times as possible.

Match the =s= optionally:

day
days

Use =prote= followed by a postfix:

prot
prote
proteeee

** Grouped matches

A group is enclosed inside escaped parentheses =\(GROUP\)=.

Match both of these, including the optional suffix =ig=:

conf
config

** Greedy versus non-greedy

Postfix charaacter are greedy by default.  "Greedy" matches the
longest possible part.  Whereas "non-greedy" corresponds to the
shortest.

A non-greedy variant is used when the postfix is followed by =?=.

Using the =.*= construct, match items both greedily and not:

Hello world
Hello world world world world

** Multiple groups

Match the alphabetic and numeric parts in two separate groups.

emacs27
emacs26
emacs25
emacs24

** Literal hyphen and dot

Match the hyphen as part of the alphabetic group and the dot as part
of the numeric one.

emacs-27.1
emacs-26.3
emacs-25.2

** Exclude sets

To exclude a set you prepend a caret sign: =[^SET]=

Match every line except those that start with a capital letter.

GNU
Emacs
org-mode
regexp
emacs_lisp
Linux
guix

** Alternative groups with literal brackets

Use a character sets that matches =name= and =nom=.

name
nom

Then:

1. Match the =username= variants' =[name]= or =[nom]=.
2. Replace the match with =[PROT]=.


&lt;username&gt;&lt;![CDATA[name]]&gt;&lt;/username&gt;
&lt;nameuser&gt;&lt;![CDATA[nam]]&gt;&lt;/nameuser&gt;
&lt;userName&gt;&lt;![CDATA[nom]]&gt;&lt;/userName&gt;
&lt;nameuser&gt;&lt;![CDATA[nome]]&gt;&lt;/nameuser&gt;

** Either match

To target either set, use =\|=.

Prepend =vr/= to the first =group= and =match= on each line.

`(group-0 ((group (:inherit modus-theme-intense-blue))))
`(group-1 ((group (:inherit modus-theme-intense-magenta))))
`(group-2 ((group (:inherit modus-theme-intense-green))))
`(match-0 ((match (:inherit modus-theme-refine-yellow))))
`(match-1 ((match (:inherit modus-theme-refine-yellow))))

** Running elisp functions on groups

Run elisp by escaping the comma =\,= and then following it with a symbol
inside parentheses: =\,(FUNCTION)=.

Using the =.ired= pattern from earlier, run a replace command where you
must execute the =upcase= function on the second/middle match.  Keep the
rest in tact.

direddireddired
firedfiredfired
miredmiredmired
tiredtiredtired
wiredwiredwired
</code></pre>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Isearch powers in keyboard macros (Emacs)</title>
      <description>In this video I demonstrate some of the powers of Isearch through a keyboard macro (isearch is built into Emacs).</description>
      <pubDate>Tue, 21 Jan 2020 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2020-01-21-emacs-isearch-kmacro/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2020-01-21-emacs-isearch-kmacro/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=Ad2grH_wFjk">https://www.youtube.com/watch?v=Ad2grH_wFjk</a></p>
         
         <p>In this video I demonstrate some of the powers of <code>isearch</code> through a
keyboard macro.  This explains why I still rely on this unassuming yet
potent built-in tool while I also have a package declaration for
<code>swiper</code>.</p>

<p>See <a href="https://protesilaos.com/dotemacs">my dotemacs</a> for the
documentation and package declarations I provide.</p>

<p>For the sake of completeness, Swiper is a search tool underpinned by
the Ivy completion framework that I use: it fills a different niche
than that of Isearch.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Emacs: rules for windows and buffer placement</title>
      <description>In this video I present various ways of controlling the display of buffers in windows or frames.</description>
      <pubDate>Tue, 07 Jan 2020 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2020-01-07-emacs-display-buffer/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2020-01-07-emacs-display-buffer/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=rjOhJMbA-q0">https://www.youtube.com/watch?v=rjOhJMbA-q0</a></p>
         
         <p>In this video I present various ways of controlling the display of
buffers in windows or frames.  The basic rule-set is implemented by
customising <code>display-buffer-alist</code>, while other parameters are passed to
custom functions that I have written.</p>

<p>See <a href="https://protesilaos.com/dotemacs">my dotemacs</a>.  Make sure to read
the documentation I provide there.  Furthermore, you can study those
issues in further detail through the <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/index.html">The GNU Emacs Lisp Reference
Manual</a>.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Released Modus themes 0.4.0</title>
      <description>Information about the latest release of my highly-accessible themes for Emacs.</description>
      <pubDate>Thu, 02 Jan 2020 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2020-01-02-modus-themes-0-4-0/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2020-01-02-modus-themes-0-4-0/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>I just published version <code>0.4.0</code> of the Modus themes.  These are my
highly-accessible themes for GNU Emacs.  They conform with the WCAG AAA
standard for colour contrast accessibility (a minimum contrast ratio of
7:1 between the foreground and background values).  You can find the
packages on MELPA:</p>

<ul>
  <li><code>modus-operandi-theme</code> (light)</li>
  <li><code>modus-vivendi-theme</code> (dark)</li>
</ul>

<hr />

<p>This is an overview of the changes since version <code>0.3.0</code> (2019-12-25).</p>

<p>Add support for:</p>

<ul>
  <li><code>ert</code></li>
  <li><code>flycheck-indicator</code></li>
  <li><code>mentor</code></li>
  <li><code>mu4e-conversation</code></li>
  <li><code>powerline-evil</code></li>
  <li><code>telephone-line</code></li>
  <li><code>vc</code> (built-in version control)</li>
</ul>

<p>Refinements to already-supported packages:</p>

<ul>
  <li><code>company-mode</code> (several refinements)</li>
  <li><code>doom-modeline</code> (major review)</li>
  <li><code>helm</code> (several tweaks)</li>
  <li><code>hl-line-mode</code> (use unique background)</li>
  <li><code>ivy</code> (improve matching line)</li>
  <li><code>line-number-mode</code> (minor tweaks)</li>
  <li><code>markdown-mode</code> (comprehensive expansion)</li>
  <li><code>mode-line</code> (more appropriate styles for the highlight)</li>
  <li><code>powerline</code> (minor tweaks)</li>
  <li><code>region</code> (use unique background)</li>
  <li><code>swiper</code> (improve matching line in main window)</li>
  <li><code>whitespace-mode</code> (several refinements)</li>
  <li><code>mu4e</code> (tweak <code>mu4e-modeline-face</code> for consistency)</li>
</ul>

<p>Miscellaneous:</p>

<ul>
  <li>Fix actual and potential problems with cursor faces that would distort
the use of appropriate background and foreground colours. The
documentation stipulates that the <code>cursor</code> face cannot be inherited by
other faces, due to its peculiar nature of only recognising the
background colour.</li>
  <li>Add support for more bold constructs in code.  As with all such
options, it is disabled by default, expecting the user to explicitly
opt in.</li>
  <li>Declare additional custom faces.  Only meant for internal use.</li>
  <li>Subtle refinements to “active” colour values in both Modus Operandi
and Modus Vivendi.  These mostly concern the mode line (with a few
special exceptions), where emphasis has been placed on the need to
provide greater contrast between accent values that can be used there.</li>
  <li>Minor documentation refinements.</li>
</ul>

<hr />

<p>For more information, check the <a href="https://gitlab.com/protesilaos/modus-themes">git repository of the
modus-themes</a>.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Released Modus themes 0.3.0</title>
      <description>Information about the latest release of my highly-accessible themes for Emacs.</description>
      <pubDate>Wed, 25 Dec 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-12-25-modus-themes-0-3-0/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-12-25-modus-themes-0-3-0/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>I just published version <code>0.3.0</code> of the Modus themes.  These are my
highly-accessible themes for GNU Emacs.  They conform with the WCAG AAA
standard for colour contrast accessibility (a minimum contrast ratio of
7:1 between the foreground and background values).  You can find the
packages on MELPA:</p>

<ul>
  <li><code>modus-operandi-theme</code> (light)</li>
  <li><code>modus-vivendi-theme</code> (dark)</li>
</ul>

<p>Below is the complete log of all the relevant changes since <code>0.2.0</code>
(2019-12-18).</p>

<hr />

<ul>
  <li>Add support for the following packages:
    <ul>
      <li><code>apt-sources-list</code></li>
      <li><code>calfw</code></li>
      <li><code>counsel-css</code></li>
      <li><code>counsel-notmuch</code></li>
      <li><code>counsel-org-capture-string</code></li>
      <li><code>cov</code></li>
      <li><code>disk-usage</code></li>
      <li><code>evil-visual-mark-mode</code></li>
      <li><code>geiser</code></li>
      <li><code>keycast</code></li>
      <li><code>org-journal</code></li>
      <li><code>org-noter</code></li>
      <li><code>paren-face</code></li>
      <li><code>powerline</code></li>
      <li><code>vc</code></li>
      <li><code>xah-elisp-mode</code></li>
    </ul>
  </li>
  <li>Explicitly style the following packages (these were already covered,
in terms of the colours they used, but are now targeted directly):
    <ul>
      <li><code>calendar</code></li>
      <li><code>counsel</code></li>
      <li><code>cursor</code></li>
      <li>package (<code>M-x list-packages</code>)</li>
    </ul>
  </li>
  <li>Minor tweaks to face groups:
    <ul>
      <li><code>dired</code></li>
      <li><code>compile</code></li>
    </ul>
  </li>
  <li>Fixes and refinements:
    <ul>
      <li>Documentation strings will now inherit the option for slanted
constructs (off by default – see the README about all the user
options).</li>
      <li>Comment delimiters have the same styles as the body of the comment
to avoid inconsistencies when the option for slanted constructs is
enabled.</li>
      <li>The line number that is displayed in the compile log is now
correctly styled.</li>
      <li>Removed duplicate entries for <code>ivy-remote</code> and added
<code>ivy-separator</code>.</li>
      <li>Ensure that the minibuffer prompt is always above the minimum
contrast ratio of 7:1, by using a more appropriate shade of cyan.</li>
      <li>Properly reference a couple of variables in Modus Vivendi.</li>
    </ul>
  </li>
  <li>Internal adjustments:
    <ul>
      <li>Decouple the core <code>dired</code> faces from those of external packages.</li>
      <li>Same for org and <code>org-recur</code>.</li>
    </ul>
  </li>
  <li>Minor documentation updates.</li>
</ul>

<hr />

<p>For more information, check the <a href="https://gitlab.com/protesilaos/modus-themes">git repository of the
modus-themes</a>.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>All about switching to Emacs (video blog)</title>
      <description>In this video I offer the information you need before deciding to switch to GNU Emacs.</description>
      <pubDate>Fri, 20 Dec 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-12-20-vlog-switch-emacs/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-12-20-vlog-switch-emacs/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=FLjbKuoBlXs">https://www.youtube.com/watch?v=FLjbKuoBlXs</a></p>
         
         <p>In this video presentation I talk at length about the theme of switching
to GNU Emacs.  I first discuss what exactly makes Emacs unique.  Then I
talk the issue of the Emacs key bindings and their underlying method.  I
also offer some thoughts for when it would be a bad idea to switch to
Emacs, concluding that this is a decision that needs to be thought
through very carefully.</p>

<p>The presentation was done inside of Emacs, using nothing but plain text,
which I append in the Annex below.</p>

<p>Copy the code from <a href="https://protesilaos.com/dotemacs">my dotemacs</a>.</p>

<h2>Annex with the plain text of the presentation</h2>

<pre><code>#+TITLE: Vlog: switching to Emacs
#+AUTHOR: Protesilaos Stavrou (https://protesilaos.com/)

* Switching to Emacs

Why you might want to switch.  Or why you may be better off without it.

** Emacs as a platform

These are the absolute essentials of what make Emacs special.

*** Emacs is not just a text editor

Emacs is a lisp interpreter:

+ Its core is written in C.
+ And most of what you work with is done in elisp (emacs lisp).

Emacs was never meant to just edit text.

It is designed to be extended in order to meet the user's needs.

/Extensibility/ is the quintessential Emacs quality.

You can modify any piece of elisp /in real time/.

Just evaluate some relevant function (modify an existing one or write
something new).

Extensibility presupposes /instrospectable/ functionality.  You can:

+ Find documentation for every aspect of Emacs, from inside of Emacs.
+ Learn about the function that a key binding executes.
+ Study the source of any function.

*** Extensibility is great

Use Emacs for any kind of text-heavy purpose:

1. email
2. news feeds
3. music playback
4. file management
5. agenda, calendar, to-do (org-mode)…

And several of these can be combined, such as in my case:

- bongo + dired (music management)
- mu4e + org-capture (store direct link to email as TODO)
- elfeed + org-capture (same for feeds)

*** Emacs as a Unix front-end

Emacs can be your interactive, general-purpose OS controller.

You can think of Emacs as a customisable interface for most CLI tools.

These are just some examples drawn from recent videos I did:

| Emacs           | Unix                 |
|-----------------+----------------------|
| dired           | cd,ls,cp,mv,rm,mkdir |
| find-name-dired | find + dired         |
| find-grep-dired | grep + dired         |
| counsel-rg      | rg (ripgrep)         |
| counsel-fzf     | fzf                  |

The key is /interactivity/.

You still use Unix tools.  They offer a nice user experience.

*** Other uses of Emacs

Emacs implements a text editor (surprise!).

In addition, Emacs can multiplex "windows" (splits/panes).

It can also easily switch between open/recent windows/files (buffers).

Combine those CLI goodies with keyboard macros, search+replace, etc.

It is a complete package.  There is even a window manager for it: EXWM.

** Emacs keys are not crazy

They are based on mnemonics and simple conventions.

Once you learn the basics, you can expand with ease.

*** Basic conventions

Take =C-x= and =M-x=:

+ The former invokes the command bound to a key chord.
+ The latter is the extended version: call command by its name.

Here are some more conventions:

| Key   | Scope      |
|-------+------------|
| C-f   | character  |
| M-f   | word       |
| C-M-f | expression |

You see the pattern: small, larger, largest.

*** Strong mnemonics

With a little bit of experience, you can remember a lot of things.

For example, you learn that the prefix for all help commands is =C-h=.

So once you know that, you can recall common extensions:

| Key   | Reference            |
|-------+----------------------|
| C-h f | help about FUNCTIONS |
| C-h k | help about KEYS      |
| C-h m | help about MODES     |
| C-h v | help about VARIABLES |

Once you are in the middle of a key chord, hit =C-h= to get possible
completion candidates (works by default and also with =which-key=).

These, by the way, link to the introspectable nature of Emacs.

*** Mnemonics help with scaling knowledge

Just follow conventions and you can implement your own keys.

Here is a sample of my scalability (some invoke custom functions).

| Key chord | Command            |
|-----------+--------------------|
| M-s g     | counsel-git-grep   |
| M-s n     | dired-narrow       |
| M-s r     | counsel-rg         |
| M-s s     | swiper-multi       |
| M-s z     | counsel-fzf        |
| M-s %     | anzu-query-replace |

Now look at the commands on the table.  All of them are "searches".

The standard search is =C-s=.  A more advanced search must be =M-s=.

But because there are many advanced searches, =M-s= has to be a prefix.

Look at =M-s %=.  It extends the principle of =M-%= (=query-replace=).

*Mnemonics and good conventions help you acquire knowledge at scale.*

Other possible good keys, based on the above:

| Key chord | Possibilities |
|-----------+---------------|
| M-s f     | Files?        |
| M-s d     | Directories?  |
| …         | …             |

*** Custom key bindings

Emacs is meant to be used by YOU.  Configure it as you will.

Keys are the first thing you want to be comfortable with.

Once you grasp the basics, you can adapt Emacs to your liking.

Follow conventions: you can easily scale your custom keys as well.

Some examples of my custom keys.  These use the =Super= modifier:

| Key binding | Alias for default |
|-------------+-------------------|
| s-o         | C-x o             |
| s-b         | C-x b             |
| s-f         | C-x f             |
| s-d         | C-x d             |

There also are some keys that are reserved for users:

+ =C-c= KEY
+ Functions keys F{5-9}

Others are reserved for packages (major modes):

+ =C-c= followed by a control character or a digit

*But you can ultimately customise those as well.*

*** Let M-x be your friend

You do not need to bind every function to a key.  Rely on =M-x=.

Use a good scoring system to let it "guess" what you want.

For example, use =ivy= with =amx= or =prescient= (I switched to the latter).

It will surface the most frequent and recent commands.

*** I don't care!  Just give me a good text editor!

That is because you still think of Emacs as a text editor.

At any rate…

Use =evil-mode=.  It emulates Vim inside of Emacs.

=evil-mode= has lots of users and frameworks built around it.

OR

Maybe you should not switch to Emacs at all.  Let's talk…

** You do not have to switch

There is no pressure to use Emacs.  No-one will judge you for it.

*** People do not care if you use Emacs or not

No employer will double your wage just because you have a "dotemacs".

Nobody will invite you to regale them with some obscure =M-x butterfly=.

You do not win social points by using Emacs.

Emacs will not, in and of itself, make you an elite hacker (though if
you are a hacker at heart, you will appreciate Emacs)

Emacs is just a tool.  A possible option out of many good alternatives.

Emacs is not a substitute for social status or prestige.

*** Is your current setup productive?

If yes, then why would you want to switch to Emacs?

Do you realise that Emacs is a platform and, in some respect, a state of
mind?

Are you sure you want to proceed?

Do not switch to Emacs just so you can re-create your current setup.
Your workflow is already good for your use-case.

There's no point in doing a lateral step towards re-implementing your
working system inside of Emacs.  Doing it just for that is too much
trouble for too little value.

(this applies to other things as well such as why switch from i3wm to
bspwm if what you have works perfectly fine for you?)

*The grass is not always greener on the other side.*

** Emacs is a commitment

You need to put in the effort.

It is not some project you carry out over the weekend.

*** You cannot be an "Emacs tourist"

You distro-hop or switch window managers (in the free software space):

+ you experiment and learn a lot;
+ doable, lots of similarities.

But Emacs is different: it is its own thing; /sui generis/ if you will.
To switch to Emacs you must be prepared for what is to come.

It is like changing your habits: you have a longer-term goal in mind.
You understand the consequences of your choices.

For example, you do not relocate to the mountain and wonder where all
the accoutrements of city life are.

You make a conscious decision.  You know what to expect.

Emacs requires deliberation.

*Think things through.  Do not set yourself up for failure.*

If you come to Emacs expecting a "more powerful" editor out-of-the-box,
/you will be disappointed/.

*** The Emacs mindset

Emacs is your conduit to an integrated computing environment.

You want to switch to Emacs because you are a power user.

You seek ultimate control over your computing interfaces.

You hate inconsistencies.  You like predictability.

Furthermore, you enjoy learning and understand that whatever you do, you
*need to read the docs*.

This is the "Emacs mindset".

Are you already a CLI power user?

Do you have a bespoke desktop session with your own dotfiles?

Do you enjoy tweaking every aspect of it?

If so, you already have the right outlook: give Emacs a fair chance.

Use it for, say, two months full-time.

*Let Emacs have your undivided attention*.

*** There is no shortcut to developing expertise

Whether you go with the default, some framework, or someone else's
configurations, you /still need to read the documentation/.

To become proficient, you must put in the effort.  It is the same with
every field of endeavour.  You have to earn it.

Emacs will be your friend once you know what you are telling it to do.

Learn by example, read the source code, study the help pages.  All of
these can be done inside of Emacs, because it is introspectable.

Remember—Emacs is not for tourists.

This is not some tacit elitism.  It is a matter of fact:

+ Emacs is a powerful tool, not a toy.
+ All such tools have a steeper learning curve.

Emacs requires patience and perseverance until you can master it.

Take your time.

*** Should I go vanilla or choose an Emacs framework/distro?

I can only share my personal experience here.

I switched to Emacs in July (2019).  I started from scratch:

+ no expectations
+ no rush to copy my previous setup
+ keep an open mind
+ judge only after being exposed to the defaults
+ gradually build up the skills

This is how I like it.  It grows organically.

You gradually build your own tool, with care and precision.

I can only recommend this path.  It is the best way to learn the
peculiarities of Emacs.

It is the best way to understand what makes Emacs unique.

(hint: it is not the idiosyncratic key bindings)

I am not against using frameworks.  They offer a polished experience.

Frameworks allow you to be productive in virtually no time.

But it can be difficult to understand how they are pieced together.

They deny you of a unique opportunity: to learn by doing.

(this is also why it is good to build your custom desktop session or
install Arch/Void/Gentoo/whatever the "right way")

*** When the switch to Emacs matters or not

To recapitulate.  The switch to Emacs should not be taken lightly.

Do it if you wish to pursue one or more of the following:

+ Fulfil the potential of the "Emacs mindset" of integrated computing.
+ Learn about Emacs Lisp or work with Lisps in general.
+ Engage with this wonderful subset of the free software community.
+ Satisfy your inquisitive and dubitative nature (knowledge as an end).

Conversely, do not switch to Emacs, if:

+ You are already happy with what you got.
+ You are not willing to unsettle your yourself.
+ You want something that "just works" for everything.
+ You wish to become popular among your peers.
</code></pre>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>FZF with ace-window placement (Emacs)</title>
      <description>In this video I show how I integrate my FZF front-end with ace-window.  Fuzzy find files and place them where you want in the Emacs frame.</description>
      <pubDate>Mon, 16 Dec 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-12-16-emacs-ivy-fzf-ace-window/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-12-16-emacs-ivy-fzf-ace-window/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=I3BvGZ3m8Oo">https://www.youtube.com/watch?v=I3BvGZ3m8Oo</a></p>
         
         <p>In this video I show how I integrate my <code>fzf</code> front-end with
<code>ace-window</code>.  This makes it possible to fuzzy find files and also place
them exactly where you want in the Emacs frame.</p>

<p>Also check <a href="https://protesilaos.com/codelog/2019-12-15-emacs-ivy-fzf-rg/">the video I did
yesterday</a>,
with regard to the <code>fzf</code>, <code>ripgrep</code>, and <code>counsel</code> workflow.</p>

<p>Copy the code from <a href="https://protesilaos.com/dotemacs">my dotemacs</a>.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Fuzzy search with “Ivy actions” for FZF and RIPGREP (Emacs)</title>
      <description>In this video I show a couple of my functions to search for file names or file contents recursively, using Ivy/Counsel, FZF and RIPGREP.</description>
      <pubDate>Sun, 15 Dec 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-12-15-emacs-ivy-fzf-rg/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-12-15-emacs-ivy-fzf-rg/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=IDkx48JwDco">https://www.youtube.com/watch?v=IDkx48JwDco</a></p>
         
         <p>In this video I demonstrate a workflow for searching for files
recursively inside of a directory, using either a partial file name or
through the contents of a file.</p>

<p>My functions leverage two external programs: <code>fzf</code> and <code>rg</code> (or
<code>ripgrep</code>).  These are parsed through the Ivy completion framework and
its general Counsel front-end.  In addition, I show the power of custom
“Ivy actions” to dynamically change the scope of the search from file
names to contents and vice versa, or to just switch the root directory.</p>

<p>For this setup check <a href="https://protesilaos.com/dotemacs">my dotemacs</a>.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Search+Replace across multiple files in Emacs</title>
      <description>In this video I demonstrate a few techniques to replace search matches across a number of files or buffers, using a variety of tools.</description>
      <pubDate>Sun, 08 Dec 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-12-08-emacs-multi-replace/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-12-08-emacs-multi-replace/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=rLF9oTmVFsc">https://www.youtube.com/watch?v=rLF9oTmVFsc</a></p>
         
         <p>In this video I demonstrate a few techniques to replace search matches
across a number of files or buffers, using a variety of tools.  The
tools I use involve:</p>

<ul>
  <li><code>counsel-git-grep</code>, which is powered by the <code>ivy</code> completion
framework and which can edit its output with <code>wgrep</code>.</li>
  <li><code>ivy-switch-buffer</code>, followed by <code>ibuffer</code> and <code>occur</code>.</li>
  <li><code>dired</code>, followed by an interface that looks like that of <code>occur</code>.</li>
</ul>

<p>Other commands where <code>query-replace</code> and keyboard macros.</p>

<hr />

<p>For my setup check <a href="https://protesilaos.com/dotemacs">my dotemacs</a>.  The
theme used in this video is “Modus Operandi” (<code>modus-operandi-theme</code>)
which is available on MELPA.  For more, check the <a href="https://gitlab.com/protesilaos/modus-themes">Modus themes on
GitLab</a>.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Tips and tricks for Ivy (Emacs)</title>
      <description>In this video I demonstrate some of the "hidden" or less obvious features of Ivy</description>
      <pubDate>Thu, 05 Dec 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-12-05-emacs-ivy-tips-tricks/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-12-05-emacs-ivy-tips-tricks/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=QcPenVmmQyM">https://www.youtube.com/watch?v=QcPenVmmQyM</a></p>
         
         <p>In this video I demonstrate some of the ‘hidden’ or perhaps <em>less
obvious</em> features of Ivy.  I also talk about my customisations and their
underlying rationale.</p>

<p>You are free to copy whatever you want concerning Ivy or all the rest
<a href="https://protesilaos.com/dotemacs">from my dotemacs</a>.</p>

<p>My themes are on MELPA.  Search for <code>modus-operandi-theme</code> for the light
version or <code>modus-vivendi-theme</code> for the dark one.  Check the git <a href="https://gitlab.com/protesilaos/modus-themes">repo
of the Modus theme</a> for
more information.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>My Modus themes are on MELPA!</title>
      <description>In this video I announce the availability of my highly-accessible Emacs themes on the MELPA repository.</description>
      <pubDate>Sun, 01 Dec 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-12-01-emacs-modus-melpa/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-12-01-emacs-modus-melpa/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=zofd0O12XWE">https://www.youtube.com/watch?v=zofd0O12XWE</a></p>
         
         <p>My highly-accessible themes for GNU Emacs have been admitted to the
MELPA repository.  The project is called “Modus themes” and it consists
of a light and a dark item.  The light theme is called “Modus Operandi”,
while the other is “Modus Vivendi”.</p>

<p>The Modus themes conform with the WCAG AAA standard for colour contrast.
This is the highest of its kind, which means that all interfaces should
be legible at all times.</p>

<p>Each theme is offered as a standalone package, as explained in the
video.  The easiest way to get them from MELPA is to run:</p>

<pre><code>M-x package-install RET modus-operandi-theme RET
</code></pre>

<p>Or:</p>

<pre><code>M-x package-install RET modus-vivendi-theme RET
</code></pre>

<p>Alternatively, you can install them with <code>use-package</code> declarations,
such as:</p>

<pre><code>(use-package modus-operandi-theme
  :ensure t)

(use-package modus-vivendi-theme
  :ensure t)
</code></pre>

<p>As I mention in the video, the themes are under active development, even
though they already provide support for a comprehensive list of
packages.</p>

<p>Please refer to their repository on GitLab for more information, screen
shots, and source code: <a href="https://gitlab.com/protesilaos/modus-themes">https://gitlab.com/protesilaos/modus-themes</a>.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Git commit fixup with Magit (quick demo)</title>
      <description>In this video I show how to use Magit, the git front-end for Emacs, to fixup staged changes into a local commit.</description>
      <pubDate>Wed, 27 Nov 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-11-27-emacs-magit-commit-fixup/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-11-27-emacs-magit-commit-fixup/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=ZGoImgzWUs8">https://www.youtube.com/watch?v=ZGoImgzWUs8</a></p>
         
         <p>In this short video I show how to fixup staged changes into a local
commit.  This is another approach to rewriting your git history before
pushing to the remote repository.</p>

<p>Also make sure to check my directly-related video demo on how to
<a href="https://protesilaos.com/codelog/2019-11-26-emacs-magit-git-rebase/">interactively rebase git commits with
Magit</a></p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Emacs: interactively rebase git commit with Magit</title>
      <description>In this video I show how to use Magit, the git front-end for Emacs, to interactively rebase commits.</description>
      <pubDate>Tue, 26 Nov 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-11-26-emacs-magit-git-rebase/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-11-26-emacs-magit-git-rebase/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=7qEoSr9Mii4">https://www.youtube.com/watch?v=7qEoSr9Mii4</a></p>
         
         <p>In this screen cast I demonstrate how to use <code>magit</code>, the <em>superb</em> git
porcelain for Emacs, to interactively re-base your commits before
pushing them to the remote repository.  This is a good way of rewriting
your local branch’s history, so as to keep things clean and make them
easier to understand.</p>

<p>Also check my other short video on the same principle: <a href="https://protesilaos.com/codelog/2019-11-27-emacs-magit-commit-fixup/">git commit fixup
with
Magit</a>.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Emacs: use DIRED and BONGO to store playlists</title>
      <description>In this video I show how to use the built-in file manager of Emacs (dired) together with Bongo to store your music playlists.</description>
      <pubDate>Mon, 18 Nov 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-11-18-emacs-dired-bongo/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-11-18-emacs-dired-bongo/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=-qo2Ai3pZRk">https://www.youtube.com/watch?v=-qo2Ai3pZRk</a></p>
         
         <p>In this screen cast I demonstrate how to use the power of the built-in
directory editor to create playlists of your media files.  Playlists are
curated file system paths that point to media files or directories that
contain such files.</p>

<p>You can play back the contents of playlists with Bongo.  When you insert
a playlist that contains links to directories, it will insert all media
files recursively.  Otherwise it just adds the music files that are
referenced.</p>

<hr />

<p>As noted in the demo, here is my previous video on how I use <a href="https://protesilaos.com/codelog/2019-11-13-emacs-bongo-music/">Bongo with
Dired</a>
and here is my <a href="https://protesilaos.com/dotemacs">dotemacs</a>, from where
you can get all my configurations for <code>bongo</code>, <code>dired</code>, etc.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Emacs DIRED multi-file permissions</title>
      <description>In this video I show how to use the built-in file manager of Emacs (dired) to change file permissions for multiple items.</description>
      <pubDate>Sat, 16 Nov 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-11-16-emacs-dired-chmod/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-11-16-emacs-dired-chmod/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=pQWa43YvQ2A">https://www.youtube.com/watch?v=pQWa43YvQ2A</a></p>
         
         <p>In this video I show how to use the built-in file manager of Emacs
(dired == directory editor) to change file permissions for multiple
items.  This is yet another clear case where <code>dired</code> proves its utility.</p>

<p>Given the topic of this video, I also offer a primer on file permissions
in Linux (I do not know how it works on other operating systems).</p>

<p>Though not related to this demo, here is the link to my
<a href="https://protesilaos.com/dotemacs">dotemacs</a>.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Emacs workflow for music management</title>
      <description>In this video I show how I manage my music library and play back audio by combining Bongo with Dired.</description>
      <pubDate>Wed, 13 Nov 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-11-13-emacs-bongo-music/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-11-13-emacs-bongo-music/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=zm85Q6m3JDU">https://www.youtube.com/watch?v=zm85Q6m3JDU</a></p>
         
         <p>In this video I showcase my workflow for managing music inside of Emacs.
I use <code>bongo</code> to implement media playback functionalities and combine it
with <code>dired</code> for file/library management.</p>

<p>This is a tangible example of using the power of Emacs to achieve a more
integrated computing experience.</p>

<p>In case you want to copy anything here is the link to my
<a href="https://protesilaos.com/dotemacs">dotemacs</a>.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Free software is political (video reply to Bryan Lunduke)</title>
      <description>In this video blog I share my opinion about the inherent political nature of free software.</description>
      <pubDate>Fri, 08 Nov 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-11-08-free-software-politics/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-11-08-free-software-politics/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=zu1R-gC792g">https://www.youtube.com/watch?v=zu1R-gC792g</a></p>
         
         <p><a href="https://www.youtube.com/watch?v=SVst8HK-2EY">Bryan Lunduke has a video</a>
where he argues that technology is not political and, by extension, free
software is just a technical endeavour.</p>

<p>Here is the part of his opinion that is specifically about free software
and which I use as a basis for my counterpoint:</p>

<blockquote>
  <p>Once you see something as a movement of people with an ideology,
politics comes into play with that.  And to say that there are no
politics involved in free software would clearly be wrong.  Clearly
that would be wrong.  However, free software, in and of itself, is not
political at all.  <strong>It is simply a license applied to software where
source code is available.</strong></p>
</blockquote>

<p>In my video I also refer to a case that Richard Stallman talks about in
one of his presentations.  It concerns a printer and the proprietary
software it came with.  This is <a href="https://www.gnu.org/philosophy/rms-nyu-2001-transcript.txt">the
transcript</a>.</p>

<hr />

<p>I usually do video tutorials about Emacs and other technical free
software topics such as the Binary Space Partitioning Window Manager.
Stay tuned for more.</p>

<p>Links to some current free software projects of mine:</p>

<ul>
  <li><a href="https://protesilaos.com/dotemacs">Dotemacs</a></li>
  <li><a href="https://gitlab.com/protesilaos/dotfiles">Dotfiles</a></li>
  <li><a href="https://gitlab.com/protesilaos/modus-themes">Modus themes</a></li>
  <li><a href="https://gitlab.com/protesilaos/modus-themes">Tempus themes</a></li>
</ul>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Basic applications of “emacsclient”</title>
      <description>A video demonstration of the emacsclient program and some of its main applications.</description>
      <pubDate>Mon, 04 Nov 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-11-04-emacs-emacsclient-basics/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-11-04-emacs-emacsclient-basics/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=BjhcmRMF9qs">https://www.youtube.com/watch?v=BjhcmRMF9qs</a></p>
         
         <p>In this video I cover the basics of <code>emacsclient</code>.  This is a program
that is provided by the standard Emacs distribution.  It allows us to
connect to the running Emacs process—the current server or daemon—in
order to make use of its data (kill ring, buffer list, etc.) or to
evaluate some Emacs Lisp.</p>

<p>Links to relevant projects of mine:</p>

<ul>
  <li><a href="https://protesilaos.com/dotemacs">Dotemacs</a></li>
  <li><a href="https://gitlab.com/protesilaos/dotfiles">Dotfiles</a></li>
  <li><a href="https://gitlab.com/protesilaos/modus-themes">Modus themes</a></li>
  <li><a href="https://gitlab.com/protesilaos/modus-themes">Tempus themes</a></li>
</ul>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Dotfiles: Emacs is now part of my live theme switch</title>
      <description>Details of a git commit that integrates Emacs with my script for performing a system-wide theme switch.</description>
      <pubDate>Fri, 25 Oct 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-10-25-dotfiles-tempus-emacs/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-10-25-dotfiles-tempus-emacs/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>In my dotfiles I have a script for performing a live theme switch across
my entire custom desktop session, built around BSPWM.</p>

<p>As of <a href="https://gitlab.com/protesilaos/dotfiles/commit/9ee6a04755a2b40e0ef6b65509a98e5b6671467c">commit
9ee6a04</a>,
the theme switch also affects Emacs, though it was originally designed
for Vim, Tmux, and other tools.  It uses the <code>emacsclient -e</code> facility
to run an elisp function of mine that toggles between my two
Emacs-specific themes (the “Modus themes”).</p>

<p>Here is the essential code part (with <code>_depcheck</code> just being a function
that checks for the presence of the binary by leveraging <code>command -v</code>):</p>

<pre><code>_emacs() {
    _depcheck emacs

    pgrep -x emacs &gt; /dev/null || return 1

    emacsclient -e "(prot/modus-themes-toggle)"
}
</code></pre>

<p>The commit message is rather comprehensive, so I am quoting it in its
entirety:</p>

<pre><code>Add Emacs theme switch to the T.E.M.P.U.S. script

I just need to provide some background information on this, in order to
avoid confusion.

Tempus themes (Vim, terminals, GTK editors)
-------------------------------------------

The Tempus themes project covers Vim, terminal emulators, and some GTK
text editors (including GNOME Builder).  Its overarching objective is
that of a minimum contrast ration of 4.5:1 (WCAG AA) between the
background and foreground values.  Other tools like Tmux and Dunst all
make use of its colour values.

Because of their roots in terminal emulators, the Tempus themes use the
16-colour palette you find on such tools.  Refer to the portal page for
more on the matter.[1] The project is in a stable state.

Modus themes ("just" GNU Emacs)
-------------------------------

Whereas the Modus themes are designed specifically for Emacs.  They are
much more complex and consist of a wider colour palette that covers the
extensive array of interfaces inside of Emacs.  Their principal
objective is similar to that of the afore-mentioned project: a minimum
contrast ratio of 7:1 (WCAG AAA).

Some items in the Tempus themes collection also conform with this higher
standard, but the project as a whole only guarantees the "AA" score.

Check the git source of the Modus themes.[2] They are under heavy
development.

Project history
---------------

The Tempus themes came first (2017) and are a core part of my custom
desktop session since its early days.  Every relevant interface was
built around them.

As of commit ec885d1 I am in the process of gradually incorporating my
new Emacs setup in my dotfiles.[3]  This means lots and lots of breaking
changes and necessary adjustments.

FEAR NOT: my free/libre book "Prot's Dots For Debian" (PDFD) still
works,[4] because it uses a snapshot of my dotfiles that contains code
before the commit I just referenced.[5] PDFD guides you through the
process of reproducing my custom desktop session on Debian 10 'buster'.
I recently updated it by adding an Annex on the topic of multi-monitor
support in BSPWM (and there have been other minor updates since its
official release in early July 2019).

The T.E.M.P.U.S. script (tempus)
--------------------------------

Now the part that may cause confusion: the TEMPUS script performs a live
theme switch across my entire custom desktop session.  In the past, this
meant using one of the items in the Tempus themes collection to apply
the new colour values.  I thus gave the script a funny and convenient
backronym: Themes Every Meticulous Person Ultimately Seeks (TEMPUS).

Recall that the word "tempus" is Latin for "time" because the first
items of the collection were named after the four seasons:

+ tempus autumn
+ tempus spring
+ tempus summer
+ tempus winter

At any rate, and jokes notwithstanding, the backronym had the technical
upside of offering a straightforward syntax for performing a theme
change via a CLI prompt: you just had to type `tempus' followed by the
unique identifier of an item from the Tempus themes collection.  For
example, to switch to Tempus winter, you would run `tempus winter'.

The other benefit was a more consistent naming convention for the
`dmenu' front-end that offers an interactive medium for selecting an
item from the collection: `tempusmenu'.

I think that the script's name is okay, because it still uses the themes
it was originally designed for.  Besides, I have no intention to remove
support for the Tempus themes.  The project is still relevant.

What I am doing with this commit, is just including a small function
that performs a "theme switch" for yet another component of my custom
desktop session: Emacs.  The fact that Emacs internally uses another
project of mine (the Modus themes) should not really matter.  The
end-user effect is exactly the same as before.

I am just writing all this to make things clear and to refer to the
present commit in case someone asks.

[1]: https://gitlab.com/protesilaos/tempus-themes
[2]: https://gitlab.com/protesilaos/modus-themes
[3]: https://protesilaos.com/dotemacs
[4]: https://protesilaos.com/pdfd
[5]: https://gitlab.com/protesilaos/dotfiles
</code></pre>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Status update: BSPWM and Emacs</title>
      <description>A video update on the state of affairs and my plans for the immediate future.</description>
      <pubDate>Tue, 22 Oct 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-10-22-status-update-bspwm-emacs/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-10-22-status-update-bspwm-emacs/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=JMqP0gFqkwg">https://www.youtube.com/watch?v=JMqP0gFqkwg</a></p>
         
         <p>In this video I talk about the state of affairs concerning my current
projects: (1) BSPWM, (2) Emacs, (3) Modus themes for Emacs.</p>

<p>Below are the links to the topics I mention.</p>

<p>Internal ones:</p>

<ul>
  <li><a href="https://protesilaos.com/pdfd">Prot’s Dots For Debian (PDFD)</a></li>
  <li><a href="https://protesilaos.com/dotemacs">Dotemacs</a></li>
</ul>

<p>And those on my GitLab:</p>

<ul>
  <li><a href="https://gitlab.com/protesilaos/modus-themes">Modus themes</a></li>
  <li><a href="https://gitlab.com/protesilaos/dotfiles">Dotfiles</a></li>
  <li><a href="https://gitlab.com/protesilaos/cpdfd">Code for PDFD</a></li>
</ul>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Vlog on Emacs documentation culture</title>
      <description>A video blog on the importance of good documentation and how it makes Emacs a microcosm of the GNU world-view.</description>
      <pubDate>Sun, 20 Oct 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-10-20-emacs-doc-culture-gnu/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-10-20-emacs-doc-culture-gnu/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=T6OLSl4l4x4">https://www.youtube.com/watch?v=T6OLSl4l4x4</a></p>
         
         <p>In this video blog I do something different than what has been the norm
lately: I just to talk about Emacs rather than demonstrate some of its
cool functionalities.</p>

<p>My thesis is that Emacs has a strong documentation culture, which
extends to the entire experience with this tool.</p>

<p>I also discuss how Emacs is the vivid realisation of the GNU telos,
which is codified in <a href="https://www.gnu.org/philosophy/free-sw.html">the four
freedoms</a>.  Your day-to-day
usage of Emacs will most likely cover—or directly benefit from—all of
them:</p>

<ul>
  <li>to use the software as you wish;</li>
  <li>to study its source and to modify it;</li>
  <li>to share the original;</li>
  <li>to share your changes to the original.</li>
</ul>

<p>Combined with its documentation culture, Emacs is a microcosm of the GNU
project’s vision for software freedom.</p>

<hr />

<p>While not related to this video blog, here is my dotemacs, in case you
want to exercise some of that freedom:
<a href="https://protesilaos.com/dotemacs">protesilaos.com/dotemacs</a>.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>BREAKING: my BSPWM now uses the Hyper key</title>
      <description>This is the first step to a comprehensive review of my dotfiles. It includes several breaking changes.</description>
      <pubDate>Sat, 19 Oct 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-10-19-dotfiles-hyper-key/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-10-19-dotfiles-hyper-key/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>My <a href="https://gitlab.com/protesilaos/dotfiles">dotfiles on GitLab</a> contain
a series of breaking changes.  <strong>Relax:</strong> if you read that repo’s
README, you should know that I do not recommend tracking it directly.
Still, there may be something for you to learn here.  Read more for a
comprehensive overview of the state of affairs.</p>

<hr />

<p>In a previous entry, I documented how to <a href="https://protesilaos.com/codelog/2019-10-10-debian-xmodmap/">set up the Hyper key on
Debian</a>.  My
motive then was to use it inside of my Emacs setup.  However, I have
since revised this approach.  Hyper shall now be used as the main
modifier key for my tiling window manager.  Because of this I am
reverting back full time to my BSPWM session.</p>

<p>I had switched away from my bespoke desktop session in early July, just
after I published my “Prot’s Dots For Debian” or just <a href="https://protesilaos.com/pdfd/">PDFD</a>
(the book that helps users reproduce my setup).  The publication of the
book was an ideal opportunity for me to try something new, so I went
with Emacs.  Because I wanted to use the Super key inside of Emacs, I
could no longer stay on BSPWM, hence my temporary switch to Xfce, where
I disabled all of the desktop environment’s key bindings in an attempt
to focus exclusively on Emacs.</p>

<p>That was the right decision at the time, as it helped me learn this
truly special tool.  With the Hyper key now in place, I no longer face
the constraints that forced me away from BSPWM.  As such, I just pushed
a set of <strong>breaking changes</strong> to my dotfiles’ repo, which do the
following:</p>

<ul>
  <li>Enable the Hyper key, mapping it to the Caps Lock and the right “Win”
respectively.  The Super key is now only available on the left “Win”.</li>
  <li>Implement the necessary <code>setxkbmap</code> options and perform the
concomitant <code>xmodmap</code> configurations during BSPWM initialisation.</li>
  <li>Remove all references to the Super key (<code>mod4</code>) in my SXHKD
configuration files.  The key <code>mod3</code> (aka Hyper) takes their place.</li>
</ul>

<p>I am including the full text of the two commits in the annex to this
blog post (see below).</p>

<p>My longer term objective is to merge my dotfiles with my new Emacs
setup.  The implications will be far-reaching, as I will eventually
remove or otherwise reconsider the inclusion of program configs that are
not part of my Emacs workflow.  This means that I might delete my Vim
settings, as well as anything that has to do with emailing, reading
feeds, etc.</p>

<p>Whatever the case, PDFD continues to work as intended.  I was prescient
enough to use a “snapshot” of my dotfiles, placed in a separate repo,
and to rely on Debian’s legendary stability.</p>

<h2>ANNEX with commit ec885d16 and 257e6ca3</h2>

<p>First the latest fix
(<a href="https://gitlab.com/protesilaos/dotfiles/commit/257e6ca3b584cee20d08ac7dec0d7bfe19a96d22">257e6ca3</a>)
that allowed me to finally write this post.</p>
<pre><code>origin/master 257e6ca3b584cee20d08ac7dec0d7bfe19a96d22
Author:     Protesilaos Stavrou &lt;info@protesilaos.com&gt;
AuthorDate: Sat Oct 19 22:41:22 2019 +0300
Commit:     Protesilaos Stavrou &lt;info@protesilaos.com&gt;
CommitDate: Sat Oct 19 22:41:22 2019 +0300

Parent:     809345e Fix typo in Xmodmap and specify Compose key.
Merged:     dynamicDesktops master mateTerminalDefault modularSXHKD xtermSwitch
Contained:  master
Follows:    v1.0.2-pdfd (10)

Fix mod3 configs (expands on commit ec885d1)

There are many parts to getting this right.

+ Some changes were necessary in Xmodmap.
+ A few options need to be specified.
+ The Maté settings daemon had to be disabled.

I tried switching layouts between the ones I use: US QWERTY and Greek.
The mod3 setup flawlessly now.

Concerning the settings daemon, I still need to find a solution, because
it provides some nice functionality I wish to keep.  Perhaps a more
lightweight daemon could be used here.  Will need to investigate.

3 files changed, 26 insertions(+), 33 deletions(-)
bspwm/.Xmodmap              | 26 +++++++-------------------
bspwm/.config/bspwm/bspwmrc | 31 ++++++++++++++++++-------------
bspwm/.config/sxhkd/sxhkdrc |  2 +-
</code></pre>

<p>And the first one that ushered in the Hyper era
(<a href="https://gitlab.com/protesilaos/dotfiles/commit/ec885d16be726df122d88bcf4494210ae300cfa7">ec885d1</a>)</p>

<pre><code>ec885d16be726df122d88bcf4494210ae300cfa7
Author:     Protesilaos Stavrou &lt;info@protesilaos.com&gt;
AuthorDate: Sat Oct 19 17:08:45 2019 +0300
Commit:     Protesilaos Stavrou &lt;info@protesilaos.com&gt;
CommitDate: Sat Oct 19 17:08:45 2019 +0300

Parent:     582dac7 Change the way Git selects its editor
Merged:     dynamicDesktops mateTerminalDefault modularSXHKD xtermSwitch
Contained:  master
Follows:    v1.0.2-pdfd (8)

BREAKING CHANGES: control session with Hyper key

My entire session is no longer dependent on using the Super key (mod4).
Its function is now performed by Hyper (mod3).  This new modifier key is
defined in `.Xmodmap', which is included in the same Stow package as the
core BSPWM/SXHKD configs (because it is equally important to them).

The `.Xmodmap' enables Hyper and binds it to the Caps lock and the right
"Windows" key.  This means that there no longer exists a toggle for
writing all capital letters.  The Super key is also limited to just the
left Windows key.  This is a tentative design that might be reviewed
upon further consideration.

* * *

The present commit is merely _the first step_ in a major review of my
custom desktop session.  The overarching objective is to eventually
merge my bespoke BSPWM setup with my newer Emacs environment.

For the time being, my "dotemacs" is available from my website[0] and is
stored in a separate repo,[1] but will ultimately be merged with my
dotfiles once all the prerequisites are met.

Expect far-reaching changes to practically everything that I now do
inside of Emacs (writing, emailing, reading…) and is still covered by
specialised tools (vim, mutt, newsboat, ncmpcpp…).  For more on that,
see my video blog on the Emacs mindset and the Unix philosophy (ignore
my remarks on Xfce, as I did not know about `mod3' back then).[2]

[0]: https://protesilaos.com/dotemacs
[1]: https://protesilaos.com/dotemacs
[2]: https://protesilaos.com/codelog/2019-08-09-vlog-emacs-unix/

* * *

If anyone reviewing this has read my "Prot's Dots For Debian",[4] they
should be reminded that PDFD does not track this repo directly.  It has
its own "snapshot" of my dotfiles.[5]

I will not be pushing any of these breaking changes to PDFD for the time
being.  That is a longer term objective that _might happen_ with the
release of Debian 11 'bullseye' (about 22 months from now).

[4]: https://protesilaos.com/pdfd
[5]: https://gitlab.com/protesilaos/cpdfd

4 files changed, 195 insertions(+), 68 deletions(-)
bspwm/.Xmodmap                   |  67 ++++++++++++++++++++++++
bspwm/.config/bspwm/bspwmrc      |   5 ++
bspwm/.config/sxhkd/sxhkdrc      |  83 ++++++++++++++++++++----------
bspwm/.config/sxhkd/sxhkdrc_bspc | 108 ++++++++++++++++++++++++---------------
</code></pre>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Emacs: transpose text objects</title>
      <description>Demo of my customised transposition commands for effectively exchanging the positions of two text objects (lines, words, paragraphs…)</description>
      <pubDate>Wed, 16 Oct 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-10-16-emacs-transpose-text/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-10-16-emacs-transpose-text/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=k5v2iB1FqFw">https://www.youtube.com/watch?v=k5v2iB1FqFw</a></p>
         
         <p>In this screen cast I demonstrate the minor tweaks I have made to Emacs’
various transposition commands.  Their combined effect contributes to a
more efficient workflow.</p>

<p>“Transpose” in this case, means to exchange the positions of two text
objects.  This applies to words, sentences, lines, paragraphs, symbolic
expressions (sexps).</p>

<p>And here is my dotemacs, from where you can copy all my customisations:
<a href="https://protesilaos.com/dotemacs">protesilaos.com/dotemacs</a>.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Emacs: easier keyboard macro counter</title>
      <description>Demo of how to improve the efficiency of the keyboard macro counter that is built into Emacs.</description>
      <pubDate>Mon, 14 Oct 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-10-14-emacs-easier-kmacro-counter/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-10-14-emacs-easier-kmacro-counter/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=CvmDtnnrYDo">https://www.youtube.com/watch?v=CvmDtnnrYDo</a></p>
         
         <p>In this short video I show how to make use of the keyboard macro
counter.  This is a very specialised piece of functionality that is
built into Emacs.</p>

<p>I show once again what I demonstrated in the <a href="https://protesilaos.com/codelog/2019-08-22-emacs-kmacro-counter/">previous demo on the
subject</a>
and then discuss how to improve on that experience: simplify the key
bindings and make the process faster.</p>

<p>And here is my dotemacs, in case you are interested:
<a href="https://protesilaos.com/dotemacs">protesilaos.com/dotemacs</a>.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Debian: set Hyper and other keys with Xmodmap</title>
      <description>Note on using the "xmodmap" utility to remap keys and enable the Hyper modifier.</description>
      <pubDate>Thu, 10 Oct 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-10-10-debian-xmodmap/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-10-10-debian-xmodmap/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>I wanted to improve the Emacs experience for some awkward key bindings
that require you to hold down both Ctrl and Meta.  My goal was to create
a shortcut for <code>C-M-KEY</code> bindings.</p>

<p>While I could not find a way to simulate that combination by a single
key press, I figured I could just use an extra modifier.</p>

<p>Using Super was not an option.  I already have that as a shortcut for
key sequences such as <code>C-x b</code> that become <code>s-b</code>.  So I decided to enable
the Hyper key, since my keyboard does not have one by default (standard
US QWERTY).</p>

<h2>Contents of ~/.Xmodmap</h2>

<p>Here is my <code>~/.Xmodmap</code> in its current form.  It is meant to work on my
Debian 10 ‘buster’ system—your mileage may vary.  The inline comments
should offer the guidance you need.  In short:</p>

<ul>
  <li>Use Caps Lock as an extra Control.  This disables the default
behaviour of locking the letter casing.</li>
  <li>Map Hyper to the right Super (“windows key”).  The left Super remains
in tact.</li>
  <li>Assign Compose to the Menu key (positioned to the right of Super_R).
I use this to type all sorts of useful characters, such as the em
dash.</li>
</ul>

<pre><code>!!!!!!!!!!!!!!!
! Prior notes !
!!!!!!!!!!!!!!!

! These settings have been implemented succesfully on Debian 10
! 'buster' running a variety of desktop environments on top of Xorg.

! To get the current status of the modifiers:
!
!	xmodmap -pm
!
! To find out the key codes that are available:
!
!	xmodmap -pke
!
! Or narrow the results, e.g.:
!
!	xmodmap -pke | grep -E '(Alt|Shift)'
!
! Alternatively, use `xev` to print the key code upon key press.
!
! Here are some of the most likely candidates for changes:
!
!	keycode 37  = Control_L
!	keycode 50  = Shift_L
!	keycode 62  = Shift_R
!	keycode 64  = Alt_L
!	keycode 66  = Caps_Lock
!	keycode 105 = Control_R
!	keycode 133 = Super_L
!	keycode 135 = Menu

!!!!!!!!!!!!!!!!!
! Modifications !
!!!!!!!!!!!!!!!!!

! Clear the modifiers concerned
clear lock
clear mod3
clear mod4

! Set Caps Lock as an extra Ctrl
keycode 66 = Control_L

! Set the Right Super as Hyper
keycode 134 = Hyper_R

!!! OR Set the Right Alt as Hyper
!! keycode 108 = Hyper_R

! Set the Menu key as Compose
keycode 135 = Multi_key

! Add/update the modifiers
add control = Control_L

! Add a new Hyper_R modifier and move Hyper_L from mod4 to mod3
add mod3 = Hyper_L Hyper_R
add mod4 = Super_L Super_R
</code></pre>

<p>Create that file and then load it with <code>xmodmap ~/.Xmodmap</code>.</p>

<h2>Sample of Emacs keys using Hyper</h2>

<p>Everything works as expected on my end.  I can now inspect the functions
that Emacs calls when pressing <code>C-M-KEY</code> (do that with <code>C-h k</code> followed
by the key press you are interested in).</p>

<p>For example, here is a set of aliases.  These do not change the
defaults.  They just provide additional means of accomplishing the same
task (so replace the initial <code>H</code> with <code>C-M</code> to view the original keys).</p>

<pre><code>(use-package lisp
  :bind (("H-f" . forward-sexp)
		 ("H-b" . backward-sexp)
		 ("H-n" . forward-list)
		 ("H-p" . backward-list)
		 ("H-a" . beginning-of-defun)
		 ("H-e" . end-of-defun)
		 ("H-h" . mark-defun)
		 ("H-d" . narrow-to-defun)
		 ("H-k" . kill-sexp)
		 ("H-K" . backward-kill-sexp)
		 ("H-[" . insert-pair)
		 ("H-]" . delete-pair)
		 ("H-SPC" . mark-sexp)))
</code></pre>

<p>I have yet to find a way to simulate <code>C-M-</code> by just pressing <code>H-</code>
without having to define each key binding individually.  For example, I
would like to have something like:</p>

<pre><code>(setq (x-ctrl-keysym x-meta-keysym) 'hyper)  ; Not valid elisp
</code></pre>

<p>With that, Hyper would not be a real modifier.  It would rather be the
same as holding down Ctrl+Alt at the same time.  Will continue exploring
this and update this article accordingly.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Functions to comment code in Emacs</title>
      <description>Demo of the tools that Emacs provides for commenting code.</description>
      <pubDate>Wed, 09 Oct 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-10-09-emacs-comment-functions/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-10-09-emacs-comment-functions/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=bdcqRziKYT0">https://www.youtube.com/watch?v=bdcqRziKYT0</a></p>
         
         <p>In this screen cast I demonstrate the main commenting functions that are
exposed by the built-in <code>newcomment</code> library.  Apart from the defaults,
I also discuss the customisations I have introduced and my custom “do
what I mean” function that I implemented to suit my use-case.</p>

<p>This demo also shows some practical ways of accessing documentation in
Emacs, for libraries, key bindings, variables, functions.  This is the
“self-documenting” editor, after all…</p>

<p>And here is the link to my configuration file, with all the settings I
showed in the video as well as everything else from previous screen
casts: <a href="https://protesilaos.com/dotemacs">protesilaos.com/dotemacs</a>.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>About recentf and virtual buffers in Emacs</title>
      <description>The built-in "recentf" offers quick access to the most recent files. It also interfaces with Ido mode via the [virtual] buffer list.</description>
      <pubDate>Fri, 04 Oct 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-10-04-emacs-recentf-virtual-buffers/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-10-04-emacs-recentf-virtual-buffers/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=Nq5r_E_Cx08">https://www.youtube.com/watch?v=Nq5r_E_Cx08</a></p>
         
         <p>In this screen cast I demonstrate the main uses of <code>recentf</code>.  This is a
package that is built into Emacs.  It stores a list of the most
recently-visited files, allowing us to access them directly even if they
are no longer stored in a buffer.</p>

<p><code>recentf</code> can interface with <code>ido-mode</code> to either improve the selection
of items from the list or to treat them as “virtual buffers”.  The
latter means that recent files are available through the standard
buffer-switching command (by default bound to <code>C-x b</code>).  They are
treated as if they were actual buffers.  Super convenient!</p>

<p>And this is a link to my configuration file, with all the settings I
showed in the video as well as everything else from previous screen
casts: <a href="https://protesilaos.com/dotemacs">protesilaos.com/dotemacs</a>.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Emacs: found that “dired-subtree” has a toggle behaviour!</title>
      <description>The Emacs package "dired-subtree" allows us to navigate the filesystem in a tree-style view. And here is a little secret…</description>
      <pubDate>Fri, 27 Sep 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-09-27-emacs-dired-subtree-toggle/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-09-27-emacs-dired-subtree-toggle/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=vm-FvNdYFcc">https://www.youtube.com/watch?v=vm-FvNdYFcc</a></p>
         
         <p>In this short video I explain how I was able to discover two
<em>undocumented</em> functions of <code>dired-subtree</code>, which define a toggle and a
cyclical behaviour for expanding or contracting a subdirectory inside of
Dired.  I also discuss how to use the built-in methods of Emacs to
discover such hidden features.</p>

<p>And this is a link to my configuration file, with all the settings I
showed in the video as well as everything else, from previous screen
casts: <a href="https://protesilaos.com/dotemacs">protesilaos.com/dotemacs</a>.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Demo of some Emacs micro motions and hacks</title>
      <description>Demonstration of some surgical customisations for greater efficiency.</description>
      <pubDate>Wed, 25 Sep 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-09-25-emacs-micro-motions-hacks/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-09-25-emacs-micro-motions-hacks/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=4-ubCJF9htw">https://www.youtube.com/watch?v=4-ubCJF9htw</a></p>
         
         <p>In this screen cast I demonstrate some of the hacks and small tweaks
that I have accumulated in my “dotemacs”.  I also showcase some of the
default key bindings and explain how I rely on them.</p>

<p>Here is my configuration file, with all the settings I showed in the
video (as well as everything else, from previous screen casts…):
<a href="https://protesilaos.com/dotemacs">protesilaos.com/dotemacs</a>.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Sample of a BSPWM resize method</title>
      <description>Shell script and sample key bindings to resize BSPWM nodes</description>
      <pubDate>Sun, 22 Sep 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-09-22-bspwm-resize-sample/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-09-22-bspwm-resize-sample/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>I was asked to provide some information on how to resize a floating
window in BSPWM.  As I seldom use floating windows, I have never tried
to put much effort into this issue.  Anyhow, here is a <em>skeleton</em> of a
solution.</p>

<h2>The shell script</h2>

<p>Here is the basic code. Place it in a file called <code>bspwm_resize</code> or
something appropriate (and make it executable and add it to your
<code>PATH</code>).</p>

<p>If you need to limit it to floating windows, you could use a check for
<code>bspc query -N -n .floating</code>.</p>

<pre><code>#!/bin/bash

[ "$#" -eq 3 ] || { echo "Needs exactly three arguments."; exit 1; }

motion="$1"
direction="$2"
size="$3"

if [ "$motion" = 'expand' ]; then
	# These expand the window's given side
	case "$direction" in
		north) bspc node -z top 0 -"$size" ;;
		east) bspc node -z right "$size" 0 ;;
		south) bspc node -z bottom 0 "$size" ;;
		west) bspc node -z left -"$size" 0 ;;
	esac
else
	# These contract the window's given side
	case "$direction" in
		north) bspc node -z top 0 "$size" ;;
		east) bspc node -z right -"$size" 0 ;;
		south) bspc node -z bottom 0 -"$size" ;;
		west) bspc node -z left "$size" 0 ;;
	esac
fi
</code></pre>

<h2>The commands for the key bindings</h2>

<p>Then in your SXHKD file, you can use standard keys of your choice or the
less known “continuous input” technique.  I prepared a demo for the
latter.  This specific mode is denoted by the colon sign <code>:</code>.</p>

<p>What it does: you enter the “mode” with the keys to the left of the
colon and then you execute the relevant commands by just pressing what
is to the right of the colon.  So there is no need to continuously press
the entire sequence.</p>

<p>Exit the “mode” with the Escape key.</p>

<pre><code>super + e : {h,j,k,l}
    bspwm_resize expand {west,south,north,east} 50

super + shift + e : {h,j,k,l}
    bspwm_resize contract {west,south,north,east} 50
</code></pre>

<h2>Closing thoughts</h2>

<p>I never developed something specifically for floating windows, because I
rarely use them.  And when I do, it usually is something involving the
mouse, at which point it is acceptable to just resize them with
Alt+Right-click-drag (or move them the same way with Alt and Left click
drag).</p>

<p>That covers it.  Hopefully it gives you something to work with.  If you
need help, please contact me.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Change BSPWM marked border</title>
      <description>Conceptual approach to adjusting the width of a marked window's border in BSPWM.</description>
      <pubDate>Sat, 21 Sep 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-09-21-bspwm-marked-border/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-09-21-bspwm-marked-border/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>The other day I was asked whether it is possible to change the width of
a window’s border while it is marked.  The short answer is affirmative.
This is a piece of functionality I considered but never implemented in
<a href="https://protesilaos.com/pdfd">my free book about BSPWM on Debian</a> 10
‘buster’.</p>

<p>So here is an outline of how it could be achieved.</p>

<h2>Querying the marked nodes</h2>

<p>We can produce the list of all marked windows with:</p>

<pre><code>bspc query -N -n .marked
</code></pre>

<p>You can fine-tune this to your liking by specifying the scope of the
query.  For example <code>.marked.local</code> will only apply to the current
desktop (see <code>man bspc</code>).</p>

<p>We can then use that to adjust the size of the first matching item to 10
pixels (assuming the normal border is another value).</p>

<pre><code>bspc config -n "$(bspc query -N -n .marked)" border_width 10
</code></pre>

<p>And here is the same principle for all marked nodes.</p>

<pre><code>#!/bin/bash

for i in $(bspc query -N -n .marked); do
	bspc config -n "$i" border_width 10
done
</code></pre>

<h2>Using the `subscribe’ command</h2>

<p>For an event based approach, we can leverage BSPWM’s reporting system.
We can poll for changes to the status of the flags that apply to nodes,
targetting specifically the “mark” flag.</p>

<p>Here is the loop.  Adjust the border width values to your liking (by the
way, running the command without a value will give you the current one).</p>

<pre><code>#!/bin/bash

while read -r line; do
	case "$line" in
		*'marked on')
			bspc config -n "$(bspc query -N -n .marked)" border_width 10
			;;
		*'marked off')
			bspc config border_width 1
			;;
	esac
done &lt; &lt;(bspc subscribe report node_flag)
</code></pre>

<p>Note that the very last part uses Bash’s process redirection to pass
information to the loop.</p>

<h2>Closing thoughts</h2>

<p>Recall that assigning flags in BSPWM follows a toggle approach.  If the
flag is active, then assigning it again will remove it and vice versa.
Here is the relevant part from <code>man bspc</code>:</p>

<pre><code>-g, --flag hidden|sticky|private|locked|marked[=on|off]
Set or toggle the given flag for the selected node.
</code></pre>

<p>I never bothered with developing a workflow around these principles
because I would always use marks for quick, targetted operations (see my
book’s chapter about advanced BSPWM concepts).  As such, I am not sure
whether it would be better to simply bind the commands to keys, which
would set and reset the border upon toggling the flag, or whether the
programmatic approach would be preferable.</p>

<p>Please experiment with these concepts.  Feel free to contact me in case
you produce something neat or wish to discuss this further.  Note though
that you cannot use these principles to change a border’s colour.  That
is just a global value.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Emacs: narrowed Dired</title>
      <description>How to use Dired to narrow down the list only to the files you are interested in.</description>
      <pubDate>Thu, 19 Sep 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-09-19-dired-narrow/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-09-19-dired-narrow/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=g6YA4tiW1eQ">https://www.youtube.com/watch?v=g6YA4tiW1eQ</a></p>
         
         <p>In this screen cast I demonstrate certain techniques for filtering the
listing produced by <code>dired</code> (the <em>powerful</em> built-in file manager for
Emacs).</p>

<p>The narrowed view behaves like a standard Dired buffer.  This opens up
possibilities for more advanced workflows, such as to run a keyboard
macro on the files.</p>

<p>Here is my configuration file, with all my settings for Dired and more:
<a href="https://protesilaos.com/dotemacs">protesilaos.com/dotemacs</a>.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>On free software pedantry and leadership</title>
      <description>Criticism of the pernicious patterns of behaviour that plague the free software community.  And consideration of leadership issues.</description>
      <pubDate>Wed, 18 Sep 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-09-18-free-software-pedantry/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-09-18-free-software-pedantry/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>While I have no comment on the recent events surrounding Richard
Stallman, I do feel this is the right time to reflect on the pernicious
insistence on technicalities that is hampering our efforts to educate
people about the virtues of software freedom.  I also believe this is an
opportune moment to address the topic of leadership within the broader
community.</p>

<h2>Free software vs open source</h2>

<p>Consider the distinction between free software and open source.  The
<a href="https://www.fsf.org/news/richard-m-stallman-resigns">Free Software Foundation’s former
president</a> would
argue that the latter is part of a devious plan to undermine the former.
The idea is that “open source” does not emphasise the ethical side of
things that the FSF wants to promote.  This, in turn, allows
corporations to peddle open source solutions without educating their
users about software freedom.</p>

<p>I find this argument tenuous.  Reading through the <a href="https://www.debian.org/social_contract#guidelines">Debian Free Software
Guidelines</a> and/or
the <a href="https://opensource.org/osd">Open Source Definition</a> gives me
assurances of a technical as well as an ethical sort.  It is a
misrepresentation of facts to consider “open source” as <em>purely</em>
technical, for it does expressly grant liberties to users.</p>

<p>If a corporation is making something that is truly open source, then we
have the right to access the source code, modify it, redistribute it,
etc.  In other words, it is <em>free</em> software.</p>

<p>What would be a valid concern in this debate is companies engaging in
fraudulent practices, where they would use confusing language to market
their products.  For example, “open core” accompanied by extremely
complex license structures tangled with patents and other restrictions.
Here we can indeed raise the alarm.  Such products deny us of our
freedom.</p>

<p>But we must never conflate legitimate open source with fraud.  Doing so
in a manner that is consistent and systematic is a disservice to our
cause.  It also is dishonest.</p>

<p>As for arguments about emphasising freedom, these too miss the point.
It is not the job of each individual developer or piece of software to
preach about the four freedoms.  Let entities like the FSF handle the
task of educating people on that front.  They are better equipped for
the task.</p>

<h2>Free, libre, gratis</h2>

<p>We all know that the word “free” is polysemous.  This compounds the
problem of insisting that free software is not open source, because now
we must spend an inordinate amount of time explaining the difference
between free as in beer and free as in freedom.  Then we must borrow
words that the average English speaker is not familiar with to help us
in our pedantry.  The one is gratis, the other is libre.</p>

<p>Language is an intersubjective phenomenon, meaning that it is not enough
for us to find increasingly obscure ways of describing the various
analytical constructs we have deduced.  Everyone listening to us must
also be on the same wavelength.  Else the message is lost in
translation.</p>

<p>As such, when we try to attract new users to our community, we face the
impossible task of first indoctrinating them about abstract concepts and
only then delving into the specifics of our applications and operating
systems.</p>

<p>Yes, there is a value to insisting on precision of statement.  The right
words can be very important to achieve clarity of concept.  However, we
must have a sense of the prevailing circumstances and the context:
people have their beliefs and use whatever is given to them to get the
job done.  I thus find it more effective to show them in practice the
tangible benefits of free software.  Only once I have their undivided
attention I can, <em>where appropriate</em>, address technicalities of this
sort.</p>

<h2>Free software is not a dogma</h2>

<p>It is common for activists to misinterpret their cause as justification
for absolutism.  The result is a binary world-view whereby the cause is
perceived as purely good and must be pursued at all costs, while
everything else is evil and should be eliminated with extreme prejudice.</p>

<p>Free software is no different.  The underlying reason we have all this
pedantry is because some people do not keep things in perspective.  They
are too idealistic to recognise any possible deviation from their
reified concepts.  They are blinded by their vaunted beliefs to the fact
that the world is complex and does not conform with some simplistic
categorisation along the lines of good versus bad.</p>

<p>We should not have to atone for some spurious sin of using non-free
software, especially when it is done out of practical necessity.  There
are forces outside our control which compel us into action.  We do not
unilaterally decide on the prevailing conditions in our workplace, our
immediate locality, our politics at-large.  We may not have access to
the means that enable a life of 100% software freedom.  Or, more likely,
we may not have the luxury of offloading all non-free-software
interactions to a trusted intermediary.  There are permutations and
combinations in between the morally black-and-white world that certain
groups think they live in.</p>

<p>Absolutism engenders elitism, which can in turn produce cults of
personality or beget trolling.  This comes in various forms.  Think of
the tacit—at times explicit—praise that Linus Torvalds receives (used
to?)  each time he goes on one of his usual abusive rants.  Consider how
the “btw I use Arch” meme provides grist to the mill of the buffoons
that attack users for choosing “Noobuntu”.  Then there is this
misunderstanding about the Unix philosophy that fuels the talk about
“bloat” in free software (see my relevant video blog: <a href="https://protesilaos.com/codelog/2019-08-09-vlog-emacs-unix/">Emacs mindset and
Unix philosophy</a>).</p>

<p>The overarching theme is that pedantry, else elitism, leads to patterns
of behaviour that are against the very people that are attracted to free
software.  Users choose open source for a variety of reasons, usually
practical and then, after some further research, moral or political.
Even then practicality remains of paramount importance.</p>

<p>While data is not available, I will dare speculate on this: it would be
rather odd to find that new users are attracted to free software
primarily because they were impressed by Stallman’s or Torvalds’
toxicity, or were persuaded by some troll’s musings about bloat in
Linux distros…</p>

<h2>Leadership in free software</h2>

<p>One of the reasons I was attracted to Debian is their system of
governance.  The “Debian Project Leader” is not what the title may
imply: their role is mostly that of a public face for the project as
well as a liaison between the various specialised task forces that
comprise Debian.  The DPL wields no real power, in the sense of being
able to pass orders backed by threats.  They essentially are just
another developer who has to deal with even more email traffic while “in
charge”.</p>

<p>In my time as a Debian user, the DPLs have been Chris Lamb and now Sam
Hartman.  I know more about the former, though the latter has given me a
positive first impression.  People such as those two are prime examples
of what the free software community needs more of.  Individuals who are
approachable and who are not cult favourites for all the wrong reasons.</p>

<p>Debian’s structure facilitates the election of such personalities.  The
project is organised in a distributed manner.  Every field has its own
dedicated team, its own domain experts.  The different teams coordinate
their work with the help of the DPL where necessary.  What we end-users
understand as Debian is the concerted action of a world-wide community
that effectively operates without a figurehead.</p>

<p>The lesson to be learnt is that free software communities must adopt
decisions and resolve tensions in ways that are consistent with the
spirit of freedom that unites them.  The notion of a powerful leader who
can single-handedly forward the cause and stand up against the forces of
“evil” (recall the binary world-view) is better suited to rigid
hierarchies.</p>

<h2>Focus on software</h2>

<p>Judging from my experience and that of people I have directly helped
start their free software endeavours, there is little appetite for
joining some quasi-religious group.  Users want to solve practical
problems.  They do not wish to partake in some meaningless collective
flattery on Reddit centred on Stallman’s or Torvalds’ latest obnoxious
antics.</p>

<p>This impression I have is further reinforced by the feedback I receive
via email or in my screen casts that currently focus on Emacs.  Users
appreciate practical tips that make a tangible difference in their
workflow.  Someone watching these might want to try out Emacs in an
attempt to boost their productivity.  There are no exhortations.  No
pretences of holding the moral high ground.  Just the software and the
real benefits it offers.</p>

<p>Perhaps then, it would be more interesting and fecund if we stopped
caring about emblematic leaders and focused our efforts on improving the
tools we have or, as in my case, making their value more apparent to end
users.</p>

<p>Then all the controversies surrounding the likes of Stallman or Torvalds
become background noise that we can easily ignore.  Free software—open
source, if you will—must always be about the code and the concomitant
freedoms attached to it.  All the rest ends up supporting the agendas
and inflating the egos of individuals, much to the detriment of the
community at-large.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Emacs workflow: M-x append-to-buffer</title>
      <description>How I combined "append-to-buffer" with a keyboard macro, the built-in shell, and a Bash loop, to boost my productivity.</description>
      <pubDate>Tue, 10 Sep 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-09-10-emacs-append-to-buffer/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-09-10-emacs-append-to-buffer/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=nX6Cj9BqOY4">https://www.youtube.com/watch?v=nX6Cj9BqOY4</a></p>
         
         <p>In this video I present an implementation of <code>append-to-buffer</code>.  This
is an Emacs function for accumulating text (one of many).  I combine
it with the power of a keyboard macro, window switching, and the
built-in shell prompt (<code>shell</code>), to ultimately run a Bash script in a
loop—a real productivity boost.</p>

<p>Please note that the lag I experience while executing the macro is due
to my underpowered hardware and the conditions I am recording in.  My
sincere apologies!</p>

<p>Though not relevant to the demo, here is my Emacs configuration file:
<a href="https://protesilaos.com/dotemacs">protesilaos.com/dotemacs</a>.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Emacs IDO features and concepts</title>
      <description>I demonstrate the main features of "ido" (Interactively Do). This is a built-in Emacs tool for more powerful minibuffer interactions.</description>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-09-09-emacs-ido-features/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-09-09-emacs-ido-features/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=cYPTWI86Cqc">https://www.youtube.com/watch?v=cYPTWI86Cqc</a></p>
         
         <p>In this video I demonstrate the main features of Emacs’ built-in
completion mechanism.  Ido, which stands for “interactively do”, is a
program for narrowing down a list of selection candidates.  It is used
to empowered the various interfaces that rely on the minibuffer.</p>

<p>And here is my own config file, with tweaks for Ido and other tools:
<a href="https://protesilaos.com/dotemacs">protesilaos.com/dotemacs</a>.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Use Emacs DIRED and keyboard macros</title>
      <description>I demonstrate how to combine the powerful file manager of Emacs (dired) with keyboard macros: edit multiple files in an easy way.</description>
      <pubDate>Tue, 03 Sep 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-09-03-emacs-dired-macros/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-09-03-emacs-dired-macros/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=5NShmv_3rYk">https://www.youtube.com/watch?v=5NShmv_3rYk</a></p>
         
         <p>In this screen cast I showcase the potential of combining <code>dired</code>, the
built-in Emacs file manager, with keyboard macros.  This allows us to
perform an arbitrary number of tasks in a collection of files that are
grouped together as a directory or dynamically (with search tools like
<code>find-name-dired</code>).</p>

<p>The idea is that we can use keyboard macros to perform changes
visually across all our files, without having to think about complex
regular expressions for the necessary search+replace actions.</p>

<p>And here is my own config file, with tweaks for Dired and others:
<a href="https://protesilaos.com/dotemacs">protesilaos.com/dotemacs</a>.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Manage window layouts in Emacs</title>
      <description>I demonstrate how to store and restore window layouts in Emacs by either moving back/forth in history, or using search methods.</description>
      <pubDate>Fri, 30 Aug 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-08-30-emacs-manage-window-layout/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-08-30-emacs-manage-window-layout/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=kyllrQiNsyA">https://www.youtube.com/watch?v=kyllrQiNsyA</a></p>
         
         <p>In this screen cast I demonstrate a couple of ways of storing and
restoring window layouts in Emacs:</p>

<ul>
  <li>The one involves <code>winner-mode</code>, which keeps a record of window and
buffer changes, allowing you to go back and forth in this history.</li>
  <li>The other uses a couple of functions provided by <code>ivy</code> to store any
window layout and to call it at any point in time using a search
interface.</li>
</ul>

<p>This video builds on my previous entry on the topic of <a href="https://protesilaos.com/codelog/2019-08-18-emacs-buffers-windows/">buffer and
window management in
Emacs</a>.</p>

<p>And here is my own config file, in case you are interested:
<a href="https://protesilaos.com/dotemacs">protesilaos.com/dotemacs</a>.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Use “M-x customize” to find more Emacs features</title>
      <description>I demonstrate how the customisation interface of Emacs can be very useful to find new configuration options and things to tweak.</description>
      <pubDate>Thu, 29 Aug 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-08-29-emacs-mx-customize/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-08-29-emacs-mx-customize/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=3A2hz6IGHzs">https://www.youtube.com/watch?v=3A2hz6IGHzs</a></p>
         
         <p>In this screen cast I showcase the main uses of Emacs’ built-in
customisation interface.  This can be used to configure the various
aspects of Emacs.  You can also use it as a browser for finding new
things that you would eventually like to add to your own
initialisation file.</p>

<p>What I demonstrated in this video works with the default Emacs
distribution.  Here is my own init file, if you are interested:
<a href="https://protesilaos.com/dotemacs">protesilaos.com/dotemacs</a>.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Discover features in Emacs using the built-in docs</title>
      <description>I demonstrate how Emacs is the "self-documenting editor" and how you can discover its advanced features and customisation options.</description>
      <pubDate>Sat, 24 Aug 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-08-24-emacs-docs-discovery/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-08-24-emacs-docs-discovery/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=sRsjvirr1B8">https://www.youtube.com/watch?v=sRsjvirr1B8</a></p>
         
         <p>In this screen cast I demonstrate the numerous ways of accessing the
built-in documentation of Emacs.  These allow you to bring to the
surface information and advanced functionality that is pertinent to
the task at hand.</p>

<p>What I showcased here requires no external packages or further
customisations.  But you can still have a look at my configuration
file: <a href="https://protesilaos.com/dotemacs">protesilaos.com/dotemacs</a>.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Emacs keyboard macro counter</title>
      <description>Video demo of Emacs' keyboard macro counter: a specialised function that can do wonders in the right scenario.</description>
      <pubDate>Thu, 22 Aug 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-08-22-emacs-kmacro-counter/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-08-22-emacs-kmacro-counter/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=E-IDFY7mlXQ">https://www.youtube.com/watch?v=E-IDFY7mlXQ</a></p>
         
         <p>In this short screen cast I demonstrate the utility of Emacs’ keyboard
macro counter.  This is a very specialised piece of functionality that
can prove invaluable in the right circumstance.</p>

<p>What I did here requires no packages or customisations whatsoever.
Still, you can have a look at my configs right here on my website:
<a href="https://protesilaos.com/dotemacs">protesilaos.com/dotemacs</a>.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>The Emacs way to buffers and windows</title>
      <description>Video demo of Emacs' general approach to the task of managing multiple user processes at once, by using buffers and windows.</description>
      <pubDate>Sun, 18 Aug 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-08-18-emacs-buffers-windows/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-08-18-emacs-buffers-windows/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=xRm5SUf68pc">https://www.youtube.com/watch?v=xRm5SUf68pc</a></p>
         
         <p>In this screen cast I discuss the way Emacs handles buffer and window
management.  This is quite different from the desktop-oriented
metaphor, as it relies more on computer-specific paradigms, such as
narrowing to selection candidates.</p>

<p>All my customisations are defined in my “dotemacs” file—now provided
as a dedicated page inside this website (with link to its source):
<a href="https://protesilaos.com/dotemacs">protesilaos.com/dotemacs</a>.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Demo: Emacs ISEARCH features and tweaks</title>
      <description>Video demo of some less obvious Iseach functions. Also some extensions I have made to it.</description>
      <pubDate>Thu, 15 Aug 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-08-15-emacs-isearch-tweaks/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-08-15-emacs-isearch-tweaks/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=y6_bmcd3nis">https://www.youtube.com/watch?v=y6_bmcd3nis</a></p>
         
         <p>In this screen cast I present some of the more advanced or perhaps
less obvious ways of using Emacs’ built-in search tool. <code>isearch</code> is
quite a competent tool that can be made even better with some careful
additions of elisp.</p>

<p>Based on what I know right now, there is a niche for both <code>isearch</code>
and <code>swiper</code>, even though the latter is often used a replacement for
the former.</p>

<p>All my customisations are defined in my “dotemacs” file—now provided
as a dedicated page inside this website (with links to its source):
<a href="https://protesilaos.com/dotemacs">protesilaos.com/dotemacs</a>.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Demo: Emacs DIRED tweaks</title>
      <description>Video demo of my advanced tweaks for the built-in file manager of Emacs</description>
      <pubDate>Mon, 12 Aug 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-08-12-emacs-dired-tweaks/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-08-12-emacs-dired-tweaks/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=_2NAbPp_0zY">https://www.youtube.com/watch?v=_2NAbPp_0zY</a></p>
         
         <p>In this screen cast I present the various customisations I have made
to Emacs’ built-in directory editor (file manager).  <code>dired</code> is a very
powerful program.  These improve upon various aspects of its behaviour
and functionality.</p>

<p>The changes I have made are part of my <a href="https://protesilaos.com/dotemacs">“dotemacs” init
file</a>.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Why I switched to Emacs</title>
      <description>Documenting the reasons that led me to switch away from Vim+Tmux+Bwpm+CLI to just use Emacs.</description>
      <pubDate>Sun, 11 Aug 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-08-11-why-emacs-switch/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-08-11-why-emacs-switch/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Followers of my website’s <a href="https://protesilaos.com/codelog">codelog</a>
section are aware that I am an Emacs user since the start of July.
They also know that prior to that, I was using a custom desktop
session involving bspwm, tmux, vim, and relevant command-line
utilities.</p>

<p>While I have already produced a lot of content on Emacs, I have yet to
tackle directly the underlying “why” that led to the switch.  So let
us start from the beginning.</p>

<h2>The realisation of heterogeneity</h2>

<p>In early July 2019 I <a href="https://protesilaos.com/pdfd">published the final version of “Prot’s Dots For
Debian”</a>.  This is a book detailing the
various aspects of my custom desktop session, i.e. my <em>previous</em>
computing environment setup.  What I learnt through the process of
writing PDFD is that it is intrinsically difficult to maintain a
heterogeneous, highly customised, system.</p>

<p>Documenting it is hard, because the different components utilise their
own language and paradigms.  For example, the tmux and vim configs use
a key binding notation similar to Emacs.  Whereas bspwm’s hotkey
daemon (sxhkd) uses its own syntax.  This is not to suggest that it is
inferior software, just that such disparities introduce friction.
There are many cases like this which quickly add up.</p>

<p>Heterogeneity also affects the very definition and implementation of
the configurations.  Take the placement of the dotfiles as a case in
point.  Some files must be placed directly at <code>$HOME</code>, others in a
subdirectory inside <code>$XDG_CONFIG_HOME</code> (else <code>~/.config</code>), and others
still in their own directory inside <code>$HOME</code>.  Without guidance, it can
be difficult to place things where they belong.  I had to use GNU Stow
to keep the dotfiles under control, otherwise the process would be too
tedious and prone to error.</p>

<p>To be clear: my previous setup was quite productive.  It, nonetheless,
lacks the level of integration one expects from a singular computing
experience.  The combination of disparate tools can offer the
impression of an integrated working environment.  They can work <em>just
fine</em>, but never reach the ultimate potential of a bespoke system that
is consistent throughout.</p>

<h2>Why integration matters</h2>

<p>Consistency is important because it minimises or eliminates the
friction of switching contexts.  If everything works and looks the
same, you can maintain your rhythm, staying “in the flow” for longer.</p>

<p>I am the kind of person who notices minor details in the interface.
Inconsistencies distract and bother me.  They hamper my productivity.
This is no hyperbole.  I <em>really</em> need to exert full control over my
UI, otherwise I feel the urge to stop what I am doing and fix the
perceived problem.</p>

<p>This is, by the by, why I do not care at all about the frivolous
customisations people post on the various online fora for *nix
enthusiasts—the whole “ricing” thing.  Sure, they catch the eye.  And
that is exactly where the problem lies!  Your focus must be on the
content, not its surroundings.</p>

<p>But I digress…</p>

<h2>Enter Emacs</h2>

<p>As I discussed in my latest vlog on the <a href="https://protesilaos.com/codelog/2019-08-09-vlog-emacs-unix/">Emacs mindset and Unix
philosophy</a>,
using Emacs is perfectly in line with the intentions of the
terminal/CLI power user.  It is, in other words, a continuation of the
underlying rationale that went into my bspwm session; an extension of
the ideas underpinning PDFD.</p>

<p>Emacs conforms with the notion of optimal performance at a given task:
it interprets lisp in splendid fashion.  This allows it to be an
application platform for everything that is written in elisp.  And
there is a lot!</p>

<p>Allow me to regale you with a short background story, before stating
anew the main thesis of my last vlog.  I actually attempted a switch
to Emacs as early as mid-March 2018—and I <a href="https://protesilaos.com/codelog/trying-emacs/">wrote about it shortly
thereafter</a>.</p>

<p>That did not go as expected, in large part because of my expectations:
I thought of Emacs as a drop-in replacement for Vim, plus a few
extras.  Big mistake!  While it is true that it is a text editor and
can be used exclusively in that capacity, Emacs is at the absolute
peak of its powers when it is treated as an application platform.  At
the time, I wanted to finalise my custom desktop session, so I could
not commit to the change.</p>

<p>With PDFD out, I feel that cycle was completed successfully.  I learnt
a lot in the process, including the downsides of a heterogeneous
custom desktop session.</p>

<h2>Emacs as the epicentre of an Integrated Computing Environment</h2>

<p>My renewed interest in Emacs is neither hype nor fancy.  I truly
believe that using Emacs as an application platform is the way to a
consistent computing experience.</p>

<p>Bringing everything into Emacs makes perfect sense:</p>

<ul>
  <li>One language to rule them all (elisp).  You no longer need to bother
with a multitude of configuration formats and practices.  To this
end, chances are you can configure <em>everything</em> about your system in
a single file that is trivial to employ anywhere Emacs can run.  My
<a href="https://protesilaos.com/dotemacs">Emacs init file</a>, written
using the literate programming paradigm, is a case in point
(granted, it is still in its infancy as of this writing).</li>
  <li>Consistent key bindings.  Particularly true with the standard Emacs
key or with custom key chords that follow the same principles.  Vi
emulation can also deliver the desired results, but the process is
more involved.</li>
  <li>Same UI paradigms.  For example, killing a line in a buffer is the
same as killing a line in an <code>emms</code> playlist, or performing the same
action inside of a writable <code>dired</code> or <code>occur</code> buffer.</li>
  <li>Shared colours and styles (“faces”).  A good theme is all you need.
My <a href="https://gitlab.com/protesilaos/modus-themes">Modus themes</a>
ensure a consistent contrast ratio between foreground and background
values of 7:1 or higher.  This conforms with the loftiest
accessibility standard (WCAG AAA).  Furthermore, <em>Modus</em> employs
colour and typographic elements as a way of conveying the meaning of
an interface, such as by highlighting the constructs of a regular
expression in a more intense colour than those matched by a
wildcard within the same search.</li>
</ul>

<p>I am taking this to its logical end.  I already switched away from my
bspwm session because I needed to eliminate all the key chords that
the window manager would rely upon.  Now I am using Xfce on Debian 10
‘buster’ with <em>all hotkeys disabled</em>.  I need them for Emacs.
Especially those that involve <code>Super</code>.  There is no such thing as too
many modifier keys!</p>

<h2>Incremental progress</h2>

<p>Do not bother comparing Emacs with Vim.  They fulfil a different role.
Just use Emacs as the cornerstone of your Integrated Computing
Environment.  If you cannot live without Vim, then get the packages
for that.  I do, nonetheless, urge you to make an honest attempt at
using just the Emacs keys (I was a Vim user for ~3 years and switched
easily in less than a month).</p>

<p>Whatever you do, I recommend you take things slowly.  Try to learn one
function at a time: use default shortcuts or simply <code>M-x FUNCTION</code>.
Every action in Emacs is, in fact, implemented as a function (based on
my short experience).  Continuous practice will train your mind and
muscle memory to the Emacs workflows.  You might struggle at first,
but things will start making sense very quickly if you nail one thing
at a time.</p>

<p>Here is how I am doing it:</p>

<ul>
  <li>Go by the official manual.  Identify a chapter with information you
would like to put to the test.  Practice that.</li>
  <li>Search what others are doing with that workflow or set of commands.
Check their tweaks and assess whether they make sense for your
setup.</li>
  <li>If there is something you feel is not good enough, try finding a
package for it.  Chances are someone out there had the same problem
as you and decided to write some elisp for it.</li>
  <li>When implementing your own key chords, examine whether they conflict
with some important function you could potentially need.  This task
will become easier once you know which modes/workflows you use the
most.</li>
  <li>Learn how to use the built-in documentation.  It is an invaluable
skill for the entirety of your life as an Emacs user.</li>
</ul>

<p>The gist is that you should be learning by doing.  It takes patience
and dedication.  Study and reuse other people’s code, but do not
blindly copy-paste things: patterns of behaviour you do not understand
will quickly accumulate, resulting in a potentially fragmented,
frustrating experience.</p>

<p>The key is to not expect instant gratification.  I know, this is how
most of the world works these days.  Thankfully, Emacs runs contrary
to the zeitgeist: it caters to the user who cares deeply about the
quality and functionality of their tools.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Vlog: Emacs mindset and Unix philosophy</title>
      <description>The Emacs mindset shares the same goal as the CLI power user: to create an integrated computing environment. This is consistent with Unix.</description>
      <pubDate>Fri, 09 Aug 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-08-09-vlog-emacs-unix/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-08-09-vlog-emacs-unix/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=qTncc2lI6OI">https://www.youtube.com/watch?v=qTncc2lI6OI</a></p>
         
         <p>In this screen cast I talk about the main idea of switching to Emacs
and how it shares the same objective as that of the terminal/CLI power
user: to develop a consistent, integrated computing environment.</p>

<p>Couched in those terms, I claim that the Unix philosophy of “do one
thing and do it well” is not an obstacle to using Emacs.  The Emacs
mindset of an integrated workflow and the Unix design principles are
not mutually exclusive.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Modus themes: accessible colours for Emacs (WCAG AAA)</title>
      <description>Demo of my accessible themes for GNU Emacs. These conform with the WCAG AAA standard for contrast between foreground and background values.</description>
      <pubDate>Wed, 07 Aug 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-08-07-emacs-modus-themes/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-08-07-emacs-modus-themes/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=gz8yifu6pGo">https://www.youtube.com/watch?v=gz8yifu6pGo</a></p>
         
         <p>In this screen cast I announce the first stable release of my highly
accessible themes.</p>

<p>There are two items: a light and a dark.  Both conform with the
highest accessibility standard for colour contrast between foreground
and background values (WCAG AAA).  I call them the “Modus themes”:
<em>modus operandi</em> is the light theme, while <em>modus vivendi</em> is the dark
one.</p>

<p>The modus themes will continue to be developed until coverage of most
(if not all) faces is completed, including those defined by
third-party packages.</p>

<p>Below are links to my Emacs-related work:</p>

<ul>
  <li><a href="https://gitlab.com/protesilaos/modus-themes">Modus themes</a></li>
  <li><a href="https://protesilaos.com/dotemacs">Dotemacs</a></li>
</ul>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Emacs’ powerful OCCUR function in practice</title>
      <description>The OCCUR function and its variants offer a huge productivity boost. Here is a real-world example.</description>
      <pubDate>Sun, 04 Aug 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-08-04-emacs-occur/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-08-04-emacs-occur/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=zxS3zXwV0PU">https://www.youtube.com/watch?v=zxS3zXwV0PU</a></p>
         
         <p>In this screen cast I demonstrate the power of Emacs’ <code>occur</code>
function using a real-world scenario.</p>

<p>On the face of it, <code>occur</code> is similar to <code>grep</code>: it outputs a list of
results matching a search pattern.  However, these results can be
interfaced with and can even be edited directly, with all changes
echoed to the actual file.</p>

<p>As such, <code>occur</code> can be used as a “scoping” or “narrowing” tool to
limit the buffer to certain terms.  Then the full editing capabilities
of Emacs can be put to use: replacing using regular expressions,
keyboard macros, external packages such as <code>multiple-cursors</code>, etc.</p>

<p>I can already state with confidence that Emacs is a powerhouse of
productivity once you familiarise yourself with its tools and
utilities.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Practical macros in Emacs</title>
      <description>A series of simulations where I use keyboard macros and related commands to achieve the desired results in an efficient way.</description>
      <pubDate>Thu, 01 Aug 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-08-01-emacs-macros-golf/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-08-01-emacs-macros-golf/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=oLY-X5BMjc8">https://www.youtube.com/watch?v=oLY-X5BMjc8</a></p>
         
         <p>This video contains a concatenation of real-world simulations where I
employ keyboard macros and related commands to achieve the desired
results.  The idea is to do things efficiently, with the knowledge
that macros are an extremely powerful tool in Emacs.</p>

<p>The concepts implemented herein where first presented in my recent
<a href="https://protesilaos.com/codelog/2019-07-29-emacs-kbd-macros/">Introduction to keyboard macros in
Emacs</a>.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Opinion on Emacs vs Vim, best tiling WM, etc.</title>
      <description>Vlog on the topic of the best text editor, tiling window manager, and the like. Stay true to the spirit of free software.</description>
      <pubDate>Tue, 30 Jul 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-07-30-vlog-emacs-vs-vim-etc/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-07-30-vlog-emacs-vs-vim-etc/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=CxOkhsDfy_4">https://www.youtube.com/watch?v=CxOkhsDfy_4</a></p>
         
         <p>In this screen cast I offer my opinion on some of the common debates
in the free software space about which is the best text editor, tiling
window manager, desktop environment, etc.</p>

<p>My approach is to consider the context: the user and their needs.
There is a tool for every person and every niche.  What we should
always keep in mind is the spirit of free software: sharing the
knowledge and, thus, being altruistic.  We do not want elitism.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Introduction to keyboard macros in Emacs</title>
      <description>This screen cast offers an overview of the powers of keyboard macros in GNU Emacs. Learn these to boost your productivity.</description>
      <pubDate>Mon, 29 Jul 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-07-29-emacs-kbd-macros/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-07-29-emacs-kbd-macros/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=-5yH_8nl9LU">https://www.youtube.com/watch?v=-5yH_8nl9LU</a></p>
         
         <p>In this screen cast I offer a comprehensive overview of the powers of
keyboard macros in GNU Emacs.  Macros are recorded sequences of key
chords that can be executed again to repeat the action.  The idea is
to define complex motions that can then be re-run in the blink of an
eye.</p>

<p>Advanced features of keyboard macros in Emacs include the ability to
(i) maintain a ring of stored macros and to cycle through its
contents, (ii) assign a unique name to a macro and call it the way you
would call any other function using <code>M-x</code>, and (iii) output a macros’
definition as proper lisp code that can then be stored in a file for
use in future session.</p>

<p>Keyboard macros can be a very powerful tool in the hands of a skilled
writer or programmer.</p>

<p>Below are links to the “early alpha” version of my init file and the
themes I use:</p>

<ul>
  <li><a href="https://protesilaos.com/dotemacs">dotemacs</a></li>
  <li><a href="https://gitlab.com/protesilaos/modus-themes">modus-themes</a></li>
</ul>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Demo of OpenType features on GNU/Linux</title>
      <description>This screen cast presents basic information about OpenType technology and shows how to enable its features using the fontconfig library.</description>
      <pubDate>Fri, 26 Jul 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-07-26-video-opentype-fontconfig/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-07-26-video-opentype-fontconfig/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=7tzGPeisWKY">https://www.youtube.com/watch?v=7tzGPeisWKY</a></p>
         
         <p>In this screen cast I talk about OpenType features and how to
implement them across the entire desktop environment.  The
technicalities were documented in my previous code blog entry:
<a href="https://protesilaos.com/codelog/2019-07-25-opentype-features-fontconfig/">Fontconfig typographic features on
GNU/Linux</a>.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Fontconfig typographic features on GNU/Linux</title>
      <description>How to enable OpenType features on GNU/Linux for typefaces that support them.</description>
      <pubDate>Thu, 25 Jul 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-07-25-opentype-features-fontconfig/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-07-25-opentype-features-fontconfig/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Modern typography provides technologies for tweaking various aspects
of the font’s presentation.  The general idea is to make the typeface
flexible enough for adapting to a variety of typographic requirement.
Common features include tabular numerals, stylistic alternatives for
select glyphs (e.g. slashed zero), ligatures, small caps, ordinal
figures.  Each font family will have support for its own classes.</p>

<p>GNU/Linux users can access <a href="https://en.wikipedia.org/wiki/OpenType_feature_tag_list">these
features</a> by
leveraging the <code>fontconfig</code> library’s rule declaration.  There may be
differences between distros on where the system-wide defaults are
placed.  But user-specific settings should normally be defined at
<code>~/.config/fontconfig/conf.d</code>.  Here is an overview of my current
settings (see <a href="https://gitlab.com/protesilaos/dotfiles">my dotfiles</a>):</p>

<pre><code>.config/fontconfig/conf.d/
├── 10-hinting-full.conf
├── 10-sub-pixel-rgb.conf
├── 11-lcdfilter-default.conf
├── 20-unhint-small-hack.conf
├── 45-generic.conf
├── 45-latin.conf
├── 50-enable-terminus.conf
├── 60-generic.conf
├── 60-latin.conf
├── 80-alegreya-fontfeatures.conf
├── 80-alegreya-sans-fontfeatures.conf
├── 80-condensed-large-dejavu.conf
├── 80-firago-fontfeatures.conf
└── README
</code></pre>

<p>The numbering matters as it determines the sequence for loading these
rules.  This is what Debian provides on the matter:</p>

<blockquote>
  <p>conf.d/README</p>

  <p>Each file in this directory is a fontconfig configuration file.  Fontconfig
scans this directory, loading all files of the form [0-9][0-9]*.conf.
These files are normally installed in /usr/share/fontconfig/conf.avail
and then symlinked here, allowing them to be easily installed and then
enabled/disabled by adjusting the symlinks.</p>

  <p>The files are loaded in numeric order, the structure of the configuration
has led to the following conventions in usage:</p>

  <pre>
Files begining with:	Contain:
00 through 09		Font directories
10 through 19		system rendering defaults (AA, etc)
20 through 29		font rendering options
30 through 39		family substitution
40 through 49		generic identification, map family-&gt;generic
50 through 59		alternate config file loading
60 through 69		generic aliases, map generic-&gt;family
70 through 79		select font (adjust which fonts are available)
80 through 89		match target="scan" (modify scanned patterns)
90 through 99		font synthesis
</pre>
</blockquote>

<p>Rules are written in XML.  See <a href="https://www.freedesktop.org/software/fontconfig/fontconfig-user.html">this
spec</a>
for all available constructs.</p>

<h2>Trying things out</h2>

<p>Now on to implementing our newfound knowledge!  Say you have
downloaded <a href="https://bboxtype.com/typefaces/FiraGO">FiraGO</a> and placed
a directory containing its font files somewhere it can be read by your
operating system.  Font files can end in either <code>.otf</code> or <code>.ttf</code>.  On
Debian, user-specific typefaces are read from <code>~/.local/share/fonts</code>.
So FiraGO would be like this:</p>

<pre><code>.local/share/fonts/FiraGO
├── FiraGO-BoldItalic.otf
├── FiraGO-Bold.otf
├── FiraGO-Italic.
└── FiraGO-Regular.otf
</code></pre>

<p>Then inside the local <code>conf.d</code> we add <code>80-firago-fontfeatures.conf</code>,
which contains the following:</p>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE fontconfig SYSTEM "fonts.dtd"&gt;
&lt;fontconfig&gt;
  &lt;description&gt;Enable select opentype features for FiraGO.&lt;/description&gt;

  &lt;!--
	  Typographic features are provided on a per-typeface basis.
	  Tables with all available features are available here:
	  https://en.wikipedia.org/wiki/OpenType_feature_tag_list 

      Also read the fontconfig user spec:
      https://www.freedesktop.org/software/fontconfig/fontconfig-user.html
  --&gt;

  &lt;match target="font"&gt;
    &lt;test name="family" compare="eq" ignore-blanks="true"&gt;
      &lt;string&gt;FiraGO&lt;/string&gt;
    &lt;/test&gt;
    &lt;edit name="fontfeatures" mode="append"&gt;
      &lt;string&gt;tnum on&lt;/string&gt; &lt;!-- tabular numbers --&gt;
      &lt;string&gt;zero on&lt;/string&gt; &lt;!-- slashed zero --&gt;
    &lt;/edit&gt;
  &lt;/match&gt;
&lt;/fontconfig&gt;
</code></pre>

<p>Focus on the part inside of the <code>&lt;edit&gt;</code> tags.  This is where we
toggle the features that FiraGO supports (as documented in its
download page).  As you can see, I only need tabular numbers and a
slashed zero.  This makes FiraGO far better as a UI font, while not
detracting from its already superb ability to present body copy.</p>

<p>To target another font family, simply replace “FiraGO” from this part:
<code>&lt;string&gt;FiraGO&lt;/string&gt;</code>.  I have tried this method with a number of
typefaces, all delivering the expected results.</p>

<p>Pro tip: combine FiraGO with Fira Code (<code>apt install fonts-firacode</code>)
for a consistent typographic experience across your desktop
environment.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Emacs DIRED: list sub-directories, search findings, images, diffs</title>
      <description>Overview of some less known features of Emacs "dired": list subdirectories, list files matching search terms, show images, show diffs.</description>
      <pubDate>Tue, 23 Jul 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-07-23-emacs-dired-pt2/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-07-23-emacs-dired-pt2/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=2lF3z7H8oaI">https://www.youtube.com/watch?v=2lF3z7H8oaI</a></p>
         
         <p>This screen cast covers some more features of Emacs’ built-in file
manager, called “Dired” (directory editor).  It builds on the
knowledge I shared in yesterday’s entry about the <a href="https://protesilaos.com/codelog/2019-07-22-emacs-dired-basics/">basics of Emacs
dired</a>.</p>

<p>In case you are interested to have a look at my configurations and
accompanying themes, here are the links:</p>

<ul>
  <li><a href="https://protesilaos.com/dotemacs">dotemacs</a></li>
  <li><a href="https://gitlab.com/protesilaos/modus-themes">Modus themes</a></li>
</ul>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Basics of the powerful Emacs file manager</title>
      <description>Overview of the basic features of Emacs "dired" (directory editor). I also show how it can be combined with more powerful tools.</description>
      <pubDate>Mon, 22 Jul 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-07-22-emacs-dired-basics/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-07-22-emacs-dired-basics/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=5dlydii7tAU">https://www.youtube.com/watch?v=5dlydii7tAU</a></p>
         
         <p>In this screen cast I offer an overview of the basic file management
operations we can perform inside of GNU Emacs.  The program that helps
us in this task is called “dired”, which stands for “directory
editor”.</p>

<p>This demo covers the basics as well as some more advanced use cases,
based on what I have learned thus far (recall that I am new to Emacs).</p>

<p>In case you are interested to have a look at my configurations and
acompanying themes, here are the links:</p>

<ul>
  <li><a href="https://protesilaos.com/dotemacs">dotemacs</a></li>
  <li><a href="https://gitlab.com/protesilaos/modus-themes">Modus themes</a></li>
</ul>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Vim user’s first impressions of GNU Emacs</title>
      <description>I am switching from Vim to Emacs. Here I explain the main differences and why I am making the switch.</description>
      <pubDate>Fri, 19 Jul 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-07-19-gnu-emacs-first-impressions/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-07-19-gnu-emacs-first-impressions/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=VlVl_5RyG3M">https://www.youtube.com/watch?v=VlVl_5RyG3M</a></p>
         
         <p>In this screen cast I share my first impressions of GNU Emacs; a tool
that I have been using exclusively for the last two weeks or so.</p>

<p>I explain the main differences between Vim and Emacs and how the
latter should be seen as an open-ended proposition.  Emacs is more of
an application platform than a mere text editor, courtesy of its
ability to interpret and evaluate Lisp code (Emacs Lisp, to be
precise).</p>

<p>I think Vim is better suited as a text editor and has a more rigid
approach to tackling that task.  Whereas Emacs is all about
extensibility.  It is meant to be tailored to your workflow and to
match your requirements.  As such, you are encouraged to configure it
exactly the way you want and even write your own elisp functions.</p>

<p>Here is the code I have accumulated thus far, with the proviso that
everything is in its early development days and things might change
quite drastically:</p>

<ul>
  <li><a href="https://protesilaos.com/dotemacs">init.el</a></li>
  <li><a href="https://gitlab.com/protesilaos/modus-themes">Modus themes</a></li>
</ul>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Complete demo of my BSPWM on Debian 10 ‘Buster’</title>
      <description>In this video presentation I cover practically every major aspect of my custom desktop session.</description>
      <pubDate>Tue, 02 Jul 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-07-02-full-demo-bspwm-debian-buster/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-07-02-full-demo-bspwm-debian-buster/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=CAkZLFF8kP0">https://www.youtube.com/watch?v=CAkZLFF8kP0</a></p>
         
         <p>In this video I talk at length about the official release of <a href="https://protesilaos.com/pdfd">Prot’s
Dots For Debian</a> (PDFD) and the code base
it deals with.  This is a free/libre book that allows you to reproduce
my custom desktop session, while offering detailed information on the
various facets of my setup.</p>

<p>Consider this a primer on my BSPWM.  By watching it, you should have
a general idea of what is going and how the various programs are put
together.  I cover everything from the basics to some advanced topics.
I also offer a short guide on Tmux, the terminal multiplexer that is an
integral part of my daily workflow.</p>

<p>Kindly note that Debian 10 ‘Buster’ officially releases on July 6, 2019
(today is July 2, 2019).  I have decided to publish my work slightly in
advance to make sure that everything works as expected.  If you are
eager to follow the steps in PDFD, please wait just a little bit longer.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Bug report: Xterm problems with Greek pi (π) and box-drawing</title>
      <description>Contents of my bug report concerning the incorrect behaviour of Xterm in treating the Greek letter pi as a box-drawing character.</description>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-07-01-xterm-greek-pi-bug/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-07-01-xterm-greek-pi-bug/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>I submitted the following to the Debian bug tracker
<a href="https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=931305">#931305</a>.</p>

<hr />

<p>While using proportional fonts, the Greek letter pi (π) is treated as
a box-drawing character or, more likely, as missing from the
proportional font altogether.  This happens <em>only at certain point
sizes</em> AND/OR <em>only with specific fonts</em>.</p>

<h2>Scenario 1: Greek pi works, but box-drawing does not</h2>

<p>With these settings:</p>

<pre><code>xterm.vt100.faceName: DejaVu Sans Mono
xterm.vt100.faceSize: 10
XTerm.vt100.forceBoxChars: false
</code></pre>

<p>The greek letter pi is displayed correctly, but the second vertical line
(drawn with U+2502) is almost the same as the first one (drawn with
U+007C).</p>

<p><img alt="image scenario 1" src="https://protesilaos.com/assets/images/attachments/xterm_grpi_boxchars_scenario1.png" /></p>

<h2>Scenario 2: Greek pi does not work, but box-drawing does</h2>

<p>With these settings:</p>

<pre><code>xterm.vt100.faceName: DejaVu Sans Mono
xterm.vt100.faceSize: 10
XTerm.vt100.forceBoxChars: true
</code></pre>

<p>The Greek letter pi is drawn using a fixed-size (bitmap) font.  The
second vertical line is properly displayed using box-drawing characters.</p>

<p><img alt="image scenario 2" src="https://protesilaos.com/assets/images/attachments/xterm_grpi_boxchars_scenario2.png" /></p>

<h2>Scenario 3: faceSize: 9.5 forceBoxChars: false works for both</h2>

<p>With these settings:</p>

<pre><code>xterm.vt100.faceName: DejaVu Sans Mono
xterm.vt100.faceSize: 9.5
XTerm.vt100.forceBoxChars: false
</code></pre>

<p>Everything appears to work as intended.</p>

<p><img alt="image scenario 3" src="https://protesilaos.com/assets/images/attachments/xterm_grpi_boxchars_scenario3.png" /></p>

<h2>Scenario 4: Fira Code works using settings from scenarios 1 and 3</h2>

<p>With these:</p>

<pre><code>xterm.vt100.faceName: Fira Code
xterm.vt100.faceSize: 10
XTerm.vt100.forceBoxChars: false
</code></pre>

<p>Or this changed:</p>

<pre><code>xterm.vt100.faceSize: 9.5
</code></pre>

<p>Everything seems to work as intended.</p>

<p><img alt="image scenario 4" src="https://protesilaos.com/assets/images/attachments/xterm_grpi_boxchars_scenario4.png" /></p>

<h2>Scenario 5: forceBoxChars always breaks Greek letter pi (π)</h2>

<p>With these settings:</p>

<pre><code>xterm.vt100.faceName: Fira Code
xterm.vt100.faceSize: 10
XTerm.vt100.forceBoxChars: true
</code></pre>

<p>Regardless of typeface, enabling forceBoxChars will always draw the
letter pi in a bitmap font.</p>

<p><img alt="image scenario 5" src="https://protesilaos.com/assets/images/attachments/xterm_grpi_boxchars_scenario5.png" /></p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Talking about my lemonbar-xft</title>
      <description>In this screen cast I talk about the reasons that led me to fork lemonbar and to merge support the fontconfig library.</description>
      <pubDate>Mon, 24 Jun 2019 00:01:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-06-24-demo-lemonbar-xft/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-06-24-demo-lemonbar-xft/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=q7JxIO6Vddg">https://www.youtube.com/watch?v=q7JxIO6Vddg</a></p>
         
         <p>In this video I talk about <a href="https://gitlab.com/protesilaos/lemonbar-xft">my fork of
lemonbar</a> that has support
for the <code>fontconfig</code> library.</p>

<p>What I discuss here has been documented in my last two coding blog
(codelog) entries:</p>

<ol>
  <li><a href="https://protesilaos.com/codelog/2019-06-23-lemonbar-xft-new/">Compile Lemonbar Xft on Debian 10 Buster</a>.</li>
  <li><a href="https://protesilaos.com/codelog/2019-06-24-lemonbar-xft-howto/">How I forked lemonbar-xft</a>.</li>
</ol>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>How I forked lemonbar-xft</title>
      <description>Steps to reproduce the up-to-date fork of lemonbar with support for fontconfig.</description>
      <pubDate>Mon, 24 Jun 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-06-24-lemonbar-xft-howto/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-06-24-lemonbar-xft-howto/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>I decided to maintain my own fork of Lemonbar with support for Xft,
because GitHub user <em>krypt-n</em> <a href="https://github.com/krypt-n/bar/pull/37#issuecomment-473265449">seems to have lost
interest</a>
in their project.</p>

<p>My fork is on GitLab:
<a href="https://gitlab.com/protesilaos/lemonbar-xft">https://gitlab.com/protesilaos/lemonbar-xft</a>.
Here I want to tell you the steps I followed to produce it.</p>

<p>Start by cloning upstream (all my links will be for SSH connections,
which require an appropriately-configured GitHub account):</p>

<pre><code>git clone git@github.com:LemonBoy/bar.git ~/lemonbar-upstream
</code></pre>

<p>Now also clone the fork with Xft support:</p>

<pre><code>git clone git@github.com:krypt-n/bar.git ~/lemonbar-xft-discontinued
</code></pre>

<p>Switch to the upstream repo:</p>

<pre><code>cd ~/lemonbar-upstream
</code></pre>

<p>Prepare to pull in the Xft fork:</p>

<pre><code>git remote add xft ~/lemonbar-xft-discontinued
git fetch xft
</code></pre>

<p>Now create a new branch with the fork:</p>

<pre><code>git checkout -b xft-port
</code></pre>

<p>Then merge <code>master</code> into <code>xft-port</code>:</p>

<pre><code>git merge master
</code></pre>

<p>You are mostly done.  I just added an extra file that explains what this
fork is about.  It is named “README-xft” and has the following:</p>

<pre><code>Personal fork of Lemonbar with Xft support
==========================================

The purpose of this fork is to keep up with upstream while maintaining
the changes by GitHub user krypt-n who seems to have lots interest in
the project.[0]

The contributions by krypt-n allow Xft support (to use typefaces
supported by fontconfig).  Upstream Lemonbar appears to be unable or
unwilling to merge them into master.[1]

I have decided to maintain this project, because I want to use it as
part of my custom desktop session on Debian 10 Buster.[2]

[0]: https://github.com/krypt-n/bar/pull/37#issuecomment-473265449
[1]: https://github.com/LemonBoy/bar/issues/188
[2]: https://gitlab.com/protesilaos/dotfiles
</code></pre>

<p>Lastly, I did the following to push my fork to GitLab:</p>

<pre><code>git remote add lemonbar-xft-current git@gitlab.com:protesilaos/lemonbar-xft.git
git push -u lemonbar-xft-current --all
</code></pre>

<p>Done!  Read my previous entry on <a href="https://protesilaos.com/codelog/2019-06-23-lemonbar-xft-new/">how to compile this fork on Debian 10
Buster</a>.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Compile Lemonbar Xft on Debian 10 Buster</title>
      <description>How to get the fork of lemonbar that supports fontconfig on Debian 10 Buster.</description>
      <pubDate>Sun, 23 Jun 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-06-23-lemonbar-xft-new/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-06-23-lemonbar-xft-new/</guid>
      <content:encoded>
        <![CDATA[
         
         <p><strong>UPDATE 2019-06-24.</strong>  I created <a href="https://gitlab.com/protesilaos/lemonbar-xft">my own
fork</a> for this very
purpose.  See <a href="https://protesilaos.com/codelog/2019-06-24-lemonbar-xft-howto/">how I forked
lemonbar-xft</a>.</p>

<hr />

<p>Lemonbar is a lightweight program that draws a panel on the viewport.
The information on display is whatever is pipped to it.</p>

<h2>The problem: upstream only works with bitmap fonts</h2>

<p>Upstream <code>lemonbar</code> lacks support for proportional fonts and the
corresponding interface with <code>fontconfig</code>.</p>

<p>This is a disappointment because fixed/bitmap typefaces leave much to be
desired:</p>

<ul>
  <li>support for Greek glyphs is limited to a handful of typefaces such as
<code>terminus</code>, <code>fixed</code>, <code>times</code>;</li>
  <li>the quality of bold variants can be lower than the regular ones;</li>
  <li>only specific point sizes work well;</li>
  <li>colours are less distinct on a light background.</li>
</ul>

<h2>The solution: compile lemonbar-xft (my fork)</h2>

<p>There is a popular alternative by GitHub user <em>krypt-n</em> that provides
Xft support, but seems to <a href="https://github.com/krypt-n/bar/pull/37#issuecomment-473265449">have been
discontinued</a>.
So I have decided to pick it up and maintain it.  To make sure it syncs
with upstream’s <code>master</code> branch and builds correctly.</p>

<p>So let us get going.  First we need to get the build dependencies for
Debian 10 Buster:</p>

<pre><code>sudo apt install build-essential libx11-dev libxft-dev libx11-xcb-dev libxcb-randr0-dev libxcb-xinerama0-dev
</code></pre>

<p>Now clone my <code>lemonbar-xft</code> fork:</p>

<pre><code>git clone https://gitlab.com/protesilaos/lemonbar-xft.git
</code></pre>

<p>Switch to that directory:</p>

<pre><code>cd lemonbar-xft
</code></pre>

<p>Compile it and install it system-wide:</p>

<pre><code>make
sudo make install
</code></pre>

<p>Or if you are like me, compile it just for your current user, by placing
the artifacts in your home directory.  This assumes you have configured
<code>$HOME/bin</code> to be part of <code>PATH</code>.</p>

<pre><code>make PREFIX="$HOME" install
</code></pre>

<p>Uninstalling it requires the same steps, except you just pass the
<code>uninstall</code> argument.</p>

<p>Done!  Now <code>lemonbar</code> can use any typeface supported by <code>fontconfig</code>.
Make sure you <code>apt remove lemonbar</code> in case you had the upstream
package.</p>

<h2>Closing thoughts</h2>

<p>I generally stick to the packages provided by Debian.  This is an
exception because:</p>

<ol>
  <li>Lemonbar is developed at a slow pace, so I can afford to inspect all
commits.</li>
  <li>It is a small program that compiles in virtually no time.  I am
fairly confident that combined with the above, the compilation
process will not become more complex in the foreseeable future.</li>
  <li>Upstream does not offer any good reason why it does not consider Xft
support (see <a href="https://github.com/LemonBoy/bar/issues/188">#188</a>).
This leads me to believe that there will be no progress on this
front, at least not with how things currently stand.</li>
</ol>

<p>The above granted, I am still not sure whether I will make changes to my
<a href="https://gitlab.com/protesilaos/dotfiles">custom desktop session</a>, which
still uses upstream <code>lemonbar</code>.  I might just add a reference in my
<a href="https://protesilaos.com/pdfd/">Prot’s Dots For Debian</a> for users that
want to follow the instruction documented herein.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Dynamic desktops in BSPWM</title>
      <description>A video demo of a shell script that implements dynamic desktop creation/removal in BSPWM. "Desktops" are also known as "workspaces".</description>
      <pubDate>Mon, 17 Jun 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-06-17-bspwm-dynamic-desktops/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-06-17-bspwm-dynamic-desktops/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=PietHIi2kpw">https://www.youtube.com/watch?v=PietHIi2kpw</a></p>
         
         <p>This screen cast is a demonstration of my shell script that implements
dynamic desktop creation/removal in the Binary Space Partitioning Window
Manager.  It is a feature that runs contrary to the upstream default of
setting a fixed number of desktops.</p>

<p>This script and all other parts of the demo are distributed with <a href="https://gitlab.com/protesilaos/dotfiles">my
dotfiles</a>.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Advanced multi-node operations in BSPWM</title>
      <description>Video demo with a shell script of mine for operating on multiple BSPWM selectors at once.</description>
      <pubDate>Mon, 10 Jun 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-06-10-bspwm-multinode-ops/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-06-10-bspwm-multinode-ops/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=Kaw58AFVz5c">https://www.youtube.com/watch?v=Kaw58AFVz5c</a></p>
         
         <p>In this screen cast I showcase the working prototype of a script I wrote
that allows us to operate on multiple selectors in order to accomplish
complex tasks.  As with the rest of the session, everything is part of
<a href="https://gitlab.com/protesilaos/dotfiles">my dotfiles</a>.</p>

<p><strong>Make sure to check my dotfiles as the script will be updated with more
features than those demonstrated in the screen cast.</strong></p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Scripting BSPWM with external rules</title>
      <description>Video demo with my shell script for modifying the behaviour of the Binary Space Partitioning Window Manager.</description>
      <pubDate>Sun, 09 Jun 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-06-09-bspwm-external-rules/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-06-09-bspwm-external-rules/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=ikstju_vJP8">https://www.youtube.com/watch?v=ikstju_vJP8</a></p>
         
         <p>In this screen cast I show how my external rules script informs the
window manager about the behaviour of receptacles and preselections.
These are some advanced features of BSPWM for controlling the placement
of windows.  The scripted method is complementary to the operations
I demonstrated in my previous video: <a href="https://protesilaos.com/codelog/2019-06-07-bspwm-receptacles/">Advanced manual tiling in
BSPWM</a></p>

<p>As with the rest of the session, the external rules script is part of
<a href="https://gitlab.com/protesilaos/dotfiles">my dotfiles</a>.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Advanced manual tiling in BSPWM</title>
      <description>Video demo with my custom tools for advanced window placement using the Binary Space Partitioning Window Manager.</description>
      <pubDate>Fri, 07 Jun 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-06-07-bspwm-receptacles/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-06-07-bspwm-receptacles/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=4kEYKb_DywY">https://www.youtube.com/watch?v=4kEYKb_DywY</a></p>
         
         <p>In this screen cast I showcase a shell script that helps with advanced
window placement in BSPWM (the Binary Space Partitioning Window
Manager).  The script leverages BSPWM’s <code>marked</code> node flag,
preselection, and receptacles.</p>

<p>Part of <a href="https://gitlab.com/protesilaos/dotfiles">my dotfiles</a>.</p>

<p>Related screen casts:</p>

<ul>
  <li><a href="https://protesilaos.com/codelog/2018-12-27-bspwm-demo-video/">Demo of my BSPWM on Debian</a></li>
  <li><a href="https://protesilaos.com/codelog/2019-05-23-sxhkd-demo/">Overview of SXHKD</a></li>
  <li><a href="https://protesilaos.com/codelog/2019-01-13-tmux-demo-bspwm/">Why I use TMUX with BSPWM</a></li>
</ul>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Demo: script to find colour contrast (and more)</title>
      <description>CLR (Check Luminance Ratio) is a Bash script that calculates the contrast between two colours.</description>
      <pubDate>Mon, 27 May 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-05-27-clr-bash-pe-demo/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-05-27-clr-bash-pe-demo/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=9SBGoPBIUJ0">https://www.youtube.com/watch?v=9SBGoPBIUJ0</a></p>
         
         <p>In this screen cast, I present a new script I wrote that compares the
contrast ratio between two colours.  The script is called CLR
(conveniently pronounced as “colour”), which stands for “Check
Luminance Ratio”.</p>

<p>The code of CLR makes heavy of Bash parameter expansion.  It helps me
practice some of my shell scripting skills.</p>

<p>In the screen cast I also offer a primer on colours in the RGB space and
talk a little bit about accessibility.</p>

<p>CLR is part of <a href="https://gitlab.com/protesilaos/dotfiles">my dotfiles</a>
and is licensed under the GPLv3 (as is the rest of the code).</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Demo of TMR (my timer for the terminal)</title>
      <description>TMR (TMR Must Recur) is a simplistic Bash script that implements a timer in the console. Here is a demo.</description>
      <pubDate>Sun, 26 May 2019 00:00:01 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-05-26-tmr-demo/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-05-26-tmr-demo/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=zgzxdcktyLk">https://www.youtube.com/watch?v=zgzxdcktyLk</a></p>
         
         <p>In this screen cast, I present a working prototype of TMR (<em>TMR Must
Recur</em>).  This is a shell script written in Bash that implements
a simplistic timer.  <code>tmr</code> is meant to be executed in the console and
accepts a single argument that must be a valid unit of time, such as
<code>10s</code> for ten seconds.</p>

<p>The purpose of this script is mostly didactic.  It tries to do things by
using Bash parameter expansion.  Ultimately, this is just an experiment
meant to explore the possibilities of various shell scripting methods.</p>

<p>TMR is part of <a href="https://gitlab.com/protesilaos/dotfiles">my dotfiles</a>
and is licensed under the GPLv3 (as is the rest of the code).</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Xterm’s woes with Greek letter Pi and box-drawing</title>
      <description>Xterm cannot display the lowercase Greek letter Pi (π) when using most outline monospaced fonts. There is a solution though.</description>
      <pubDate>Sun, 26 May 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-05-26-xterm-letter-pi-bug/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-05-26-xterm-letter-pi-bug/</guid>
      <content:encoded>
        <![CDATA[
         
         <p><strong>UPDATE 2019-07-01:</strong> I submitted a bug report.  <a href="https://protesilaos.com/codelog/2019-07-01-xterm-greek-pi-bug/">Details
here</a>.</p>

<p><strong>UPDATE 2019-06-01:</strong> Upon further inspection, I am using the following
font-related settings, which address the issue discussed herein.  Some
typefaces might still have <em>minor</em> issues with drawing boxes.</p>

<pre><code>! Font settings
! The font settings address the issue discussed in this blog post:
! https://protesilaos.com/codelog/2019-05-26-xterm-letter-pi-bug/
xterm*faceName: Hack,DejaVu Sans Mono,Monospace
xterm*faceSize: 9.5
xterm*renderFont: true
xterm*boldColors: false
xterm*faceSize1: 8
xterm*faceSize2: 12
xterm*faceSize3: 15
xterm*faceSize4: 18.25
xterm*faceSize5: 20.5
xterm*faceSize6: 25.5
xterm*forceBoxChars: false
xterm*limitFontsets: 3
xterm*scaleHeight: 1.0
</code></pre>

<p>Original text below…</p>

<hr />

<p>Given certain font configuration combinations, the current version of
Xterm on Debian ‘buster’ has problems displaying the lower case Greek
letter Pi (π).  The terminal will print that letter form as a fixed font
while keeping everything else as a proportional font.  The flow of text
breaks.</p>

<p>This behaviour is exhibited with a variety of typefaces (Debian package
in parentheses):</p>

<ul>
  <li>Hack (fonts-hack)</li>
  <li>IBM Plex Mono (fonts-ibm-plex)</li>
  <li>Iosevka</li>
  <li>Monoid (fonts-monoid)</li>
  <li>Mononoki (fonts-mononoki)</li>
  <li>Source Code Pro</li>
  <li>Ubuntu Mono (fonts-ubuntu-console)</li>
</ul>

<p>A workaround is to define awkard point sizes when using one of the
offending typefaces, such as <code>10.5</code>, while also tweaking the
<code>scaleHeight</code> property.  This, however, has an undesirable side effect:
it prevents tmux and other applications that draw boxes from creating
continuous lines for their borders.  Lines appear dashed and, depending
on the distance between the dashes (and point size), may exhibit a “halo
effect” around them.  Lines become blurry and outright annoying to stare
at.</p>

<p>DejaVu Sans Mono displays lower case Pi correctly at point size 10 (my
preferred choice), but has problems with drawing borders.  Box drawing
can be fixed by tweaking its <code>size</code> and the <code>scaleHeight</code> property.
However, that prevents it from properly drawing Pi.</p>

<p>The only font family that faces no such trade-off is Fira Code, aka
<code>fonts-firacode</code> (based on Fira Mono, which is not in the Debian
archives).  Fira {Code,Mono} prints minuscule Pi (π) in its proper form
and draws continuous lines as expected.</p>

<p>All of the above are based on the assumption that <code>forceBoxChars</code> is set
to <code>false</code>.  Otherwise none of the afore-mentioned typefaces can pass
the test.</p>

<p>Modifying the <code>fontconfig</code> rules for aliasing and hinting causes other
undesired effects.  Besides, it makes no sense to distort all letter
forms across the system for Xterm to draw Pi and box lines as expected.</p>

<p>I ultimately do not know what it is specifically about Fira {Code,Mono}
that lends to its adaptability in this scenario.  I would assume it has
to do with the inherent proportions of its hyphen <code>-</code> and column <code>|</code>,
though this has not been researched further.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Overview of SXHKD</title>
      <description>Overview of the "Simple X Hotkey Daemon". SXHKD stores custom key bindings for controlling the window manager and launching other processes.</description>
      <pubDate>Thu, 23 May 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-05-23-sxhkd-demo/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-05-23-sxhkd-demo/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=3VgQ69FfktI">https://www.youtube.com/watch?v=3VgQ69FfktI</a></p>
         
         <p>In this screen cast, I offer an overview of SXHKD, the “Simple X Hotkey
Daemon”.  This is a program that stores custom key bindings.  We use it
to control the window manager, as well as launch other arbitrary
processes</p>

<p>I use <code>sxhkd</code> in tandem with my tiling window manager: <code>bspwm</code>.  These
two programs have been developed by the same person: Bastien Dejean.</p>

<p>The demo is based on the configurations that are bundled with the rest
of <a href="https://gitlab.com/protesilaos/dotfiles">my dotfiles</a>.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Demo: Manage dotfiles with GNU Stow</title>
      <description>GNU Stow is a software package installation manager. In this video I explain what it does why I use it to manage my dotfiles.</description>
      <pubDate>Tue, 21 May 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-05-21-gnu-stow-demo/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-05-21-gnu-stow-demo/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=TG_R7lpR2zU">https://www.youtube.com/watch?v=TG_R7lpR2zU</a></p>
         
         <p>In this screen cast, I offer an introduction to GNU Stow.  Its manpage
describes it as a “software package installation manager”.</p>

<p>I personally use <code>stow</code> to exercise centralised control over sets of
custom configuration files.  It makes things considerably easier,
especially when working with complex directory structures, such as
those found in <a href="https://gitlab.com/protesilaos/dotfiles">my dotfiles</a>.</p>

<p>In the video I also make reference to my latest book, “<a href="https://protesilaos.com/pdfd">Prot’s Dots
For Debian</a>” (PDFD) which contains a
section on how to use GNU Stow for the purposes of reproducing my
custom desktop session.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Parameter Expansion in BASH</title>
      <description>In this video I showcase some of the powerful ways of manipulating variables in pure Bash.</description>
      <pubDate>Fri, 10 May 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-05-10-bash-parameter-expansion/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-05-10-bash-parameter-expansion/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=S4D9KaW3ERw">https://www.youtube.com/watch?v=S4D9KaW3ERw</a></p>
         
         <p>In this screen cast I showcase some of the features of BASH for
manipulating variables, aka “parameters”.  Parameter expansion is a very
powerful feature.  Mastering it should greatly improve your shell
scripting skills (see the <a href="https://www.gnu.org/software/bash/manual/">GNU Bash
manual</a>).</p>

<p>Started applying this knowledge to the scripts that are distributed with
<a href="https://gitlab.com/protesilaos.com/dotfiles">my dotfiles</a>, in
preparation of the next beta version of “Prot’s Dots For Debian” (which
I introduced in <a href="https://protesilaos.com/codelog/2019-04-28-beta-bspwm-pdfd/">the previous
entry</a>).</p>

<p>Below I include the code samples shown in this screen cast.</p>

<hr />

<p>First demo script:</p>

<pre><code>#!/bin/bash

name=protesilaos

# Replace parameter with its value
echo "$name"

# Get parameter length
echo "${#name}"

# Extract substring ${parameter:offset:length}
echo "${name:0:4}"

# Capitalise first character
echo "${name^}"

# All majuscules
echo "${name^^}"
</code></pre>

<p>Second example:</p>

<pre><code>#!/bin/bash

name=PROTESILAOS

# First character is lower case
echo "${name,}"

# All miniscules
echo "${name,,}"

# Use default value if parameter is unset/null
unset name
echo "$name"
echo "${name:-Protesilaos}"
echo "${name:-$USER}"
</code></pre>

<p>Third sample:</p>

<pre><code>#!/bin/bash

freedom='GNU Not UNIX ; GNU plus Linux'

# Replace first occurence of pattern with string
echo "${freedom/GNU/Gahnoo}"

# Replace all matches of pattern with string
echo "${freedom//GNU/Gahnoo}"

# Remove first match of pattern
echo "${freedom/* ; /}"

freedom='GNU Not UNIX ; GNU is Not Unix ; Gahnoo slash Linaks ; GNU/Linux'

echo "$freedom"

# Remove all occurences of pattern
echo "${freedom//* ; /}"
</code></pre>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Beta: BSPWM on Debian 10 ‘buster’</title>
      <description>In this video I talk about my new book which helps readers reproduce my custom desktop session on Debian 10 'buster'.</description>
      <pubDate>Sun, 28 Apr 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-04-28-beta-bspwm-pdfd/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-04-28-beta-bspwm-pdfd/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=06XhUHxPDO0">https://www.youtube.com/watch?v=06XhUHxPDO0</a></p>
         
         <p>In this screen cast I talk about my new free/libre book: <a href="https://protesilaos.com/pdfd/">Prot’s Dots
For Debian</a>.  This is a full guide to reproducing my custom
desktop session on Debian 10 ‘buster’.</p>

<p>Apart from talking about PDFD, I also demonstrate the headline features
of my setup.</p>

<p>Links to more resources:</p>

<ul>
  <li><a href="https://gitlab.com/protesilaos/dotfiles">My dotfiles</a>.</li>
  <li><a href="https://gitlab.com/protesilaos/cpdfd">Code for PDFD</a>.</li>
</ul>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Switching to MATE Terminal</title>
      <description>I have changed my default terminal emulator from Simple Terminal to MATE Terminal.</description>
      <pubDate>Mon, 01 Apr 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-04-01-dots-mate-terminal/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-04-01-dots-mate-terminal/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>I have changed my default terminal emulator from Simple Terminal (ST) to
MATE Terminal (MT).  In the process, I modified 46 files, making 214
additions and 7843 deletions.  I also learned how to properly use
<code>dconf</code> to control <code>mate-terminal</code> programmatically.</p>

<p>The <a href="https://gitlab.com/protesilaos/dotfiles/commit/0cc77016cf5cf85bb115c650725b36f6858021b8">commit message from the
merge</a>
into <code>master</code> provides a detailed explanation (please ignore any typo or
odd comma).  The gist of it is that the new choice is better for
portability and maintainability, while also offering a few minor
usability benefits.</p>

<blockquote>
  <p>This is a major review of my dotfiles.  It intends to replace my
default choice of terminal emulator.</p>

  <p>Below is an excerpt of the commit message that signalled the start of
this process.</p>

  <hr />

  <p>Context: after extensive testing, I have decided to change my default
choice of terminal emulator to MT.  The previous default was my custom
build of the Simple Terminal (ST), by the Suckless community. Here is
the reasoning, in outline form:</p>

  <ul>
    <li>
      <p>MT is already installed on my system, because MATE is my fallback
option for a fully fledged desktop environment.</p>
    </li>
    <li>
      <p>ST has build dependencies, meaning that a user of my dotfiles must
first follow the instructions in the README that is bundled with
ST’s source code.  Without these dependencies, ST will fail to build
when performing an environment theme update (using either my
<code>tempusmenu</code> or <code>own_script_update_environment_theme</code>).</p>
    </li>
    <li>
      <p>ST needs to be recompiled for a theme change to occur.  MT updates
faster (courtesy of <code>own_script_mate_terminal_setup</code>) and is less
taxing on system resources in this specific instance (my laptop’s
fan is not activated).</p>
    </li>
    <li>
      <p>ST has major problems drawing box characters without extensive
patching.  Only at specific point sizes, does the selected font draw
continuous lines.  Whereas MT has no such issues.</p>
    </li>
    <li>
      <p>ST cannot draw emoji characters, while it requires an extra package
for symbolic fonts (see its README) in order not to segfault when
trying to display them.  MT supports emoji.  Now, it may seem
superfluous to have such a feature, but it is important once you
consider that people add emoji in emails or blog posts that can
ultimately be read through the terminal (such as via <code>neomutt</code> and
<code>newsboat</code> respectively).  While the font problems are not major,
they do add up (terminals are all about text, after all).</p>
    </li>
    <li>
      <p>From an aesthetic perspective, ST is not very well suited to the
dynamic size adjustments that happen in a tiling WM.  It tends to
create an inner padding when set at specific window sizes.  This is
most noticeable while running tmux (which I do all the time), where
the status line will have a large distance from the bottom and right
sides.  Admittedly, MT is not perfect in this regard, though it is
better.</p>
    </li>
    <li>
      <p>MT does not expose its theming options via a typical dotfile, but
still is easy to configure programmatically using dconf (what
<code>own_script_mate_terminal_setup</code> does).</p>
    </li>
    <li>
      <p>Other terminals that use the VTE widget (this is actually the
terminal emulator part, while MT is the implementation/framework)
such as {GNOME,Xfce} Terminal and Tilix, would also have the same
advantages as MT.  However, they are not installed by default, while
Tilix has a ton of other features that I do not need (thanks to
tmux).</p>
    </li>
    <li>
      <p>URxvt (Rxvt-Unicode), which is a popular choice for minimalist
window managers, exhibits similar problems to ST when it comes to
font drawing.  It also is not installed by default.  Furthermore,
I am not sure whether it is still maintained or not as version 9.22
is the one available across Stretch, Buster, Sid.</p>
    </li>
    <li>
      <p>Konsole on its own is an excellent choice, but not for my particular
use case.  It pulls in what seems like half the KDE-related package
list.</p>
    </li>
    <li>
      <p>I am writing a book on how anyone can reproduce my custom desktop
session on Debian 10 ‘buster’ (planned for publication in late
April, early May 2019).  Any kind of friction, is a hit on
usability.</p>
    </li>
  </ul>
</blockquote>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Demo of my Git’s Eye View</title>
      <description>In this video I demonstrate a short script I wrote for getting an overview of the status of all git-controlled repositories.</description>
      <pubDate>Mon, 25 Mar 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-03-25-gev-demo/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-03-25-gev-demo/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=Q1MqL5k2vUA">https://www.youtube.com/watch?v=Q1MqL5k2vUA</a></p>
         
         <p>In this screen cast I showcase my latest script, called “Git’s Eye
View”, else GEV.  This is a simple script I wrote for getting an
overview of the status of all git-controlled repositories inside a given
directory.</p>

<p>When running <code>gev</code>, a two-column list is drawn, with the status code on
the left and the file system path of the git-controlled repo on the
right.  The status codes are:</p>

<ul>
  <li>0 == no changes</li>
  <li>1 == unstaged changes</li>
  <li>2 == staged, but not committed</li>
  <li>3 == untracked files</li>
</ul>

<p>GEV is part of <a href="https://gitlab.com/protesilaos/dotfiles">my dotfiles</a>.
Within the next month or so, I will publish a book on how to reproduce
my custom desktop session on Debian 10 Buster. An announcement will be
made in the <a href="https://protesilaos.com/news/">news section</a>.  The book will be available in the
<a href="https://protesilaos.com/books/">books section</a> under the same copyleft terms as all my work on
this website.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>UNIX ways to task management</title>
      <description>In this video I demonstrate a couple of scripts that help me manage my task list.</description>
      <pubDate>Sun, 17 Feb 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-02-17-unix-ways-todo/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-02-17-unix-ways-todo/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=2apuSji1WQk">https://www.youtube.com/watch?v=2apuSji1WQk</a></p>
         
         <p>In this screen cast I demonstrate my methodology for writing tasks, as
well as a couple of scripts for interacting with the to-do list.</p>

<ul>
  <li><code>stm</code> is a CLI tool that provides various ways of presenting the
pending tasks, using standard UNIX utilities.</li>
  <li><code>stmmenu</code> is a <code>dmenu</code> interface that either removes a matching string
from the list, or appends a non-matching item to the list.</li>
</ul>

<p>All scripts as well as the entire desktop session are part of <a href="https://gitlab.com/protesilaos/dotfiles">my
dotfiles</a>.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Updating my ST to 0.8.2</title>
      <description>Documenting the reasoning and steps I followed to prepare my soft fork of ST: the Simple Terminal by the Suckless community.</description>
      <pubDate>Tue, 12 Feb 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-02-12-st-latest-upstream/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-02-12-st-latest-upstream/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>The Suckless community recently announced the release of
<a href="https://st.suckless.org/">st-0.8.2</a>.  Seeing as I maintain <a href="https://gitlab.com/protesilaos/st">a soft
fork</a>, it was time to refactor my
repo.  I took this opportunity to also review my build, which led me to
the realisation that I need no added features whatsoever.  The generic
terminal emulator is good enough.</p>

<h2>What my fork is about</h2>

<p>In terms of functionality, I build <code>st</code> in the user’s home directory.
This is how I have designed my custom desktop session (distributed via
<a href="https://gitlab.com/protesilaos/dotfiles">my dotfiles</a>): there is
<code>$HOME/bin</code> which is added to <code>$PATH</code>.</p>

<p>As for aesthetics:</p>

<ul>
  <li>I have modified the font definition to leverage my <code>fonts.conf</code>
settings in order to use my custom typefaces (see my dotfiles).</li>
  <li>All options related to colours are sourced from another file via an
<code>#include</code> directive.  This allows me to (i) add my <a href="https://protesilaos.com/tempus-themes/">Tempus
themes</a> and (ii) control ST’s appearance through
scripts that are part of my custom desktop session (where I perform
live theme switches across the entire environment).</li>
</ul>

<p>Here are a couple of video demonstrations:</p>

<ul>
  <li>Basics of <a href="https://protesilaos.com/codelog/2018-12-27-bspwm-demo-video/">my BSPWM session</a>.</li>
  <li>Using <a href="https://protesilaos.com/codelog/2019-01-13-tmux-demo-bspwm/">ST and TMUX with BSPWM</a>.</li>
</ul>

<h2>How I prepared my fork</h2>

<p>Downloaded the latest release tarball and extracted it in place:</p>

<pre><code>tar xf st-0.8.2.tar.gz
</code></pre>

<p>I made two copies of the decompressed directory.  The one served as
a reference point, while the other was used to apply my modifications.</p>

<p>Once I was done altering the source code, I did:</p>

<pre><code>diff -up ~/st-0.8.2-upstream ~/st-0.8.2-prot-soft-fork/ &gt; \
st-protesilaos-stavrou-soft-fork-0.8.2.diff
</code></pre>

<p>The generated <code>.diff</code> could then be applied to the upstream code base
with the following:</p>

<pre><code>patch path/to/st-protesilaos-stavrou-soft-fork-0.8.2.diff
</code></pre>

<h2>Review and refactor</h2>

<p>After applying my changes, I decided to review my use of upstream
patches, such as the one offering clipboard support, or the other that
improves the appearance of box-drawing characters.</p>

<p>All of them have been removed from my fork in the interest of long-term
maintainability.  It is difficult to guarantee that such features will
work with new upstream releases.  Plus their functionality is
inessential to my workflow… Learn to work with less!</p>

<p>To use [my] <code>st-0.8.2</code> on Debian Buster we need:</p>

<pre><code>sudo apt install libx11-dev libxft-dev libxext-dev libfreetype6-dev pkgconf
</code></pre>

<p>Simplifying things makes my life easier.  It is now trivial to maintain my
fork, which is an integral part of my custom desktop session.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>My UNIX-y ways to wallpapers</title>
      <description>In this video I demonstrate three of my scripts for setting the wallpaper in a minimalist, UNIX-y way.</description>
      <pubDate>Sat, 09 Feb 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-02-09-unix-ways-wallpapers/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-02-09-unix-ways-wallpapers/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=P3NrBfbTL_c">https://www.youtube.com/watch?v=P3NrBfbTL_c</a></p>
         
         <p>In this screen cast I demonstrate three scripts I have developed for
setting my custom desktop session’s wallpaper.</p>

<ul>
  <li><code>sbg</code> is a CLI tool that accepts the path to a single image file as an
argument.  All it does is set that file as the new wallpaper.</li>
  <li><code>sbgmenu</code> is a <code>dmenu</code> interface with two modes: (i) viewing images,
(ii) setting a wallpaper.  Everything is still text-based.</li>
  <li><code>nbm</code> follows a graphical approach.  It presents an image grid where
the user can enlarge an image and mark the one intended as the new
wallpaper.</li>
</ul>

<p>All scripts as well as the entire desktop session are part of <a href="https://gitlab.com/protesilaos/dotfiles">my
dotfiles</a>.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Save Simple Terminal from symbolic font segfault</title>
      <description>How to run the Simple Terminal (st) with support for symbolic fonts.</description>
      <pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-02-05-st-symbol-font/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-02-05-st-symbol-font/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>The scenario: you are on Debian (or derivatives) and are using the
Simple Terminal by the upstream suckless source or community repos such
as my <a href="https://gitlab.com/protesilaos/st">soft fork of ST</a>.</p>

<p>The problem: when ST tries to draw symbolic Unicode points—emoji—it
throws an error and quits.  This can happen quite often when using TUIs
such as <code>neomutt</code> and <code>newsboat</code>: you might get updates that include
such symbols in their title string.  I have also seen Git repos where
people use emoji in their commit messages…</p>

<p>The solution:</p>

<pre><code>sudo apt install fonts-symbola
</code></pre>

<p>Everything will then work as intended.  Just confirmed as much on
a machine running Debian Buster/Sid.</p>

<h2>Not needed for graphical applications</h2>

<p>To get emoji support on GUIs, I rely on another typeface altogether:</p>

<pre><code>sudo apt install fonts-noto-color-emoji
</code></pre>

<p>Then I use the appropriate rules in my fontconfig.  The following is
just a sample <code>fonts.conf</code>.  For the fully fledged implementation, refer
to <a href="https://gitlab.com/protesilaos/dotfiles">my dotfiles</a>:</p>

<pre><code>&lt;fontconfig&gt;
	&lt;!-- If the requested font is sans-serif --&gt;
	&lt;!-- Display sans-serif and then emoji fallbacks --&gt;
	&lt;match target="pattern"&gt;
		&lt;test qual="any" name="family"&gt;
			&lt;string&gt;sans-serif&lt;/string&gt;
		&lt;/test&gt;
		&lt;edit name="family" mode="prepend_first"&gt;
			&lt;string&gt;emoji&lt;/string&gt;
		&lt;/edit&gt;
	&lt;/match&gt;
	
	&lt;alias&gt;
		&lt;family&gt;emoji&lt;/family&gt;
		&lt;default&gt;&lt;family&gt;Noto Color Emoji&lt;/family&gt;&lt;/default&gt;
	&lt;/alias&gt;
&lt;/fontconfig&gt;
</code></pre>

<p>All of the above granted, I wish I could do without emoji in my
terminal…</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Manipulating colour values</title>
      <description>The methods I used to (i) convert HEX to RGB, (ii) blend two colours to create a median value, and (iii) scripting everything in BASH.</description>
      <pubDate>Sat, 26 Jan 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-01-26-manipulating-colours/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-01-26-manipulating-colours/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>While iterating on my <a href="https://protesilaos.com/tempus-themes/">Tempus themes</a> project of
accessible colour schemes for terminal emulators and text editors,
I started conducting experiments for mixing colours.  The goal is to
derive a median value from two others.  A couple of variants of red
would produce a third one in between them.  Same with two greens,
yellows, and so on for all basic sixteen colours that constitute each
theme’s palette.</p>

<h2>Scripting things with Bash</h2>

<p>Part of my experimentation was trying to figure out a way to do things
using the shell.  And I have found a way, only it is not
straightforward…</p>

<p>To start with, to derive the median colour from two others, we follow
this formula:</p>

<pre><code>blend = ( (R1 + R2) / 2 ) ( (G1 + G2) / 2 ) ( (B1 + B2) / 2 )
</code></pre>

<p>This assumes that the colour is defined in RGB, i.e as a mixture of red,
green, and blue channels.  <em>But what if we have been using hexadecimal
notation?</em>  A HEX colour might include letters, whereas an RGB one will
always be described with integers.</p>

<p>While there probably is a way to do arithmetic with base16 notation,
I could not figure it out.  As such, I settled on the roundabout way of
converting HEX to RGB, doing the arithmetic, and then turning the
blended colour into HEX.</p>

<p>To rebase a HEX to RGB (base16 to base10), we need to know how to break
it up into its constituent red, green, blue channels.  So a hexadecimal
value such as <code>202427</code> would be abstracted to <code>20 (red channel)</code>, <code>24
(green channel)</code> <code>27 (blue channel)</code>.  Doing that in the shell:</p>

<pre><code>#!/bin/bash

col0=202427 # black variant

echo "${col0:0:2}" # prints first pair of characters (red)
echo "${col0:2:2}" # prints second pair of characters (green)
echo "${col0:4:2}" # prints third pair of characters (blue)
</code></pre>

<p>This gives us:</p>

<pre><code>20
24
27
</code></pre>

<p>Now we need to convert each channel to decimal notation, which is what
is used for RGB.  Instead of doing the mathematics, we can use the
<code>printf</code> built-in mechanism for converting base16 to base10.  This is
done with the <code>%d</code> specifier.  To denote the presence of a hexadecimal
number, we prepend <code>0x</code>.  More concretely, we use the substring
extraction we saw earlier to operate on each of the colour’s three
channels:</p>

<pre><code>printf "%d,%d,%d" 0x${col0:0:2} 0x${col0:2:2} 0x${col0:4:2}
</code></pre>

<p>This command takes <code>0x20</code>, <code>0x24</code>, <code>0x27</code> in sequence and prints them in
decimal notation as R,G,B.  Let us put it all together and see what we
get, while also introducing our other shade of black:</p>

<pre><code>col0=202427 # black variant
col8=292b35 # bright black variant

col0rgb=$(printf "%d,%d,%d" 0x${col0:0:2} 0x${col0:2:2} 0x${col0:4:2})
col8rgb=$(printf "%d,%d,%d" 0x${col8:0:2} 0x${col8:2:2} 0x${col8:4:2})

echo "$col0rgb"
echo "$col8rgb"
</code></pre>

<p>Our new RGB colour is <code>32,36,39</code>.  Doing the same on the bright black
variant <code>292b35</code>, will give us <code>41,43,53</code>.</p>

<p>Notice the presence of commas.  Without them they would be not be valid
RGB colours.  However, for this particular task what we want is to
ultimately blend the two and get a HEX out of them.  No commas then:</p>

<pre><code>col0rgbalt=$(printf "%d%d%d" 0x${col0:0:2} 0x${col0:2:2} 0x${col0:4:2})
col8rgbalt=$(printf "%d%d%d" 0x${col8:0:2} 0x${col8:2:2} 0x${col8:4:2})
</code></pre>

<p>With that done, here comes the ugly part of using the formula that
derives the median value between the two.  The code we will be using
looks like this:</p>

<pre><code>printf "%d" "$(( (${col0rgbalt:0:2} + ${col8rgbalt:0:2}) / 2 ))"
</code></pre>

<p>We need to do this for each of the RGB channels.  So thrice:</p>

<pre><code>printf "%d%d%d" "$(( (${col0rgbalt:0:2} + ${col8rgbalt:0:2}) / 2 ))" "$(( (${col0rgbalt:2:2} + ${col8rgbalt:2:2}) / 2 ))" "$(( (${col0rgbalt:4:2} + ${col8rgbalt:4:2}) / 2 ))"

col08rgb=$(printf "%d%d%d" "$(( (${col0rgbalt:0:2} + ${col8rgbalt:0:2}) / 2 ))" "$(( (${col0rgbalt:2:2} + ${col8rgbalt:2:2}) / 2 ))" "$(( (${col0rgbalt:4:2} + ${col8rgbalt:4:2}) / 2 ))")

echo "$col08rgb"
</code></pre>

<p>This gives us <code>363946</code>, which in valid RGB would be <code>36,39,46</code>.  As we
can tell, it is positioned in between <code>32,36,39</code> and <code>41,43,53</code>.  Great,
almost done!  Now convert that to base16, this time using the <code>%x</code>
specifier, while omitting the <code>0x</code> notation:</p>

<pre><code>printf "%x%x%x" ${col08rgb:0:2} ${col08rgb:2:2} ${col08rgb:4:2}
</code></pre>

<p>Our new colour is <code>24272e</code>, which once again is between <code>202427</code> and
<code>282b35</code>.  Perfect!</p>

<h2>Moving forward with our newfound knowledge</h2>

<p>The Tempus Themes use a 16 colour palette that represents the standard
one you would find on any GNU/Linux terminal emulator.  The colours are,
in order:</p>

<ul>
  <li>black, red, green, yellow, blue, magenta, cyan, white</li>
  <li>bright {black, red, green, yellow, blue, magenta, cyan, white}</li>
</ul>

<p>These are denoted numerically as:</p>

<ul>
  <li>0, 1, 2, 3, 4, 5, 6, 7</li>
  <li>8, 9, 10, 11, 12, 13, 14, 15</li>
</ul>

<p>By creating a blend out of each regular and bright pair, we get an extra
eight colours, bringing the total count to twenty four.  <em>Should we
commit to that path though?</em></p>

<p>I remain undecided.  Part of developing the Tempus Themes is to preserve
a certain contrast ratio that conforms <strong>at minimum</strong> with the WCAG AA
accessibility standard.  This is the scientific guide to choosing
colours.  However, a theme is also a work of art.  It needs to have
a certain aesthetic to it, a recognisable look and feel.  Deriving
colours programmatically can detract from the appeal of the end product.
We do not want that, as fascinating as the procedure may be.</p>

<p>So far, the exception to this hesitation of mine is to allow
programmatic blending only from the background values of each theme.
Basically a third colour that is designated internally as the “dimmed”
background.</p>

<p>I still wish to make design decisions myself, while letting the computer
handle the repetitive tasks.</p>

<h2>The Tempus Themes are under active development</h2>

<p>If you have not checked my project in a while, please have another look
at the <a href="https://gitlab.com/protesilaos/tempus-themes">main git repo</a>
(each app-specific implementation has its own dedicated repository, see
links in the README).</p>

<p>The latest template I added concerns the GTK4 Source View widget.
Basically, this means that you can use the Tempus Themes in GNOME
Builder.</p>

<p>Besides, these themes are also deeply incorporated in <a href="https://gitlab.com/protesilaos/dotfiles">my
dotfiles</a>.  I use them daily
and always try to improve them further and/or port them to more
applications (notwithstanding the comprehensive list currently on
offer).</p>

<p>For the sake of completeness, the colours used in the examples above,
are <code>col0</code> and <code>col8</code> from <a href="https://protesilaos.com/tempus-winter/">Tempus Winter</a>.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Task management using the shell and dmenu</title>
      <description>I created my own solution to managing my task list. Everything now exists in a plain text file. And my new bespoke scripts write to it.</description>
      <pubDate>Tue, 22 Jan 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-01-22-manage-task-list/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-01-22-manage-task-list/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>I came up with my own solution to managing my task list.  Yes, there
probably are a zillion such approaches in the libre software world.  And
yes, mine is not the best of the bunch.  But I am happy with what I got,
so I might as well share my experience.</p>

<p>It all starts with the realisation that a task list is just a plain text
file.  You do not need a spreadsheet or some other type of structured
data.  Manipulating text is what the terminal is good at.  The point is
to be able to control everything with standard shell programs, such
as <code>cat</code>, <code>sed</code>, <code>grep</code>, <code>sort</code>.</p>

<p>Here is a sample of my task list:</p>

<pre><code>cat ~/.my_task_list

Continue with the work @swätzchen =2019-01-23
This should pop up first =2016-12-21
Contact &lt;person&gt; @chat =2019-01-22
Another test @dots =2017-01-20
Date is not added @dots
this task starts with a lower case letter
</code></pre>

<p>I can add items to the list by editing the file.  Such as:</p>

<ul>
  <li>By using Vim or another text editor.</li>
  <li>Or by appending some text directly <code>echo 'string' &gt;&gt; ~/.my_task_list</code>.</li>
</ul>

<p>As this is plain text, no markup is needed, no further requirements.
<em>Just write</em>.</p>

<h2>Managing the task list</h2>

<p>Writing to a file is only the beginning.  Now we get to manipulate that
text.  Some examples are in order.</p>

<p>Print the contents of the file and capitalise the first letter on each
sentence:</p>

<pre><code>cat ~/.my_task_list | sed 's/\(^[a-z]\)/\U\1/'

Continue with the work @swätzchen =2019-01-23
This should pop up first =2016-12-21
Contact &lt;person&gt; @chat =2019-01-22
Another test @dots =2017-01-20
Date is not added @dots
This task starts with a lower case letter
</code></pre>

<p>Print only the tasks that have a due date assigned to them.  Also sort
numerically and put the date at the beginning of the line:</p>

<pre><code>grep -e '=[0-9-]*' ~/.my_task_list | sed 's/\(^.*\) =\([0-9-]*\)/\2: \1/g' | sort -g

2016-12-21: This should pop up first
2017-01-20: Another test @dots
2019-01-22: Contact &lt;person&gt; @chat
2019-01-23: Continue with the work @swätzchen
</code></pre>

<p>Sort and display tasks that match a specific string or pattern:</p>

<pre><code>grep -e '^This\|^this' ~/.my_task_list

This should pop up first =2016-12-21
this task starts with a lower case letter
</code></pre>

<p>You get the idea…  It is new to me, so I might figure out more use cases
and better ways of doing things.  Everything will be made clear in time
as I believe I am on the right track.</p>

<h2>Simple formatting</h2>

<p>While everything is plain text, we can still use typographic symbols to
give a sense of structure and assign meaning to different parts of the
string.</p>

<p>This is particularly useful for printing the data in a different format
than its original.  Such as what I did in the example above where I got
the tasks with a date assigned to them.  The date appears first and then
the task description, even though the actual file has the date <em>after</em>
the task’s description.</p>

<p>Without any kind of structure we find ourselves more limited in what we
can do.  Adding a few minor things here and there can help us greatly.
As such, I follow this pattern for marking my tasks:</p>

<pre><code>&lt;description&gt; @&lt;context&gt; #&lt;tag&gt; =&lt;date in YYYY-MM-DD&gt;
</code></pre>

<p>I usually need only the <code>&lt;description&gt;</code>.  Every other piece of
“meta-data” is added in that given order, so that the context always
precedes the tag, which always precedes the date.</p>

<h2>Introducing a couple of scripts</h2>

<p>To further improve my workflow, I just finished writing two scripts that
iterate on my task list file:</p>

<ul>
  <li>The first is <code>stm</code>, the <em>Simplistic Task Manager</em> which is a wrapper
for the scenaria I showcased above.  So I can run <code>stm</code> to get a list
of my pending tasks;  <code>stm due</code> to show those with a due date; and
<code>stm list &lt;string&gt;</code> to search for something specific.</li>
  <li>The second is <code>stmmenu</code>, which is a <code>dmenu</code> tool that displays a list
with all my tasks.  If I select an existing item, it is removed from
the list.  If I type something new, it is appended to the list.</li>
</ul>

<p>While <code>stm</code> is meant to be used in the terminal, <code>stmmenu</code> is invoked
with a hotkey.  <em>Need to quickly write down a task?</em>  Press the key
binding and start typing <code>&lt;description&gt; @context #tag =&lt;date&gt;</code>.  Done!</p>

<p>These new scripts are part of <a href="https://gitlab.com/protesilaos/dotfiles">my
dotfiles</a>.  Look inside the
“bin” directory.  Note though that I plan to review them, so things
might change in the future.</p>

<h2>“Do one thing and do it well”</h2>

<p>Plain text.  Standard shell utilities.  A user-defined methodology for
writing things.  Minimal. Super effective.</p>

<p>I am so satisfied with the results that I have completely removed <code>task</code>
(aka “Taskwarrior”) from my workflow.  That tool has served me well over
the last couple of years or so, but I always felt it offered more than
I ever needed.  Or it tried to perform too many specialised functions
outside the narrow confines of controlling a task list.  Something was
amiss.</p>

<p>Now I have found solace in the simplest of tools which, rather
unsurprisingly, involve the application of UNIX principles and use of
relevant commands.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Why I use TMUX with BSPWM</title>
      <description>In this video I demonstrate the basic features of TMUX, the terminal multiplexer. Also explain why I use it with BSPWM.</description>
      <pubDate>Sun, 13 Jan 2019 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2019-01-13-tmux-demo-bspwm/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2019-01-13-tmux-demo-bspwm/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=zDz8nlUflbc">https://www.youtube.com/watch?v=zDz8nlUflbc</a></p>
         
         <p>In this screen cast I demonstrate the basics of TMUX, the terminal
multiplexer.  I discuss why I think this is a very powerful tool to
master and why I do not see any real overlap between it and a tiling
window manager (such as BSPWM).</p>

<p>I use TMUX daily and consider it essential to my workflow.  The theme
and other configurations on display are part of <a href="https://gitlab.com/protesilaos/dotfiles">my
dotfiles</a>.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Demo of my BSPWM on Debian</title>
      <description>In this video I demonstrate BSPWM on my Debian machine. This is a tiling window manager that I use daily.</description>
      <pubDate>Thu, 27 Dec 2018 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2018-12-27-bspwm-demo-video/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2018-12-27-bspwm-demo-video/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>Raw link: <a href="https://www.youtube.com/watch?v=jl9wMl6gSJw">https://www.youtube.com/watch?v=jl9wMl6gSJw</a></p>
         
         <p>In this screen cast I demonstrate the basics of BSPWM (Binary Space
Partitioning Window Manager).  This is a tiling window manager that
I use on my Debian GNU/Linux machine.  It is an integral part of my
custom desktop session.</p>

<p>For the underlying code base, refer to <a href="https://gitlab.com/protesilaos/dotfiles">my
dotfiles</a>.  The more
adventurous among you can also have a look at an older article of mine
on <a href="https://protesilaos.com/codelog/how-to-bspwm-debian-sid/">how to get my setup on Debian
Sid</a> (though this will not give you
the most up-to-date version of my dotfiles—I intend to have a new guide
in time for Debian 10).</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Now using Vim without plugins</title>
      <description>I no longer use any plugins in my .vimrc. External functions, such as file browsing or git diffs, are handled by other tools. The UNIX way.</description>
      <pubDate>Sat, 24 Nov 2018 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2018-11-24-vim-no-plugins/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2018-11-24-vim-no-plugins/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>I no longer use plugins in my <code>.vimrc</code>.  I have been running this
experiment for a while now.  I had already reduced the list of plugins
to less than five and was actively trying to work without them prior to
disabling them altogether.</p>

<p>I like my new setup and consider it superior to what I had before, 
because I adapted my workflow to make better use of other CLI programs.<br />
In general, I think all one needs for a decent Vim experience is a 
sensible configuration file.  Everything else should be taken care of by 
external tools.</p>

<h2>Letting go of the IDE mentality</h2>

<p>My first code editor was Atom on a Mac.  It shaped my expectations about 
what coding is about and what tools should be incorporated in the 
development environment.  I knew nothing about GNU/Linux, the UNIX 
philosophy, the CLI, etc. so I got this notion that the editor must 
include virtually everything that is needed for the task at hand.</p>

<p>I gradually learned about Vim and started using it, slowly leaving Atom
behind.  This happened for good after I switched to the libre software
side full-time some 2+ years ago.  I still did not know much though, so
I retained this IDE mentality: Vim should be able to replicate all sorts
of functions that the console could otherwise provide unbeknownst to me.</p>

<p>As such, I would have a plugin for browsing the files in my current
working directory and its subdirectories, another for showing me the git
changes, and so on.  There is no denying that these make Vim a better
tool overall, <em>if you only rely on Vim</em>, without support from the rest
of the operating system.  If, however, you start leveraging what the OS
provides, Vim’s plugins become largely redundant.</p>

<p>Not only that, but some of Vim’s built-in features turn out to be
useless, perhaps some edge cases notwithstanding.  For example, I find
no need to ever use splits (or however the tiles are called), when
<code>tmux</code> can handle that splendidly.  Similarly, I have never encountered
a situation where <code>:terminal</code> would genuinely improve my workflow.  If I
need to run some command I can just as easily fire up a new instance of
my terminal or use <code>tmux</code> again to achieve the same result.</p>

<h2>“Do one thing and do it well”</h2>

<p>This means operating in accordance with the UNIX way.  Vim becomes
another specialised instrument that helps you get things done.  It has a
small footprint, is quick and nimble, plus you get to learn the rest of
your toolkit better.</p>

<p>In my experience, plugins have the unintended yet major downside of
offering disincentives to learning other CLI programs.  A plugin is akin
to a black box.  It does things in ways that the user does not fully
comprehend, unless they have prior knowledge of similar tools—which they
most likely acquired by not using the plugin equivalent.</p>

<p>Take some of the Git-related offers for example: they are cool and
convenient, but then you learn that plain <code>git</code> can show diffs, status,
and a whole host of information.  Just spend some time on <code>man git</code>.
The plugin is just a wrapper that obfuscates the underlying utility.</p>

<p>You may be thinking: why bother with the command line when the plugin
works just as well, if not better in terms of convenience?  For me, the
superiority of doing things the UNIX way is about being able to solve
problems through <em>shell scripting</em>.  Once you learn the commands for
running common file operations, manipulating streams, and the like, you
begin to see new possibilities that are not immediately apparent in a
Vim-centric setup.</p>

<p>Granted, I am no shell guru myself—I am not even a programmer.  Yet I 
can already see how such a workflow benefits my computing.</p>

<h2>The right tool for the job</h2>

<p>For me part of using GNU/Linux on a daily basis is learning new things,
which basically comes down to improving your knowledge of the CLI tools
on offer.  It is why I also enjoy customising <a href="https://gitlab.com/protesilaos/dotfiles">my working
environment</a>.  No, I do not do
it for the sake of ‘ricing’, as per Reddit parlance, but to develop a
deeper understanding of what is going on and how things work together.</p>

<p>I am aware that there are people whose needs are profoundly different
than mine and who must maintain a long list of plugins to make Vim meet
their requirements.  That is just fine.  I did it, it works.  The beauty
of free software is that you can make those decisions yourself: pick and
choose what caters to your needs, follow the beaten path or do things
out of the ordinary.  Your call.</p>

<h2>Portability and adaptability</h2>

<p>On another note, the upside to removing all plugins from my Vim setup is
that my dotfiles are ever more portable.  This is consistent with my
reasoning for switching from <a href="https://protesilaos.com/codelog/2018-11-23-bspwm-lemonbar/">Polybar to Lemonbar for my system
panel</a>.</p>

<p>It also puts me in a better position with regard to being able to
operate in an unknown environment, say, a remote machine where my
dotfiles cannot be deployed or a custom <code>.vimrc</code> is not an option.</p>

<p>Adaptability is a huge asset.  I still have to do some work on that 
front: simplify my key bindings and the like.  The idea is to reach a 
state where I can be vimrc-agnostic, or at least know how to do 
everything without my configurations in place.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>My BSPWM now uses Lemonbar</title>
      <description>I switched to Lemonbar: it is in the Debian repos and offered me a chance to learn how to dynamically display information about my system.</description>
      <pubDate>Fri, 23 Nov 2018 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/2018-11-23-bspwm-lemonbar/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/2018-11-23-bspwm-lemonbar/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>I am now using Lemonbar to draw a panel for my custom working
environment.  I was running <a href="https://github.com/jaagr/polybar">Polybar</a>
before.  The reasons for the switch are documented herein.</p>

<p>In practice, this means that the <code>master</code> branch of <a href="https://gitlab.com/protesilaos/dotfiles">my
dotfiles</a> is considered
unstable until further notice (see the README for demos with the new
panel).</p>

<h2>Stick with the Debian repos</h2>

<p>To get Lemonbar execute:</p>

<pre><code>sudo apt install lemonbar
</code></pre>

<p>Compare that to Polybar, which is not available in the official
repositories.  One has to compile it from source.  A complication that
can lead to inconveniences down the road.  What if in the near future I
would also have to hunt down some of its new dependencies?  And what if
Debian Stable, which I intend to <a href="https://protesilaos.com/codelog/debian-sid-stable-plan/">switch to once Buster is
out</a>, does not have the version
numbers needed to compile from source?  What if conflicts arise?</p>

<p>I actively try to avoid making a FrankenDebian.  The only package I have
no hesitation compiling from source is my fork of Simple Terminal by the
Suckless community.<sup id="fnref:MySTFork" role="doc-noteref"><a href="#fn:MySTFork" class="footnote" rel="footnote">1</a></sup>  For all the rest, I try to rely only on
packages provided by the official mirrors and make sure never to mix and
match from the various Debian channels (stable, testing, unstable, …).</p>

<p>There are cases where building directly from upstream is necessary.
Such as when a piece of software is an absolute requirement for a given
task and where no adequate alternatives are present.  This is not the
case with Polybar.  It is not an integral part of my workflow, while
there are alternatives available, including the option to use something
like <code>xfce4-panel</code> in tandem with <code>bspwm</code>.</p>

<h2>Have fun scripting</h2>

<p>Make no mistake: I like Polybar.  It is a tool that covers most use
cases and its modules work well with fairly little effort.  Its
configuration file is easy to understand.  It uses a standard way for
modifying the looks of the various pieces of information on display.
Furthermore, it supports Xft fonts (proportional, outline font files
like <code>.ttf</code>) and can display glyph icons with iconic typefaces such as
FontAwesome.</p>

<p>With all this power comes the downside of skipping an important learning
session on how to retrieve all the data Polybar can present.  You want
Polybar to display <code>bspwm</code> workspaces and the flags of the focused node?
Just add the relevant module to the config file and you are good to go.
Now try getting that yourself to realise how much more demanding the
task becomes.</p>

<p>Seeing as I was looking for alternatives anyhow, I decided to opt for
Lemonbar.  What this tool does is draw an empty panel.  There are no
modules built in.  No defined configuration file to add the stuff you
need.  Nothing.  Lemonbar will just print the output of a command, same
as what you would expect in the shell.  Example:</p>

<pre><code>echo "Hello world" | lemonbar -p
</code></pre>

<p>This pipes the output of <code>echo</code> to the panel.  The <code>-p</code> flag makes the
panel stay in place.  This is where scripting comes in: get it to
display information dynamically, place it in the appropriate position,
format it as needed, and so on.</p>

<p>Not to bother you with the details, check out my <a href="https://gitlab.com/protesilaos/dotfiles/blob/master/bin/bin/melonpanel">Lemonbar script,
called
“melonpanel”</a>
for the implementation, as well as my <code>bspwmrc</code> and <code>sxhkdrc</code> to see how
it fits in with the rest of the system.</p>

<h2>Scripts are more portable than source code</h2>

<p>I want to make my dotfiles easy to deploy on new systems.  Having to
compile software is the opposite of what I target.  I prefer to run one
<code>apt install</code> with all the packages I need and then use GNU Stow on my
dotfiles.  Everything will be in place within minutes.  Eventually this
process will be scripted so that <code>./install.sh</code> will streamline the 
work.</p>

<p>I attach great importance to portability: my custom desktop session
should ultimately be reproducible.  The dotfiles must work on any clean
install of the next Debian stable release (codenamed “Buster”).  This is
an ambitious, complex, multi-faceted task.  Removing bottlenecks will
only be to its benefit.  My plan is never to have to compile a piece of
software from source and then expect the user to maintain the package.
Debian is not meant for that kind of setup (well-justified exceptions
notwithstanding).</p>

<p>Lemonbar it is then!</p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:MySTFork" role="doc-endnote">
      <p>My fork of the Simple Terminal by Suckless is distributed with my dotfiles.  There is a precompiled binary inside the “bin” directory as well as the source code inside “st”.  Additionally, my fork has <a href="https://gitlab.com/protesilaos/st">its own repo</a>. <a href="#fnref:MySTFork" class="reversefootnote" role="doc-backlink">[^]</a></p>
    </li>
  </ol>
</div>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Xrandr output for LightDM multihead</title>
      <description>Tips to configure LightDM to run the appropriate Xrandr command at startup. This also sets up dual monitor on BSPWM.</description>
      <pubDate>Mon, 05 Nov 2018 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/lightdm-multihead-xrandr/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/lightdm-multihead-xrandr/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>I have been running a dual monitor setup on my laptop for about a month
or so.  This is a Lenovo ThinkPad X220 with a display resolution of
1366x768.  I connect to it a 1920x1080 monitor via the VGA port.  It
enables me to configure <a href="https://gitlab.com/protesilaos/dotfiles">my custom working
environment</a> to have separate
virtual desktops per display, which I consider a major productivity
boost to an already efficient workflow.</p>

<p>All was good. The one annoyance I had since the very beginning was the
display manager (<code>lightdm</code>) not adapting to my hardware automagically
(the display manager basically is the program that runs the login screen
and handles user sessions).  I could not find a way to instruct it to
use my monitors in the way I had laid them out, with the appropriate
settings for each.</p>

<p>This is no more.  Today I discovered a solution which, in hindsight, is
obvious.  LightDM can execute a script at startup.  The exact same
command I use to configure dual monitors on <code>bspwm</code> can be used by
<code>lightdm</code>.</p>

<h2>Script to set the correct Xrandr output</h2>

<p>Here is the gist of my admittedly simplistic script in its current iteration.</p>

<p class="warn">I might modify it further, so if you are reading this at a future date, better
consult <a href="https://gitlab.com/protesilaos/dotfiles">my dotfiles</a>, specifically
the items inside the “bin” directory.</p>

<pre><code>#!/bin/bash

# ... text goes here (see actual file)...

# set variable with the command we need to evaluate
my_laptop_external_monitor=$(xrandr --query | grep 'VGA1 connected')

# If the VGA1 port connects to a monitor, the output of the variable
# will not be empty.  In which case it is assumed that I am using my
# secondary display, whose resolution I know in advance.  If the
# variable is empty, then no external monitor is connected.
#
# This is a simplistic approach which will not work if the external
# monitor has another resolution.  It will also fail if executed from
# another machine, say, another laptop that uses an HDMI connection
# instead.
if [ -n "$my_laptop_external_monitor" ]; then
	xrandr --output LVDS1 --primary --mode 1366x768 --rotate normal \
	--output VGA1 --mode 1920x1080 --rotate normal --right-of LVDS1
else
	xrandr --output LVDS1 --mode 1366x768
fi
</code></pre>

<p>I put this in a file inside my local “bin” directory, which I then make
executable with <code>chmod +x</code> (my <code>~/bin</code> is included in the <code>$PATH</code>—see my
dotfiles).</p>

<h2>Edit the LightDM configuration file</h2>

<p>On Debian we need to edit <code>/etc/lightdm/lightdm.conf</code>, which requires
root privileges.  But first, make a backup of that file in case things
go awry.</p>

<p>Now search for <code>display-setup-script=</code>.  It should be commented out
(preceded by a <code>#</code>) and should have nothing following the equal sign.
This option is found under the settings heading for <code>[Seat:*]</code>.
Uncomment it by removing the column sign at the beginning of the line.
Then add the absolute path to the aforementioned script.</p>

<p>For example:</p>

<pre><code>[Seat:*]
# other
# options
display-setup-script=/home/prot/bin/own_script_laptop_dual_monitor
# more
# options
</code></pre>

<p>Done!  LightDM now works the way I like it.  It presents the login
window and top panel on the monitor where the mouse cursor is on.  If
the cursor moves to the other monitor, so does the interface.  The
inactive screen only displays the wallpaper.</p>

<h2>An opportunity to simplify and refine my setup</h2>

<p>Figuring out this fix provided a unique opportunity to revisit the
scripts I had initially developed.  I found some errors and duplication
of work, which I promptly addressed.</p>

<p>If you have come across a similar problem, please make sure you do not
copy-paste without understanding the meaning of these commands.  Also
note that the script presented herein is not designed to work in a
variety of multihead setups with arbitrary resolutions and a wide range
of possible combinations.  I know my hardware: this only caters to my
specific use case.</p>

<p>That granted, feel free to <a href="https://protesilaos.com/contact/">contact me</a> in case you think I
can help you adapt this to your system.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Script to subset fonts for the web</title>
      <description>I wrote a small script that leverages a python tool to reduce font files only to the selected Unicode points.</description>
      <pubDate>Sat, 03 Nov 2018 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/script-subset-font-web/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/script-subset-font-web/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>It is a good practice to optimise font files before self hosting them.
Each font family may contain hundreds of glyphs that are not used
anywhere on the website.  This typically concerns the characters from
scripts other than the one[s] you write in.  Subsetting a font file
removes those superfluous code points.  It is the right way to reduce
overall file size.  For example, I only use glyphs from the Latin and
Greek alphabets, as well as punctuation marks and numerals that are
common to both.</p>

<h2>Self hosted Google Fonts was a decent compromise</h2>

<p>In the past, I would get fonts optimised for my use case from the Google
Fonts project.  It already offers font presets that include the
supported Unicode subsets.  You can download a <code>ttf</code> file or set
thereof, then run command line tools to convert it to the <code>woff</code> and
<code>woff2</code> formats for use on the web.  Or you can use a web app like the
<a href="https://google-webfonts-helper.herokuapp.com/fonts">google webfonts
helper</a> which
automates those steps for you.</p>

<p>The major downside with that method is the lack of control.  You are
limited to fonts that are hosted on Google’s platform.  Some of the best
free/libre typefaces are not available there, such as the DejaVu fonts,
Mononoki, Hack, FiraGO, Iosevka, and so on.</p>

<p>Besides, the plethora of choice on that platform is largely an illusion.
The available options are limited to a small group of fonts once you
factor in the need for supporting multiple languages, bold, italics,
etc. (most offerings are incomplete or at least not suited to my
requirements).</p>

<p>Personally, I prefer the aforementioned free fonts.  The problem is that
they do not provide subsets or convenient built-in tools to reduce the
Unicode coverage only to the set of needed glyphs.  For my application,
an optimised <code>woff</code> is about 50KB while <code>woff2</code> falls to 30KB.  Compare
that to something around 1MB for Latin + Extended Latin + Greek and
Coptic + Cyrillic…</p>

<p>This is where Google’s service has a clear advantage.  It is why I would
ultimately compromise on my demands, using self hosted variants of
Google Fonts because I did not know how to subset fonts myself.  And no,
sending ~5MB of font data per initial page load was never something I
wanted to do.</p>

<h2>The “fonttools” package to the rescue</h2>

<p>Subsetting fonts is no longer a hindrance.  Today I discovered a package
in the Debian repos which offers the means to subset a font from the
command line.  It is the <code>fonttools</code> collection of python programs.</p>

<pre><code>sudo apt install fonttools
</code></pre>

<p>After figuring out the command I needed to execute, I wrote a small BASH
script that automates the process for each <code>ttf</code> file in the present
working directory.  Below is the essence of the script in its current
“alpha” version.  I bundle it with <a href="https://gitlab.com/protesilaos/dotfiles">my
dotfiles</a> under the “bin”
directory, as this is something I might develop into a multi-purpose
utility.</p>

<pre><code>#!/bin/bash

# This function accepts two arguments.  The first is the name of the ttf
# file without the file type extension.  The second is the desired
# output format (woff|woff2).  These are provided by the subsequent
# loop.
subset_font() {
    pyftsubset "$1.ttf" \
    --unicodes='U+0020-007E,U+00A1-00FF,\
    U+0370-03CE,U+2010,U+2012-2014,U+2018-201F,U+2022-2027' \
    --layout-features='*' \
    --flavor="$2" \
    --output-file="$1.$2"
}

# Loop through all ttf files in the present working directory and run
# the `subset_font` function defined above.
for i in $(find ./*.ttf | sed 's,\(\./\)\([a-zA-Z0-9_-]*\)\(\.ttf\),\2,g'); do
    subset_font $i 'woff'
    subset_font $i 'woff2'
done
</code></pre>

<p>Note the value of the <code>--unicodes</code> flag in the <code>subset_font</code> function.
I had to figure out the Unicode code points I had to reference. This
website on <a href="https://unicode-table.com">Unicode tables</a> proved an
invaluable resource.</p>

<h2>About the two font families I use</h2>

<p class="warn">This section is out-of-date.  I now only use one font: Clear Sans.  See
<a href="https://gitlab.com/protesilaos/protesilaos.gitlab.io/commit/5f168cf6eacbeb47eff6e6a5f7300b502a659317">commit
5f168cf6</a>
for the details.  However, FiraGO and Hack (alt) are still the default
typefaces on my GNU/Linux computer.  Refer to <a href="https://gitlab.com/protesilaos/dotfiles">my
dotfiles</a> for more on that.</p>

<p>As I linked to my dotfiles already, I might as well write a few words
about the fonts I have chosen.</p>

<p>The first is <a href="https://bboxtype.com/typefaces/FiraGO/">FiraGO</a>, a
sans-serif typeface, which is what is applied to the body text and
headings.  It is the main font of this website and is available in
regular and bold weights with corresponding italics.  This is also the
system font I apply on my Debian machines running my custom working
environment.</p>

<p><em>FiraGO</em> is the continuation of <em>Fira Sans</em>, with support for more
scripts and, possibly in the future, more variants.  At this point,
<em>FiraGO</em> has not yet deviated substantially from its predecessor, though
this is to be expected.</p>

<p>Fira Sans was a project funded by Mozilla to cover the needs of the
Firefox OS endeavour.  It is a free/libre implementation of Erik
Spiekermann’s “modern classic”: the <em>FF Meta</em>.  Consider reading
<a href="https://typographica.org/typeface-reviews/fira-sans/">Matthew Butterick’s
review</a> on the
matter.</p>

<p>My second font is <a href="https://sourcefoundry.org/hack/">Hack</a>, a monospaced
design that is ideal for long coding sessions <em>because it is not
flamboyant</em>.  It only tries to be utilitarian.  Legible, clear, well
balanced, decipherable.  A true workhorse.  It seems to me that <em>Hack</em>
is the best typeface to emerge from the libre software milieu, as it is
derived from the <em>DejaVu</em> fonts, which themselves trace their roots to
<em>Bitstream Vera</em>.</p>

<p>The <em>Hack</em> designers offer the
<a href="https://github.com/source-foundry/alt-hack">alt-hack</a> repository for
those who, like me, want to build a modified version of the font with
some alternate glyphs.  This is what I use (and what I distribute with
my dotfiles, under the same license terms as the original).  I have
built the font from source and applied these patches:</p>

<ol>
  <li><a href="https://github.com/source-foundry/alt-hack/tree/master/glyphs/u0028-curved">u0028-curved</a></li>
  <li><a href="https://github.com/source-foundry/alt-hack/tree/master/glyphs/u0029-curved">u0029-curved</a></li>
  <li><a href="https://github.com/source-foundry/alt-hack/tree/master/glyphs/u0030-forwardslash">u0030-forwardslash</a></li>
  <li><a href="https://github.com/source-foundry/alt-hack/tree/master/glyphs/u0033-flattop">u0033-flattop</a></li>
</ol>

<p>To my eyes, these minor tweaks make <em>Hack</em> “sturdier” and are slightly
more consistent with the overall personality of the typeface.  This is
just a matter of agreeing on the defaults.  The original glyphs for
those four code points add a bit more “character” to an otherwise
Spartan presentation; the kind of flair I would rather avoid.  Not that
they are bad per se—just that I prefer their alternatives in the context
of what <em>Hack</em> represents.</p>

<h2>The right tool for the job</h2>

<p>I will be refining my subsetting script and may build on top of it to
automate various tasks, such as building the optimised <code>woff</code> and
<code>woff2</code> files for my website when new upstream versions are released.</p>

<p>Now that I have found a way to manipulate practically every available
typeface out there, I can think of no good reason to ever compromise
again with something like Google Fonts.</p>

<p>Granted, there is a bit of an effort involved, which is well worth it
for the added flexibility it offers.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Flatpak themes in BSPWM</title>
      <description>How I use Flatpak themes with my tiling window manager (BSPWM).</description>
      <pubDate>Thu, 11 Oct 2018 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/bspwm-flatpak-themes/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/bspwm-flatpak-themes/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>I have some Flatpaks installed.  They offer the convenience of using
software that is not in the Debian repos or that would require pulling
in lots of dependencies.</p>

<p>From a usability perspective, all Flatpaks I have tried are agnostic to
the desktop environment.  They work exactly the same on a fully fledged
desktop environment such as GNOME, or in my custom BSPWM session.</p>

<p>One inconvenience for first time users is that by default Flatpak apps
will not inherit the active theme.  They use Adwaita or Breeze instead
(or whaterver the fall back option is).  There is nothing wrong with
those choices per se, though it is annoying to have applications look
completely different from each other, especially when wanting to use a
global dark theme, or just have a consistent look and feel.</p>

<h2>Install Flatpak themes</h2>

<p>Fortunately Flatpak does support theming and the solution is fairly
simple.  The user only needs to download the Flatpak version of their
favourite theme.</p>

<p>Here is the gist of it, taken from <a href="https://blog.tingping.se/2017/05/11/flatpak-theming.html">TingPing’s
blog</a>.</p>

<p>First, we need to enable the Flathub repo:</p>

<pre><code>flatpak remote-add flathub https://flathub.org/repo/flathub.flatpakrepo
</code></pre>

<p>Then it is possible to get a list of all available themes with this command:</p>

<pre><code>flatpak remote-ls flathub | grep org.gtk.Gtk3theme
</code></pre>

<p>Here is how I install the Arc theme variants:</p>

<pre><code>flatpak install flathub org.gtk.Gtk3theme.Arc org.gtk.Gtk3theme.Arc-Darker org.gtk.Gtk3theme.Arc-Dark
</code></pre>

<p>Now, when I open a Flatpak app inside a complete DE it uses the Arc
theme that I assigned in the settings manager.</p>

<h2>But BSPWM has no settings manager</h2>

<p>BSPWM follows a minimalist approach to design.  It quite literally is
just a window manager.  As such, all the conveniences of an integrated
desktop environment must be implemented separately.</p>

<p>Within a generic BSPWM session, Flatpak apps will just use their default
theme.  There is no way to change it, even after having followed the
instructions above.</p>

<p>The reason is that Flatpak does not read from the system’s <code>/usr</code>
directory.  But also that the Flatpak runtime only ‘listens’ to such
configurations from a settings manager program running in the
background.  In GNOME, MATE, etc. the settings daemon is enabled at
startup.  Whereas in BSPWM (and other tiling WMs), we have to cater to
that ourselves.</p>

<p>The solution is to auto start a lightweight settings manager when logging
into the BSPWM session.  I have chosen <code>xfsettingsd</code> from the Xfce
project, though I expect this to work with any similar piece of
software.</p>

<p>Within my <code>bspwmrc</code> I run this (which could be cleaned up a bit):</p>

<pre><code>if [ -x /usr/bin/flatpak ]; then
	if [ -x /usr/bin/xfsettingsd ]; then
		xfsettingsd
	fi
fi
</code></pre>

<p>Now Flatpaks inherit the GTK theme of my choice.  No more Adwaita when
all I want is Arc.</p>

<h2>Advanced usage for live theme switching</h2>

<p>In a fully fledged DE you go into the theme settings, set your choice
and [usually] have it propagate to all running windows.  You witness the
change as it happens.  But in BSPWM there is no settings menu, so no
readily apparent way of interacting with these options.  The good thing
is that running a settings manager means being able to interact with it
via the command line.  This is also the case for <code>xfsettingsd</code> which
‘listens’ to commands from the <code>xfconf-query</code> tool (GNOME and MATE have
something similar with <code>gsettings</code>).</p>

<p>Using <code>xfconf-query</code> has a bit of a learning curve, because you need to
figure out the various parameters.  But once you get the hang of it,
everything follows naturally.</p>

<p>These are the commands I have an immediate need for:</p>

<pre><code>xfconf-query -c xsettings -p /Net/ThemeName -s Arc
xfconf-query -c xsettings -p /Net/IconThemeName -s Papirus
</code></pre>

<p>And their equivalents for the dark theme:</p>

<pre><code>xfconf-query -c xsettings -p /Net/ThemeName -s Arc-Dark
xfconf-query -c xsettings -p /Net/IconThemeName -s Papirus-Dark
</code></pre>

<p>Issuing these commands will have an immediate effect on all running
windows.  To take this a step further, we can implement a script which
handles the theme switch.  I already have one as part of my dotfiles,
which loads a <a href="https://protesilaos.com/tempus-themes/">Tempus theme</a> of my choice.  Since the
Tempus collection is divided into light and dark themes, I also change
the GTK options accordingly.</p>

<p>Here is a quick demo running a terminal, GNOME Clocks as a Flatpak, and
Thunar (it is a bit slower than usual because of screen recording):</p>

<p><img src="https://thumbs.gfycat.com/AliveShortCougar-size_restricted.gif" alt="bspwm_update_running_apps_demo" /></p>

<p>And here is the link to <a href="https://gfycat.com/AliveShortCougar">the higher quality
GIF</a>.</p>

<h2>A work in progress</h2>

<p>This is something I only introduced a few days ago.  There may be a few
things that I have not taken into consideration or that could be
optimised further.</p>

<p>For more on how I implement this, see the “bin” directory of <a href="https://gitlab.com/protesilaos/dotfiles">my
dotfiles</a>, specifically the
<code>own_script_update_environment_theme</code> and the <code>tempusmenu</code> which is an
interface for it.</p>

<p>Be warned, I use GNU Stow to manage my dots.  Do not try to copy/paste
things without accounting for the overall integration between the
various parts of my custom desktop session.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>My plan to switch from Debian Unstable to Stable</title>
      <description>Plan to gracefully migrate from Debian Sid to the next Debian Stable. Use APT sources and preferences. Run a system that is not bleeding edge.</description>
      <pubDate>Fri, 05 Oct 2018 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/debian-sid-stable-plan/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/debian-sid-stable-plan/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>I am currently running Debian Unstable (aka “Debian Sid”) on three
machines.  I think it is an excellent choice for anyone looking to use
Debian while still deploying a rolling release Operating System.  As my
priorities are changing, I want to transition to the stable branch.
With Debian Buster expected some time in mid-2019, here is my plan for
enacting such change.</p>

<h2>A bit of context first</h2>

<p>I was an Arch Linux user prior to migrating to Debian some ~16 months
ago.  Debian’s unstable branch was the natural choice for making the
switch as seamless as possible.  I did not want to disrupt my setup.  It
was dependent on some of the features that were available in the newer
package versions provided by Arch.</p>

<p>So here I am about 1.5 years later.  Fully satisfied with the decision I
made.  Debian Sid has been excellent thus far.</p>

<p>That granted, I find the much-vaunted advantages of a rolling release
distribution to be context-dependent.  It matters what software you rely
on and whether any new features are integral to your workflow.</p>

<p>Put simply, if you want to run a KDE Plasma or a GNOME desktop with all
the new niceties, then rolling release or something closer to the
bleeding edge is the way to go.  If, however, you do not care about
newer technologies like Wayland, and are running a custom working
environment such as my BSPWM (see <a href="https://gitlab.com/protesilaos/dotfiles">my
dotfiles</a>), then the
maintenance overhead of a rolling distro outweighs the potential
benefits of having the latest version of everything.</p>

<p>Most tools I rely on are CLI programs.  These do not change much.  For
example, I use <code>neomutt</code> as my mail client.  All the features I need are
already available.  If <code>neomutt</code> were to retain its feature set forever,
I would still be happy with it.  Same with <code>newsboat</code>, <code>taskwarrior</code>
(executable is <code>task</code>), <code>tmux</code>…  And the list goes on.</p>

<h2>The plan for switching to Debian Buster</h2>

<p class="critical">This is <strong>highly experimental.</strong>   I am <strong>not an expert in Debian</strong>
system administration.  <strong>I do not recommend you try this.</strong> Especially
not on mission critical systems.</p>

<p>Debian Buster (aka Debian 10) is expected a bit less than a year from
now.  This is the right moment to prepare for the transition from
Unstable to the next Stable.  It gives my systems enough time to
gradually settle in the state of the current Debian Testing branch and
keep track of it while it enters the feature freeze.</p>

<p>The plan hinges on APT and involves some basic pinning preferences.  I
want to run a <em>mixed distribution</em> that includes sources from both
<code>testing</code> and <code>unstable</code>.</p>

<p>These are my apt sources:</p>

<pre><code># Security updates (stable)
deb http://security.debian.org/debian-security stable/updates main contrib non-free
deb-src http://security.debian.org/debian-security stable/updates main contrib non-free

# Debian Testing
deb http://ftp.gr.debian.org/debian/ testing main contrib non-free
deb-src http://ftp.gr.debian.org/debian/ testing main contrib non-free

# Debian Unstable
deb http://ftp.gr.debian.org/debian/ unstable main contrib non-free
deb-src http://ftp.gr.debian.org/debian/ unstable main contrib non-free
</code></pre>

<p>And here are the corresponding preferences:</p>

<pre><code>Package: *
Pin: release a=testing
Pin-Priority: 500

Package: *
Pin: release a=unstable
Pin-Priority: 200
</code></pre>

<p>These instruct <code>apt</code> to keep track of packages from the <code>testing</code> branch
and only look at <code>unstable</code> when requested packages are not available
there.  Given enough time, it will make my Debian Unstable systems
indistinguishable from Debian Testing.</p>

<p>The inclusion of the <code>debian-security</code> sources is for those cases where
a package has migrated directly from <code>unstable</code> to <code>stable</code>.  Examples
that come to mind are the latest <code>firefox-esr</code> and <code>thunderbird</code>.</p>

<p>When the feature freeze starts, I will effectively be running Debian
Testing, which is the pre-release of the next stable distribution.</p>

<p>Then the idea is to follow the announcements about when Debian 10 will
become available.  A few days prior to its official release, I will edit
my <code>apt</code> sources again to look like this:</p>

<pre><code>deb http://ftp.gr.debian.org/debian/ stable main non-free contrib
deb-src http://ftp.gr.debian.org/debian/ stable main non-free contrib

deb http://security.debian.org/debian-security stable/updates main contrib non-free
deb-src http://security.debian.org/debian-security stable/updates main contrib non-free

# stable-updates, previously known as 'volatile'
deb http://ftp.gr.debian.org/debian/ stable-updates main contrib non-free
deb-src http://ftp.gr.debian.org/debian/ stable-updates main contrib non-free
</code></pre>

<p>Notice that I added a few more entries, which I adapted from the default
options that are provided on a clean Debian 9 install.  <em>These are
subject to change.</em></p>

<p>Once I have the new sources in place, I will remove the aforementioned
pinning rules.  I only want to track <code>stable</code>.</p>

<h2>Learning by doing</h2>

<p>Debian does not officially support any graceful move from Unstable to
Stable.  <em>This is highly experimental.</em>  I have backups in place in case
something goes awry.</p>

<p>The truth is I have had no issues whatsoever with Debian Sid.  But that
is partly due to my diligence with system administration.  It takes time
and dedication; resources that could be managed more efficiently.  Given
that my main tools do not need to be on the bleeding edge, such
commitment offers a marginal benefit at best.</p>

<p>The afore-described venture would presumably fail miserably if I were
running major software groups that update frequently, such as GNOME or
KDE.  All I now have on my systems apart from the core packages is BSPWM
and related extras, my CLI tools, Firefox and Thunderbird, and Xfce as a
backup Desktop Environment (before I had GNOME and MATE).</p>

<p>I expect the transition to the next Debian Stable to be smooth because I
am not trying to rush things and downgrade packages in bulk.  What is
basically happening is a self imposed package freeze in anticipation of
the official introduction of Debian 10.  Some manual downgrades may
still be required, but these should be limited in scope or at least
easier to figure out.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Dual monitor setup with BSPWM and Polybar</title>
      <description>BSPWM handles multi head setups nicely. Same with polybar. Here are some instructions and comments.</description>
      <pubDate>Fri, 21 Sep 2018 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/multihead-bspwm-polybar/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/multihead-bspwm-polybar/</guid>
      <content:encoded>
        <![CDATA[
         
         <p>A few months ago, I provided a detailed guide on how to set up <a href="https://protesilaos.com/codelog/how-to-bspwm-debian-sid/">BSPWM on
Debian Sid</a>.  Several things have
changed since then.  Most notable among them is that I got hand of a
second monitor that I promptly incorporated in my workflow.  Here I
document the adaptations I had to make, while concluding with my first
impressions of what I got (plus a screen shot).</p>

<p class="warn">The code samples presented herein are representative of my setup as of
2018-09-21.  If you are reading this at a future date, chances are
I have introduced changes.  In such a case, you might want to browse
through <a href="https://gitlab.com/protesilaos/dotfiles">my dotfiles</a>, and/or
<a href="https://protesilaos.com/contact/">contact me</a>.</p>

<h2>Let X know about the monitors</h2>

<p>The display server needs to be configured in a way that mirrors the physical
layout of the monitors.  My primary monitor is the one that is built into my
laptop, the Lenovo X220.  The external monitor connects via a VGA port and is
positioned to the right of the laptop.</p>

<p>The <code>xrandr</code> utility helps us identify the available connected monitors,
or “outputs”, with the command <code>xrandr -q</code>.</p>

<p>What I get from that:</p>

<pre><code class="language-sh">xrandr -q

Screen 0: minimum 8 x 8, current 3286 x 1080, maximum 32767 x 32767
LVDS1 connected primary 1366x768+0+0 (normal left inverted right x axis y axis) 280mm x 160mm
   1366x768      60.00*+
   1360x768      59.96
   1280x720      59.86    60.00    59.74
   1024x768      60.00
   1024x576      60.00    59.90    59.82
   960x540       60.00    59.63    59.82
   800x600       60.32    56.25
   864x486       60.00    59.92    59.57
   640x480       59.94
   720x405       59.51    60.00    58.99
   680x384       60.00
   640x360       59.84    59.32    60.00
DP1 disconnected (normal left inverted right x axis y axis)
DP2 disconnected (normal left inverted right x axis y axis)
DP3 disconnected (normal left inverted right x axis y axis)
HDMI1 disconnected (normal left inverted right x axis y axis)
HDMI2 disconnected (normal left inverted right x axis y axis)
HDMI3 disconnected (normal left inverted right x axis y axis)
VGA1 connected 1920x1080+1366+0 (normal left inverted right x axis y axis) 480mm x 270mm
   1920x1080     60.00*+
   1680x1050     59.95
   1600x900      60.00
   1280x1024     75.02    60.02
   1440x900      59.89
   1280x800      59.81
   1152x864      75.00
   1280x720      60.00
   1024x768      75.03    70.07    60.00
   832x624       74.55
   800x600       72.19    75.00    60.32    56.25
   640x480       75.00    72.81    66.67    59.94
   720x400       70.08
VIRTUAL1 disconnected (normal left inverted right x axis y axis)
</code></pre>

<p>And by including only the ones that are connected, I have:</p>

<pre><code class="language-sh">xrandr -q | grep -w connected

LVDS1 connected primary 1366x768+0+0 (normal left inverted right x axis y axis) 280mm x 160mm
VGA1 connected 1920x1080+1366+0 (normal left inverted right x axis y axis) 480mm x 270mm
</code></pre>

<p>As such, my two monitors are named LVDS1, which is the primary one on the
laptop, and VGA1 for the external one.</p>

<p>What I want to do with this piece of information is tell the X display
server to configure my monitors appropriately whenever I launch a BSPWM
session. Here is the <code>xrandr</code> command:</p>

<pre><code class="language-sh">xrandr --output LVDS1 --primary --mode 1366x768 --rotate normal --output VGA1 --mode 1920x1080 --rotate normal --right-of LVDS1
</code></pre>

<h2>Auto starting inside BSPWM</h2>

<p>Now I want to have some basic shell scripting in place, to check whether
the external monitor is actually connected to the laptop.</p>

<p>First, this snippet is included in my <code>bspwmrc</code>:</p>

<pre><code class="language-sh"># run the xrandr command if an external monitor is connected to the
# laptop.  This must be executed before the polybar command, so that
# polybar can set the two separate bars properly.
if [ -x $HOME/bin/own_script_bspwm_laptop_dual_monitor ];then
    own_script_bspwm_laptop_dual_monitor
fi
</code></pre>

<p>And here is the content of that command:</p>

<pre><code class="language-sh">#!/bin/bash

# set up the two monitors for bspwm
# NOTE This is a simplistic approach because I already know the settings I
# want to apply.
my_laptop_external_monitor=$(xrandr --query | grep 'VGA1')
if [[ $my_laptop_external_monitor = *connected* ]]; then
    xrandr --output LVDS1 --primary --mode 1366x768 --rotate normal --output VGA1 --mode 1920x1080 --rotate normal --right-of LVDS1
fi
</code></pre>

<p>Maybe there are some things that could be done more efficiently, but
this seems to work for the time being.</p>

<h2>Per monitor workspaces</h2>

<p>In BSPWM each monitor contains desktops, or else workspaces.  While each
workspace indicates a binary tree with nodes—basically windows in their
given arrangement.</p>

<p>To have specific workspaces on each monitor, add this to <code>bspwmrc</code>:</p>

<pre><code class="language-sh">bspc monitor LVDS1 -d 1 2 3 4 5
bspc monitor VGA1 -d 6 7 8 9 0
</code></pre>

<p>Note the names of the monitors, as where recognised by <code>xrandr</code>.</p>

<p>Now, when switching to desktops 1…5 the focus is on the primary monitor,
while 6…0 on the second one.</p>

<p>Almost done.</p>

<h2>Run two separate bars with polybar</h2>

<p>The reason I want two bars is to display information about the
workspaces that are occupied on a per monitor basis.  Besides, this
opens up the possibility for fine grained control where, say, the
laptop’s bar shows the <code>xbacklight</code> powered brightness level of the
screen, while the external monitor’s bar has no use of such a module (it
does not use <code>xbacklight</code>).</p>

<p>There are two parts to tackling this:</p>

<ol>
  <li>Define the two bars in the <code>polybar</code> configuration file.</li>
  <li>Launch the second bar, if the external monitor is connected.</li>
</ol>

<h2>Configs for the two bars</h2>

<p>Here are only the relevant parts from the <code>polybar</code> config.  Refer to
<a href="https://gitlab.com/protesilaos/dotfiles">my dotfiles</a>, specifically the
contents of the “bspwm” and “polybar” directories for my actual
configuration files.</p>

<pre><code>[bar/top]
bottom = false
monitor = LVDS1

modules-left = bspwm mpd
modules-right = keyboard battery backlight temperature volume datetime powermenu

[bar/top_external]
bottom = false
monitor = VGA1

modules-left = bspwm mpd
modules-right = keyboard volume datetime powermenu
</code></pre>

<p>The module that requires attention is the one about <code>bspwm</code>.  The
following makes sure that each bar displays only the workspaces
assigned to the given monitor.</p>

<pre><code>[module/bspwm]
type = internal/bspwm

pin-workspaces = true
</code></pre>

<p>Again, these are not the full configs.  Just the absolutely necessary
parts.  With them in place, <code>polybar</code> will show information about the
occupied workspaces of each monitor.  As such, the <code>top_external</code> bar
will only include workspaces 6…0, while <code>top</code> will have 1…5, as per the
settings in <code>bspwmrc</code>.</p>

<h2>Launch the two bars on startup</h2>

<p>This is my current script for calling <code>polybar</code>:</p>

<pre><code class="language-sh">#!/usr/bin/env sh

# Terminate already running bar instances
killall -q polybar

# Wait until the processes have been shut down
while pgrep -u $UID -x polybar &gt;/dev/null; do sleep 1; done

# Launch bar
polybar top &amp;

my_laptop_external_monitor=$(xrandr --query | grep 'VGA1')
if [[ $my_laptop_external_monitor = *connected* ]]; then
    polybar top_external &amp;
fi
</code></pre>

<p>You will notice the same conditional statement at the end which I used
above to run <code>xrandr</code> if necessary.  This script is now auto started from
within <code>bspwmrc</code>, <em>after</em> the script that configures the layout of the
monitors.  <strong>The sequence is absolutely critical</strong>, otherwise <code>polybar</code> is
not made aware of the two monitors and fails to position them properly.</p>

<pre><code class="language-sh"># NOTE the path to the polybar executable.  This is the default location
# when compiling from source.
if [ -x /usr/local/bin/polybar ]; then
	bash $HOME/.config/polybar/launch.sh
fi
</code></pre>

<p>Putting it all together, the “autostart” section of my <code>bspwmrc</code> looks
like this:</p>

<pre><code class="language-sh"># autostart
# ============================

sxhkd &amp;
xrdb -merge $HOME/.Xresources

# run the xrandr command if an external monitor is connected to the
# laptop.  This must be executed before the polybar command, so that
# polybar can set the two separate bars properly.
if [ -x bin/own_script_bspwm_laptop_dual_monitor ];then
    own_script_bspwm_laptop_dual_monitor
fi

# NOTE the path to the polybar executable.  This is the default location
# when compiling from source.
if [ -x /usr/local/bin/polybar ]; then
    bash $HOME/.config/polybar/launch.sh
fi
</code></pre>

<h2>First impressions</h2>

<p>I had never used a dual monitor setup before.  I had no notion of what
to expect.  As such, I cautiously started out with a GNOME session to
see how a major Desktop Environment handles things.  In GNOME, the
second monitor is basically a continuation of the current workspace,
with no apparent way of turning the two monitors into standalone
environments.  I do not like that.  I much prefer BSPWM’s approach where
monitors contain <em>separate</em> workspaces.  Furthermore, GNOME does not
show the activities overview and the top bar in both monitors, which
introduces friction to the kind of workflow I envision.</p>

<p>Whereas a multiheaded BSPWM is a joy to work with.  Apart from the above
configurations, I did not have to change any of my key bindings to have
everything function as required.  Switching to a virtual desktop will
shift the focus to the corresponding monitor.  Great!  And yet, while
workspaces are divided between monitors, window switching still follows
an intuitive scheme of treating the two monitors as a unified space.
Put concretely, if I start from a focused window on the left of the
primary display and keep shifting focus to the right, I eventually
‘cross over’ to the second monitor on whatever node is displayed there.
Same with the commands that swap the position of two nodes.  I guess
this is the best of both worlds: actually separate, visually contiguous.</p>

<p>That granted, this is just my first day on this setup.  Things are
likely to change as I continue tinkering with the various options.</p>

<p>On a final note, running a bespoke environment such as my BSPWM-based
setup admittedly has a higher barrier to entry than the likes of the
major DEs, with the upside of a potentially superior experience.</p>

<h2>Meta</h2>

<p>Obligatory screen shot of what I am actually looking at:</p>

<p><img src="/assets/images/attachments/bspwm_dual_monitor_sample.png" alt="bspwm_dual_monitor" /></p>

<p>The blank area on the left is due to the different screen resolutions.
It is only visible on the screenshot, not in the actual environment.  I
guess due to how X handles things and how <code>scrot</code> captures the output.</p>

<p>The terminal on the left monitor is running a <code>tmux</code> session, with only
a couple of active panes (yes, a tiling WM and a terminal multiplexer
are not mutually exclusive).</p>

<p>If you look closely, you will notice that the top bars only display a
subset of the available workspaces.  That is because I hide all empty
workspaces (see my <code>polybar</code> config).</p>

<p>Finally, the notification on the right top corner is provided by
<code>dunst</code>.  I have configured it to display notifications on the monitor
where the <em>keyboard</em> is active.</p>
        ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>How to: BSPWM on Debian Sid</title>
      <description>Complete guide to set up Debian Sid/Unstable with a custom tiling window manager environment. Uses my meticulously designed configurations.</description>
      <pubDate>Sun, 01 Jul 2018 00:00:00 +0000</pubDate>
      <link>https://protesilaos.com/codelog/how-to-bspwm-debian-sid/</link>
      <guid isPermaLink="true">https://protesilaos.com/codelog/how-to-bspwm-debian-sid/</guid>
      <content:encoded>
        <![CDATA[
         
         <p class="critical"><strong>Update 2019-05-15:</strong>  This post is out-of-date.  DO NOT FOLLOW ITS
INTRUCTIONS.</p>

<p class="info"><strong>Update 2019-05-15:</strong> These instructions have been superseded by my new book: <a href="https://protesilaos.com/pdfd/">Prot’s Dots For
Debian</a>.  That is the comprehensive guide
to reproducing my setup on Debian 10 ‘buster’.</p>

<p class="note"><strong>Update 2019-05-15:</strong> For video demos, see my <a href="https://protesilaos.com/code-casts/">screen casts</a>.</p>

<p>Original text below.</p>

<hr />

<p>I have been running Debian Sid for about a year now. Overall, I think it is an excellent rolling release GNU/Linux distribution. Debian is my distro of choice because of (i) its importance to the free software world, (ii) its diverse community, (iii) its politics and stance on free software,<sup id="fnref:NoteDFSGNonFree" role="doc-noteref"><a href="#fn:NoteDFSGNonFree" class="footnote" rel="footnote">1</a></sup> and (iv) the fact that it is an “enterprise-grade” operating system without being backed by any one company (e.g. Ubuntu).</p>

<p>Debian is not an ideal choice for beginners. It does not try to make the experience the most user friendly or to provide everything “out of the box”. Users coming from distros such as the Ubuntu flavours or Linux Mint, thinking that they will just “cut out the middleman” and go directly to the source, are in for a hard time.</p>

<p>A Debian user is expected to mould their system into their own needs, to make configurations and adaptations for their particular case. For example, you cannot use <code>sudo</code> with your regular user, unless you configure it to do so. The <code>lightdm</code> login screen will not show the user list by default. You will probably have to configure <code>fontconfig</code> in order to have consistent fonts across applications, such as in <code>chromium</code>. All desktop environments offer a basic experience, unlike the care and polish that goes into something like the Linux Mint editions or Ubuntu MATE. And so on. As such, I would argue that Debian is targeted at experienced GNU/Linux users.</p>

<p>In this article, I document all the steps I take to get my custom desktop session on Debian <em>Sid</em>. The core of my setup is the Binary Space Partitioning Window Manager (BSPWM). It is a tilling window manager, similar to the arguably more popular i3 (i3WM).</p>

<p>First some demos, then a few words about Debian release channels, a short note of why I prefer BSPWM over i3, and then the instructions.</p>

<h2>1 Demonstrations</h2>

<p><em>Any large gaps between windows are for demo purposes only, as I prefer to work with values between 0-5.</em></p>

<h3>1.1 Screenshot</h3>

<p><img src="https://gitlab.com/protesilaos/dotfiles-screenshots/raw/master/2019-03-26_multihead-dark-theme.png" alt="bspwm sample screenshot" /></p>

<h3>1.2 Quick view of BSPWM motions</h3>

<p><img src="https://thumbs.gfycat.com/KaleidoscopicPleasantAmmonite-size_restricted.gif" alt="BSPWM motions demo" /></p>

<p><a href="https://gfycat.com/KaleidoscopicPleasantAmmonite">Higher quality demo of BSPWM motions</a>.</p>

<h3>1.3 Change environment theme</h3>

<p>Demo of a script that changes all themes on demand, from terminals to command line utilities, the system bar, etc. It is invoked by my <code>tempusmenu</code>: a <code>dmenu</code> script that provides the available options. The <a href="https://protesilaos.com/tempus-themes/">Tempus themes</a> are compliant <em>at minimum</em> with the WCAG AA accessibility standard for colour contrast.</p>

<p><img src="https://thumbs.gfycat.com/HandmadeSimplisticBetafish-size_restricted.gif" alt="bspwm demo of theme change" /></p>

<p><a href="https://gfycat.com/HandmadeSimplisticBetafish">Higher quality of environment theme change demo</a>.</p>

<h2>2 A few words about Debian Sid and Debian release channels</h2>

<p>Debian is divided in four release channels: Stable, Testing, Unstable, and Experimental. Packages migrate from the last to the first in sequence, after being subjected to careful scrutiny where release critical bugs and security holes are identified and addressed.</p>

<p>The Stable release is the one recommended to regular users and readily available through the project’s homepage. It currently sits at version 9.4 and is codenamed “Stretch”. Stable gets a major release about once every two years, though there is no rigid release schedule. It is published when it is ready. Package versions remain on the same major version throughout the distribution’s life cycle, with minor fixes and security updates being the ones pushed down to users. Choose Stable if you intend to set up a system that requires very little maintenance, such as a home server or a generic desktop computer system.</p>

<p>Testing is the next Stable release, currently codenamed “Buster”. It occupies the space between Stable and Unstable. In technical terms, Testing <em>as such</em> is a rolling release model, though the various code names are better described as semi-rolling.<sup id="fnref:NoteTestingRolling" role="doc-noteref"><a href="#fn:NoteTestingRolling" class="footnote" rel="footnote">2</a></sup> I think Testing covers a specific niche. It should not be used by Debian users who need access to newer packages and are prepared to assume the responsibility inherent in running bleeding edge software (more on that in the following subsection).</p>

<p>The Unstable branch gets newer packages, which are subject to regular updates. Unstable is always codenamed ‘Sid’. It never has an actual version number, because it follows a rolling release model. Packages are updated as they come. Sid is only defined by approximation, based on what the current Testing branch is called. As such, the <em>current state</em> of Sid is internally referred to as Buster/Sid. Use Sid if you want to have a bleeding edge system and are prepared to resolve any problems as they arise.</p>

<p>As for Experimental, its name denotes its function. It is meant for Debian developers.</p>

<h3>2.1 Why Sid instead of Testing</h3>

<p>The three-fold reason I favour Sid over Testing is as follows:</p>

<ul>
  <li><strong>Responsibility is yours.</strong> You want to run a rolling release distribution. You should not expect it to be as hassle-free as Stable. If you value stability above everything else, you should not be thinking about switching to Testing/Sid. Use Debian Stable, an Ubuntu LTS release, or Linux Mint.</li>
  <li><strong>Testing offers the illusion of stability.</strong> If you read various comparisons online, there is this belief that you should use Testing over Sid because it has the best of both worlds. It is more like running Stable with newer packages. I find this kind of misleading. Testing is still a rolling release distribution, so <em>responsibility is yours</em>.</li>
  <li><strong>Testing can remain broken for longer.</strong> If you go into Testing thinking that it is perfectly stable, then you will run into trouble. And when you do come across problems, they will persist for longer compared to Sid. The reason is that upstream fixes go to Sid first and only after a certain period of time do they migrate to Testing.</li>
</ul>

<p>In other words, I think Sid makes it crystal clear that you are responsible for your system. Whereas Testing can give the impression that you can sort of cheat your way into having both bleeding edge software and stability. That is the wrong mentality to have if you are to use a rolling release distro. If, however, you know exactly what you are doing, there is almost no difference between Testing and Sid: it is just a matter of how close to the bleeding edge you want to be.</p>

<p>At any rate, I consider the package <code>apt-listbugs</code> essential to running either of these options (more on that in the installation instructions below).</p>

<h2>3 Why BSPWM over i3WM</h2>

<p>BSWPM represents windows as the leaves of a binary tree, dividing the working area between a focused node and a stack of inactive windows (technically a window spiral).</p>

<p>GNU/Linux users may already be familiar with i3, a popular tiling window manager. I have used <code>i3wm</code> for quite a while. Both the upstream and the popular <code>i3-gaps</code> fork (which is not in the Debian repos). Overall, it is an excellent choice, but I think BSPWM is slightly better. For me, the main advantages are:</p>

<ol>
  <li>Follows the UNIX philosophy. Does not come bundled with its own status bar or any extras. BSPWM is quite literally a window manager and nothing else.</li>
  <li>The configuration file is a shell executable, which allows scripting (e.g. if program exists, then run it, else do nothing) or sourcing other files.</li>
  <li>The hotkey daemon, which handles interaction with BSPWM, has a clean syntax that allows the declaration of multiple key bindings at once. Also recognises events like activating the command on key release or on repeat. Finally, it provides the option of defining key chord chains (multiple key presses to run a command).</li>
  <li>Unlike upstream i3, BSPWM offers the option for gaps between windows. Yeah, huge gaps are a gimmick. But small ones can be a productivity boost. This is not really an advantage if we compile <code>i3-gaps</code> from source, but mostly a convenience to get gaps from the official <code>bspwm</code> Debian package.</li>
</ol>

<h2>4 Installation instructions</h2>

<p class="info">These instructions may be updated at a future date. I do, in particular, plan to add a table of contents and expand on some further customisations the user may want to consider.</p>

<p class="note">The following instructions were implemented on 2018-06-30 on a clean Debian 9.4 install, using the latest available net install option. The hardware is Lenovo ThinkPad X220.</p>

<p class="critical"><strong>Do not try these instructions on mission critical infrastructure.</strong> Use a Virtual Machine or a spare computer. These work on my Lenovo ThinkPad X220 laptop and the Lenovo H30-05 desktop. Your mileage may vary. I do not claim to know how different hardware configurations will behave. <strong>The responsibility is yours. Proceed at your own risk.</strong></p>

<h3>4.1 Setting up a clean Debian install</h3>

<p>I prefer to use the <a href="https://www.debian.org/distrib/netinst">net install of the current Stable release</a>. If you have a machine that does not have Ethernet access, or requires non-free drivers for Wi-Fi, then you will be better served by <a href="https://cdimage.debian.org/cdimage/unofficial/non-free/cd-including-firmware/">one of those</a>.</p>

<p>The reason I first install Debian Stable and then switch to Sid, is to have a solid starting point. There are ways to install Sid directly, but your timing might coincide with the presence of a major bug in a core piece of software. The package <code>apt-listbugs</code> (more on that below) will protect you from such unpleasant surprises.</p>

<p>During the installation process, you will be asked to choose your major system components. A Desktop Environment, an SSH server, a print server, etc. I always keep the first option checked, then [using the space key to toggle on/off] I add MATE, SSH server, remove the print server, and keep the standard system utilities.</p>

<p>Here is a representation:</p>

<pre><code>[x] Debian desktop environment
[ ] ... GNOME
[ ] ... Xfce
[ ] ... KDE
[ ] ... Cinnamon
[x] ... MATE
[ ] ... LXDE
[ ] web server
[ ] print server
[x] SSH server
[x] standard system utilities
</code></pre>

<p>You will get Debian Stable running the MATE desktop environment. I always choose a DE because it makes certain things easier, like network access and a functioning Xorg display server. It also provides a decent fallback option, as well as something that could be used by other users in the house or a guest.</p>

<p>Now to prepare for the transition to Debian Sid. Open a terminal and type the following commands (lines starting with <code>#</code> are comments and should not be added to the command line).</p>

<pre><code class="language-sh"># Switch to the root user (password was defined at install time)
su

# update the package archives
apt update

# install some core packages, especially `apt-listbugs`
# `apt-listbugs` is essential if you want to run Sid or even Testing
apt install sudo vim apt-listbugs build-essential

# add your username to the sudo group
adduser USERNAME sudo
</code></pre>

<p>Reboot your system.</p>

<h3>4.2 Preparing the update to Sid</h3>

<p>Now edit <code>/etc/apt/sources.list</code> to enable Sid (you must be the root user or run with <code>sudo</code>). You will need to replace all references to <code>stable</code> or <code>stretch</code> with <code>sid</code>. This is the right time to also include support for non-free packages if you need them.</p>

<p>This is all I have in my APT sources file, using the mirrors from Greece:</p>

<pre><code class="language-sh">deb http://ftp.gr.debian.org/debian/ sid main contrib non-free
deb-src http://ftp.gr.debian.org/debian/ sid main contrib non-free
</code></pre>

<p>Save your changes. Now type the following commands in a terminal (use <code>sudo</code> as regular user, omit it if you login with <code>su</code>):</p>

<pre><code class="language-sh"># refresh the package lists with references from Debian Sid
sudo apt update

# perform a full system upgrade
sudo apt full-upgrade
</code></pre>

<p>These will start the process of converting Stable to Sid. The process might mess up with the fonts in your terminal, but is otherwise quite straightforward. Let it run and do not do anything in the meantime.</p>

<p>Note though, that at the time of writing, there are some critical bugs that require your attention. <code>apt-listbugs</code> will print a list with short descriptions, and you have the option to open an HTML file with links to the full bug reports. To complete the upgrade, you might have to pin some packages (keep them at their current version). This can be done at the prompt of <code>apt-listbugs</code> with this command:</p>

<pre><code class="language-sh">p &lt;package-name&gt;
</code></pre>

<p>My actual pinning was this:</p>

<pre><code class="language-sh">p synaptic libgpg-error0 efibootmgr libdrm-radeon1
</code></pre>

<p>You will then have to select “NO” and type <code>sudo apt full-upgrade</code> to repeat the process while excluding the pinned packages.</p>

<p>Those pinned packages are stored in <code>/etc/apt/preferences.d/apt-listbugs</code>. Remember to periodically check if the problems have been fixed. Lots of pinned packages might cause unpredictable behaviour.</p>

<p>The upgrade will take a while, depending on your connection speed. Mine was about an hour.</p>

<p>Reboot once done. You are now running Debian Sid with the latest MATE desktop. Congratulations!</p>

<h3>4.3 Setting up my BSPWM environment</h3>

<p>Log back in to MATE for the last time. Or use a TTY if you wish. We are almost done.</p>

<h4>4.3.1 Getting the core packages</h4>

<p>Now to install my custom environment. You might want to build the system yourself, in which case it is better to just install the essentials. Seeing though as you are reading this guide, I would recommend you install the essentials plus the extras. The following commands will also pull in all the relevant dependencies.</p>

<pre><code class="language-sh"># essentials
sudo apt install git stow curl scrot feh materia-gtk-theme rxvt-unicode bspwm suckless-tools sxhkd xbacklight compton dunst libnotify-bin rsync i3lock lxappearance

# essentials + extras
sudo apt install git stow curl qtpass fonts-roboto fonts-hack-ttf neomutt abook ranger newsboat scrot feh materia-gtk-theme rxvt-unicode mpd mpc ncmpcpp bspwm suckless-tools sxhkd xbacklight compton dunst mpv youtube-dl imagemagick libnotify-bin taskwarrior w3m zathura firefox thunderbird redshift dtrx rsync i3lock lxappearance fonts-font-awesome
</code></pre>

<h4>4.3.2 Install the Mint-Y icons</h4>

<p>These are all the packages we need from the official repositories. Now on to get the icon theme I employ in my notification system (defined in the <code>~/.config/dunst/dunstrc</code> file). I choose the Mint-Y icon theme because it is quite complete and consistent. Open a terminal and run:</p>

<pre><code class="language-sh"># Get the source files
git clone https://github.com/linuxmint/mint-y-icons.git --depth 1

# Enter the mint-y-icons directory
cd mint-y-icons

# Sync the source files to the system (makes the icons available to all users) 
sudo rsync -avzr usr/share/icons/* /usr/share/icons/
</code></pre>

<p>Note that the last command uses <code>rsync</code> instead of <code>cp</code>. The former is good for incremental updates. So you can periodically <code>cd</code> into the icons’ source code (as above), run <code>git pull</code> to get the latest updates, and then execute the <code>rsync</code> command as shown above to pass only those updates to the system files (<code>rsync</code> is an awesome tool).</p>

<h4>4.3.3 Install Polybar</h4>

<p>Unlike your standard Desktop Environment, BSPWM does not come bundled with anything. BSPWM is just the window manager program. Does one thing and does it well. To get a decent system panel, we can use <code>lemonbar</code> from the official repositories, but I think that is not the best option. Instead I opt to compile <code>polybar</code> from source. Prepare a terminal for the following commands.</p>

<p>These will get you the dependencies:</p>

<pre><code class="language-sh"># prepare polybar from source
# instructions https://github.com/jaagr/polybar/wiki/Compiling

## install dependencies
sudo apt install cmake cmake-data pkg-config libcairo2-dev libxcb1-dev libxcb-util0-dev libxcb-randr0-dev python-xcbgen xcb-proto libxcb-image0-dev libxcb-ewmh-dev libxcb-icccm4-dev libxcb-xkb-dev libxcb-xrm-dev libxcb-cursor-dev libasound2-dev libpulse-dev libmpdclient-dev libiw-dev libnl-3-dev
</code></pre>

<p>Now to retrieve the source code and compile it:</p>

<pre><code class="language-sh">## get source and compile
git clone --recursive https://github.com/jaagr/polybar
mkdir polybar/build
cd polybar/build
cmake ..
sudo make install
</code></pre>

<h4>4.3.4 Get my dotfiles (customisations)</h4>

<p class="warn">Before proceeding, make sure you check this short blog post of mine about how I use <a href="https://protesilaos.com/codelog/gnu-stow-dotfiles/">GNU Stow with my dotfiles</a>.</p>

<p>All packages are in place. Now we need the dotfiles to complete the process. As I tend to tweak things here and there, I link you to the <a href="https://gitlab.com/protesilaos/dotfiles/tags/v2.1.0">current version of my dotfiles, which is v2.1.0</a>. You must download that version, decompress it in your <code>$HOME</code> directory, rename it “dotfiles-prot” (or something that works for you), and then prepare to run the following (here is the <a href="https://gitlab.com/protesilaos/dotfiles">canonical link to my dotfiles</a>, if you wish to clone the repo).</p>

<pre><code class="language-sh"># switch your current directory to my dotfiles
cd ~/dotfiles-prot

# use stow to create symlinks
# all parts of the desktop session go to their right place
# here are my essentials
stow bin bspwm cli-tools colours extra fonts gtk shell polybar vim xorg music
</code></pre>

<p>After running the <code>stow</code> command, check the files in the <code>xorg-extra</code> directory. There are instructions on how to fix xbacklight if it is not working.</p>

<p>Just to be sure, reboot you system. Done! You can now choose to log in to BSPWM from the login screen (which should be <code>lightdm</code> if you selected the MATE desktop).</p>

<p class="warn">Do not delete my dotfiles after running <code>stow</code>. It will break all the symlinks it created. Similarly, do not reorganise things. If you want to customise things, first familiarise yourself with <code>stow</code>. Then make a copy of my dotfiles, add your adaptations, and use those to create the symlinks. I strongly encourage you to use <code>stow</code>. It saves you from a lot of manual work and makes your dotfiles portable and easy to deploy.</p>

<h2>5 Using the new system</h2>

<h3>5.1 Custom key chords</h3>
<p>To see all available key bindings, read this file <code>~/.config/sxhkd/sxhkdrc</code>. Below are the basics (I have tried to define key bindings that do not conflict with any of the programs I have used):</p>

<pre><code>Key bindings for my BSPWM setup
followed by their description
===============================

Basic motions
-------------

Vi like motions:

    super + h   Focus window to the left
    super + l   Focus window to the right
    super + j   Focus window to the bottom
    super + k   Focus window to the top

    super + shift + h   Move focused window to the left
    super + shift + l   Move focused window to the right
    super + shift + j   Move focused window to the bottom
    super + shift + k   Move focused window to the top

Window operations:

    super + q   Close window
    super + shift + q   Kill window

    super + m   Toggle monocle view (the equivalent of maximise)
    super + f   Toggle full screen view
    super + space   Toggle floating/tiling

Workspace operations:

    super + 1   Switch to workspace 1
    super + 2   Switch to workspace 2
... same up to 9

    super + shift + 1   Move focused window to workspace 1
    super + shift + 2   Move focused window to workspace 2
... same up to 9

    super + ctrl + shift + 1   Move and follow focused window to workspace 1
    super + ctrl + shift + 2   Move and follow focused window to workspace 2
... same up to 9

Main tools:

    super + d         Open dmenu (for launching programs)
    super + return    Open a urxvt instance

Key chord chains
----------------
These are multiple key presses to perform an action.
See comments in sxhkdrc about why I choose those letters.

Commands that affect the environment:

    super + e ; s   Reload the sxhkdrc (when making changes)
    super + e ; p   Reload polybar

Commands that invoke executables (see sxhkdrc for all the commands):

    super + x ; 1   Run Firefox
    super + x ; 2   Run a terminal with ranger (file manager)
    super + x ; 3   Run a terminal with newsboat (feed reader)
</code></pre>

<h3>5.2 The file manager</h3>

<p>Now that you know the basic shortcuts, you may want to personalise your setup. Start with adding your wallpaper. Open <code>ranger</code> by typing <code>super + x ; 2</code> (super and x, followed by 2). Once inside <code>ranger</code>, you can navigate using Vi motions or type <code>gpc</code> to go to your pictures folder (all shortcuts are defined in <code>~/.config/ranger/rc.conf</code>). Set the selection over the image you want and type <code>Cbg</code> to set your new background. Similarly, you can define a lock screen image, by typing <code>Clk</code>.</p>

<h3>5.3 Auto starting programs</h3>

<p>To see what programs are auto started, see <code>~/.config/bspwm/bspwmrc</code>, as well as <code>~/.xsessionrc</code>, <code>~/profile</code>, and <code>~/.config/autostart</code>.</p>

<h3>5.4 The Tempus themes</h3>

<p>All the colours you see are part of my <a href="https://protesilaos.com/tempus-themes/">Tempus themes</a> project. The one you get is Tempus Dusk, which is a dark theme with slightly desaturated colours. To switch to something else, type <code>super + e ; t</code>. A drop-down menu will appear. Either type your choice and press enter or use the arrow keys and press enter. Some themes are light, others are dark.</p>

<p>Open terminals should be updated live (though not CLI programs, like <code>vim</code> or <code>ranger</code>), but GUI applications must typically be closed and opened again for changes to take effect.</p>

<p>To customise what GTK themes and icons are used in this switch, you must edit this script <code>~/bin/own_script_update_environment_theme</code> (search for the definition of the <code>modify_gtk3</code> function—current GTK themes are Materia, while icons are Mint-Y). This script also changes the wallpaper if you go from a dark to a light theme and vice versa. To define the image for dark and light themes respectively, add the images of your choice at <code>~/Pictures/theme/dark.jpg</code> and <code>~/Pictures/theme/light.jpg</code> (edit the script if you wish to either disable this or use a different location—the function is <code>modify_wallpaper</code>).</p>

<h3>5.5 Password manager (optional)</h3>

<p>Consider setting up <code>pass</code> (or <code>qtpass</code>) as your password manager. If you do, you can conveniently copy your stored passwords to the clipboard (with a timed auto clear) by bringing up the <code>passmenu</code> with <code>super + p</code> (for me, this is one of the best things ever). The interface is the same as with all my <code>dmenu</code> implementations (such as the theme switch from the previous paragraph). Type your search or use the arrows and hit the return key.</p>

<p>There are many more things you will learn as you use the system. I recommend you develop a good understanding of my dotfiles. Many of the files therein include inline comments and define all of the custom actions I rely on.</p>

<h3>5.6 Add your music (optional)</h3>

<p>We need to set up the Music Player Daemon using a per-user install.</p>

<pre><code class="language-sh"># disable the systemd service
# we autostart mpd from the bspwm environment
sudo systemctl disable mpd

# switch to the mpd local config directory
cd ~/.config/mpd

# create the directory where playlist data is stored
mkdir playlists

# create the files mpd needs to run
touch database log pid state sticker.sql
</code></pre>

<p>To update the <code>mpd</code> database (assuming the presence of files at <code>~/Music</code>) either run <code>mpc update</code> in a terminal or type <code>ncmpcpp</code> and then press <code>u</code>. If your music is in a different directory, edit the path in this file <code>~/.config/mpd/mpd.conf</code>.</p>

<p>You may need to reboot for the <code>systemd</code> service to stop interfering with your setup.</p>

<p>To play music, learn how to use <code>ncmpcpp</code> (I typically switch to screen 4, by hitting <code>4</code>, then <code>A</code> and hit enter for an empty prompt which adds all available music to the playlist, then I toggle on repeat mode with <code>r</code> and random order with <code>z</code>).</p>

<p>If you do not like <code>ncmpcpp</code>, I highly recommend <code>cantata</code>, a graphical MPD frontend using the Qt toolkit.</p>

<h3>5.7 Use newsboat for RSS feeds (optional)</h3>

<p>To actually use <code>newsboat</code> (shortcut is <code>super + x ; 3</code>), you first need to provide a file with links to RSS/Atom feeds. This should be placed at <code>~/.config/newsboat/urls</code>. Here is a sample:</p>

<pre><code class="language-sh"># Just a feed URL per line
https://protesilaos.com/politics.xml
https://protesilaos.com/codelog.xml

# The words inside quotes are tags, separated by a space.
# Tags can be used to filter content (see filters below).
https://protesilaos.com/politics.xml "Blogs Politics"
https://protesilaos.com/codelog.xml "Blogs FOSS"

https://gitlab.com/protesilaos/dotfiles.atom "Packages"
https://github.com/ubuntu-mate/mate-tweak/releases.atom "Packages"

# Filters
# =======

# What goes after `query:` is the text that newsboat displays
"query:Blogs:tags # \"Blogs\""
"query:Git Packages:tags # \"Packages\""

"query:Unread Articles:unread = \"yes\""
</code></pre>

<p>Configure this program to your liking by editing <code>~/.config/newsboat/config</code>. For all available options, check <code>man newsboat</code>.</p>

<h3>5.8 Configure the notification daemon (optional)</h3>

<p>The daemon that handles notifications is <code>dunst</code>. Its options file is located at <code>~/.config/dunst/dunstrc</code>.</p>

<p>For example, in case you want to change the icons that <code>dunst</code> uses, edit the paths in this:</p>

<pre><code class="language-conf"># Paths to default icons.
icon_folders = /usr/share/icons/Mint-Y/actions/32/:/usr/share/icons/Mint-Y/animations:/usr/share/icons/Mint-Y/apps/32/:/usr/share/icons/Mint-Y/categories:/usr/share/icons/Mint-Y/devices/32/:/usr/share/icons/Mint-Y/mimetypes/32/:/usr/share/icons/Mint-Y/panel/32/:/usr/share/icons/Mint-Y/places:/usr/share/icons/Mint-Y/status
</code></pre>

<p>To read about all the available settings, see <code>man dunst</code>.</p>

<p>Note that the colours are changed every time you run the commands that change the Tempus themes (see above).</p>

<h4>5.8.1 Custom notifications (optional)</h4>

<p>If you want to create your own notifications, check <code>man notify-send</code>. Here are some examples:</p>

<pre><code class="language-sh"># Generic test
notify-send "Test title" "Test body of text"

# Generic test with a generic icon
# uses the icon paths defined in `~/.config/dunst/dunstrc`
notify-send -i firefox "Test title" "Test body of text"

# Generic test with absolute path to icon
notify-send -i /usr/share/icons/Mint-Y/apps/32/firefox.png "Test title" "Test body of text"

# Display the output of another command
# Show the status of the Music Player Daemon in a custom format
notify-send -i rhythmbox "Now Playing" "$(mpc --format '%artist% ~ %title% \[%album%\]' current)"
</code></pre>

<h2>6 Further steps</h2>

<h3>6.1 General maintenance of Debian Sid</h3>

<p>I always like to maintain a “Debian maintenance” file where I document all customisations I make which are not part of the official release (such as installing Polybar). I recommend you do the same and always keep track of custom files you add here and there, otherwise you will clutter your system. That might cause problems down the way.</p>

<p>Also remember to run <code>sudo apt update</code> before installing packages that pull in new dependencies. The last thing you want is package conflicts arising from a combination of older and newer packages. As for upgrading packages, I always run <code>sudo apt full-upgrade</code> because it removes packages that become obsolete. Remove orphan packages with <code>sudo apt autoremove</code>.</p>

<p>You already read about <code>apt-listbugs</code> that it stores its data at <code>/etc/apt/preferences.d/apt-listbugs</code>. In case you forgot about it, or I have not stressed enough the importance of this package, here is an excerpt from <code>man apt-listbugs</code>:</p>

<blockquote>
  <p>apt-listbugs is a tool which retrieves bug reports from the Debian Bug Tracking System and lists them. In particular, it is intended to be invoked before each installation or upgrade by APT, or other compatible package managers, in order to check whether the installation/upgrade is safe.</p>

  <p>In the typical use case, the user is installing or upgrading a number of packages with APT or some other compatible package manager. Before the package installation or upgrade is actually  performed, apt-listbugs is automatically invoked: it queries the Debian Bug Tracking System for bugs (of certain configured severities) that would be introduced into the system by the installation or upgrade; if any such bug is found, apt-listbugs warns the user and asks how to proceed. Among other things, the user has the opportunity to continue, to abort the installation or upgrade, or to pin some packages  (so  that  the  unsafe installation or upgrade is deferred). However, pinning is not effective immediately, and requires restarting the APT session (by aborting and then re-running the same APT command).</p>
</blockquote>

<p>Always inspect the output of this program and act on it. Debian Sid expects you to take full responsibility over the maintenance of your system. Furthermore, make sure you periodically check the packages that you pinned in case a fix has been provided.</p>

<h3>6.2 Nodejs environment (optional)</h3>

<p>Debian provides packages for <code>nodejs</code> but I find them problematic. Instead I follow the <a href="https://nodejs.org/en/download/package-manager/#debian-and-ubuntu-based-linux-distributions">official instructions</a>. I did:</p>

<pre><code class="language-sh">curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -
sudo apt-get install -y nodejs

sudo apt-get install -y build-essential
</code></pre>

<h3>6.3 Ruby environment (optional)</h3>

<p>This website is powered by Jekyll, a static site generator that is built with Ruby. I need the following to get my local testing environment:</p>

<pre><code class="language-sh">sudo apt install ruby ruby-dev ruby-bundler zlib1g-dev
</code></pre>

<h3>6.4 Clean up GTK themes, icons, fonts (optional)</h3>

<p>Unless you enjoy having a large collection of available fonts and themes (or are using one of the following), you will probably want to remove much of what is available:</p>

<pre><code class="language-sh">sudo apt remove albatross-gtk-theme blackbird-gtk-theme bluebird-gtk-theme greybird-gtk-theme murrine-themes mate-icon-theme-faenza gnome-icon-theme fonts-droid-fallback fonts-sil-gentium fonts-sil-gentium-basic fonts-linuxlibertine fonts-vlgothic fonts-crosextra-carlito fonts-crosextra-caladea fonts-lato
</code></pre>

<p>If you want to add some excellent alternatives, I recommend these:</p>

<pre><code class="language-sh">sudo apt install arc-theme papirus-icon-theme fonts-noto-hinted fonts-noto-mono
</code></pre>

<h2>7 Troubleshooting</h2>

<h3>7.1 Polybar is missing</h3>

<p>Note that <code>polybar</code> will not appear on screen if it does not recognise the active monitor. You need to edit <code>~/.config/polybar/config</code>. Search for “monitor” and change the value based on the output of <code>xrandr</code>.</p>

<p>I find my connected monitor by typing this in a terminal <code>xrandr | grep -w connected</code>. You get something like this:</p>

<pre><code class="language-sh">xrandr | grep -w connected

VGA-0 connected 1920x1080+0+0 (normal left inverted right x axis y axis) 480mm x 270mm
</code></pre>

<p>What you are looking for is the very first part, <code>VGA-0</code> in this case.</p>

<h3>7.2 URxvt does not show bold fonts</h3>

<p>The configuration file for <code>urxvt</code> (package name is <code>rxvt-unicode</code>) is placed in a custom location: <code>~/.my_urxvt/config</code>. I used to have these font definitions:</p>

<pre><code class="language-conf">URxvt.font: xft:Hack:pixelsize=14,xft:DejaVu Sans Mono:pixelsize=14
URxvt.boldFont: xft:Hack:pixelsize=14:bold,xft:DejaVu Sans Mono:pixelsize=14:bold
URxvt.italicFont: xft:Hack:pixelsize=14:italic,xft:DejaVu Sans Mono:pixelsize=14:italic
URxvt.bolditalicFont: xft:Hack:pixelsize=14:bold:italic,xft:DejaVu Sans Mono:pixelsize=14:bold:italic
</code></pre>

<p>But they do not seem to work any longer. So I changed to these:</p>

<pre><code class="language-conf">URxvt.font: xft:Hack:style=Regular:pixelsize=14,xft:DejaVu Sans Mono:style=Book:pixelsize=14
URxvt.italicFont: xft:Hack:style=Italic:pixelsize=14,xft:DejaVu Sans Mono:style=Italic:pixelsize=14
URxvt.boldFont: xft:Hack:style=Bold:pixelsize=14,xft:DejaVu Sans Mono:style=Bold:pixelsize=14
URxvt.boldItalicFont: xft:Hack:style=Bold Italic:pixelsize=14,xft:DejaVu Sans Mono:style=Bold Italic:pixelsize=14
</code></pre>

<h2>Enjoy your new system</h2>

<p>I hope you make good use of these instructions and that you appreciate Debian Sid and BSPWM (and all the rest) as much as I do. While I have written this guide in a user-friendly way, I strongly encourage you to research <em>everything</em> before proceeding. <strong>This is not a guide for inexperienced users who do not fully understand the effects of the commands they type in the terminal.</strong></p>

<p>For any questions or recommendations, feel free to <a href="https://protesilaos.com/contact/">contact me</a>.</p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:NoteDFSGNonFree" role="doc-endnote">
      <p>The Free Software Foundation does not include Debian in its <a href="https://www.gnu.org/distros/free-distros.en.html">list of fully free GNU/Linux distributions</a>, probably because Debian offers a convenient way to include non-free packages (mainly drivers and firmware). The FSF’s stance is understandable, but I think Debian’s realism is beneficial overall. Getting hardware that does not require any propriety code is quite tricky and typically comes at a premium. Not everyone can afford that. <a href="#fnref:NoteDFSGNonFree" class="reversefootnote" role="doc-backlink">[^]</a></p>
    </li>
    <li id="fn:NoteTestingRolling" role="doc-endnote">
      <p>What I mean is that if you define <code>testing</code> in your apt sources you will always remain on that branch, whereas setting it to <code>buster</code> will currently put you on Testing but eventually leave you on it once it becomes the new <code>stable</code>. <a href="#fnref:NoteTestingRolling" class="reversefootnote" role="doc-backlink">[^]</a></p>
    </li>
  </ol>
</div>
        ]]>
      </content:encoded>
    </item>
    
  </channel>
</rss>